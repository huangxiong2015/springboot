/*
 * Created: 2017年1月19日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.vendors.bll;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.yikuyi.basedata.ShipmentClientBuilder;
import com.yikuyi.basedata.category.model.Category;
import com.yikuyi.party.credit.dao.PartyCreditDao;
import com.yikuyi.party.credit.model.PartyAttachment;
import com.yikuyi.party.credit.model.PartyCredit;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.facility.bll.FacilityManager;
import com.yikuyi.party.facility.model.Facility;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipTypeEnum;
import com.yikuyi.party.party.bll.PartyAttributeManager;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.vendor.dao.PartyBankAccountDao;
import com.yikuyi.party.vendor.dao.VendorDao;
import com.yikuyi.party.vendor.vo.ContactPersonInfo;
import com.yikuyi.party.vendor.vo.PartyBankAccount;
import com.yikuyi.party.vendor.vo.PartyProductLine;
import com.yikuyi.party.vendor.vo.VendorCreditVo;
import com.yikuyi.party.vendor.vo.VendorInfoVo;
import com.yikuyi.party.vendor.vo.VendorSaleInfoVo;
import com.yikuyi.party.vo.DeptVo;
/**
 * 供应商信息
 * @author zr.chenxuemin@yikuyi.com
 * @version 1.0.0
 */
@Service
@Transactional
public class VendorManager {
	private static final Logger logger = LoggerFactory.getLogger(VendorManager.class);
	
/*	public static final String VENDOR_INFO_LEGALPERSON="VENDOR_INFO_LEGALPERSON"; //公司法人
	public static final String VENDOR_INFO_REGPRICE="VENDOR_INFO_REGPRICE"; //注册资金
	public static final String VENDOR_INFO_REGRADDRESS="VENDOR_INFO_REGRADDRESS"; //注册地址
	public static final String VENDOR_INFO_EMPLOYEENUM="VENDOR_INFO_EMPLOYEENUM"; //员工人数
	public static final String VENDOR_INFO_WEBSITE="VENDOR_INFO_WEBSITE"; //供应商官网
	public static final String VENDOR_CREDIT_PURCHASEDEAL="VENDOR_CREDIT_PURCHASEDEAL"; //采购协议
	public static final String VENDOR_CREDIT_PURCHASEDEALDATE="VENDOR_CREDIT_PURCHASEDEALDATE"; //采购协议有效期
	public static final String VENDOR_CREDIT_SECRECYPROTOCOL="VENDOR_CREDIT_SECRECYPROTOCOL"; //保密协议
	public static final String VENDOR_CREDIT_SECRECYPROTOCOLDATE="VENDOR_CREDIT_SECRECYPROTOCOLDATE"; //保密协议有效期
	public static final String VENDOR_SALE_INFOVO_FOCUSFIELDS="VENDOR_SALE_INFOVO_FOCUSFIELDS"; //关注领域
	public static final String VENDOR_SALE_INFOVO_PRODUCTCATEGORYS="VENDOR_SALE_INFOVO_PRODUCTCATEGORYS"; //优势产品类别
	public static final String VENDOR_SALE_INFOVO_MAJORCLIENTS="VENDOR_SALE_INFOVO_MAJORCLIENTS"; //主要客户
*/
	
	
	
	@Autowired
	private ShipmentClientBuilder shipmentClientBuilder;
	
	@Autowired
	private VendorDao vendorDao;
	
	@Autowired
	private PartyAttributeManager partyAttributeManager;
	
	@Autowired
	private PartyAttributeDao partyAttributeDao;
	@Autowired
	private PartyCreditDao partyCreditDao;
	
	@Autowired
	private PartyBankAccountDao partyBankAccountDao;
	
	@Autowired
	private PartyProductLineManager partyProductLineManager;
	
	@Autowired
	private PartyGroupDao partyGroupDao;
	
	@Autowired
	private PersonDao personDao;
	
	@Autowired
	private FacilityManager facilityManager;
	/**
	 * 根据partyId获取供应商基本信息
	 * @param partyId
	 * @return
	 * @since 2017年8月11日
	 * @author zr.chenxuemin@yikuyi.com
	 */
	public VendorInfoVo getVendorInfo(String partyId) {
		VendorInfoVo vendorInfoVo=vendorDao.getVendorInfo(partyId);
		try {
			//所属分类、
			Category category=shipmentClientBuilder.categoryResource().findById(vendorInfoVo.getCategory());
			if(null != category){
				vendorInfoVo.setCategoryName(category.getCategoryName());
			}
			//所属地区
			Category categoryRegion=shipmentClientBuilder.categoryResource().findById(vendorInfoVo.getRegion());
			if(null != category){
				vendorInfoVo.setRegionName(categoryRegion.getCategoryName());
			}
			
			//公司类型
			Category categoryGenre=shipmentClientBuilder.categoryResource().findById(vendorInfoVo.getGenre());
			if(null != category){
				vendorInfoVo.setRegionName(categoryGenre.getCategoryName());
			}
		} catch (Exception e) {
			logger.error("获取公司类型名称报错:{}",e);
		}
		// 供应商官网,公司法人,注册资金,注册地址,员工人数
		List<PartyAttribute> partyAttributelist = partyAttributeManager.getPartyAttributelist(partyId, null);
		if(CollectionUtils.isNotEmpty(partyAttributelist)){
			vendorInfoVo.setVendorInfoAttributeMap(getIdNameMap(partyAttributelist));
		}

		//需要 查询分管部门，负责人，询价员
		getPartyRelationshipInfo(vendorInfoVo,partyId);
		return vendorInfoVo;
	}
	
	/**
	 * 查询分管部门，负责人，询价员
	 * @param vendorInfoVo
	 * @param partyId
	 * @since 2017年8月16日
	 * @author zr.chenxuemin@yikuyi.com
	 */
	public void getPartyRelationshipInfo(VendorInfoVo vendorInfoVo,String partyId){
		//部门
		String deptId= partyCreditDao.getPartyIdTo(partyId,PartyRelationshipTypeEnum.VENDOR_DEPT_REL.name());
		if(StringUtils.isNotEmpty(deptId))
		{
			vendorInfoVo.setDeptId(deptId);
			DeptVo deptVo=partyGroupDao.findDeptInfo(deptId);
			if(null != deptVo){
				vendorInfoVo.setDeptName(deptVo.getName());
			}
		}
		
		//负责人
		String principalId= partyCreditDao.getPartyIdTo(partyId,PartyRelationshipTypeEnum.VENDOR_PRINCIPAL_REL.name());
		if(StringUtils.isNotEmpty(principalId)){
			vendorInfoVo.setPrincipalId(principalId);
			Party party=personDao.findPersonById(principalId);
			if(null != party){
				vendorInfoVo.setPrincipalName(party.getPerson().getLastNameLocal());
			}
		}
		
		//询价员
		String enquiryId= partyCreditDao.getPartyIdTo(partyId,PartyRelationshipTypeEnum.VENDOR_ENQUIRY_REL.name());
		if(StringUtils.isNotEmpty(enquiryId)){
			vendorInfoVo.setEnquiryId(enquiryId);
			Party party=personDao.findPersonById(enquiryId);
			if(null != party){
				vendorInfoVo.setEnquiryName(party.getPerson().getLastNameLocal());
			}
		}
	}
	
	/**
	 * 获取供应商信用
	 * @param partyId
	 * @return
	 * @since 2017年8月14日
	 * @author zr.chenxuemin@yikuyi.com
	 */
	public VendorCreditVo  getVendorCredit(String partyId){
		VendorCreditVo vendorCreditVo = new VendorCreditVo();

		PartyCredit partyCredit = partyCreditDao.getPartyCredit(partyId, null);
		if(partyCredit!=null){
			try {
				BeanUtils.copyProperties(vendorCreditVo, partyCredit);
				
			List<PartyAttachment>	partyCreditAttachmentList= partyAttributeDao.findAttrchmentList(partyId,"VENDOR_CREDIT");
			if(null != partyCreditAttachmentList && CollectionUtils.isNotEmpty(partyCreditAttachmentList)){
				vendorCreditVo.setCreditAttachmentList(partyCreditAttachmentList);
			}
			
			List<PartyBankAccount> partyBankAccountList= partyBankAccountDao.findPartyBankAccountList(partyId);
			if (null != partyBankAccountList && CollectionUtils.isNotEmpty(partyBankAccountList)) {
				vendorCreditVo.setPartyBankAccount(partyBankAccountList);
			}
			
			//采购协议,采购协议有效期,保密协议，保密协议有效期,
			List<PartyAttribute> partyAttributelist = partyAttributeManager.getPartyAttributelist(partyId, null);
			if(CollectionUtils.isNotEmpty(partyAttributelist)){
				vendorCreditVo.setCreditAttributeMap(getIdNameMap(partyAttributelist));
			}

			}  catch (Exception e) {
				logger.error("转换信用报错：{}",e);
			}
		}
		return vendorCreditVo;
	}
	
	/**
	 * 获取供应商信用
	 * @param partyId
	 * @return
	 * @since 2017年8月14日
	 * @author zr.chenxuemin@yikuyi.com
	 */
	public VendorSaleInfoVo getVendorSaleInfoVo(String partyId) {
		//供应商基本信息
		VendorSaleInfoVo vendorSaleInfoVo = vendorDao.getVendorSaleInfoVo(partyId);
		
		if(null ==vendorSaleInfoVo)
		{
			return new VendorSaleInfoVo();
		}
		// 获取供应商所有的产品线
		PartyProductLine partyProductLine= new PartyProductLine();
		partyProductLine.setPartyId(partyId);
		List<PartyProductLine> partyProductLineList =partyProductLineManager.findByEntity(partyProductLine);
		if(CollectionUtils.isNotEmpty(partyProductLineList))
		{
		vendorSaleInfoVo.setPartyProductLineList(partyProductLineList);
		}
		
		// 仓库
		List<Facility> facilities=facilityManager.getFacilityList(partyId);
		if(CollectionUtils.isNotEmpty(facilities))
		{
		 vendorSaleInfoVo.setFacilityList(facilities);
		}
		// 关注领域,优势产品类别,主要客户
		List<PartyAttribute> partyAttributelist = partyAttributeManager.getPartyAttributelist(partyId, null);
		if(CollectionUtils.isNotEmpty(partyAttributelist)){
			vendorSaleInfoVo.setSaleAttributeMap(getIdNameMap(partyAttributelist));
		}
		
		// 查找PARTY_RELATIONSHIP  供应商绑定的联系人
		List<ContactPersonInfo> contactPersonInfos =new ArrayList<>();
		List<PartyRelationship> findPartyRelationship = personDao.findPartyRelationship(partyId, PartyRelationshipTypeEnum.USER_DEPT_REL.name());
		if(null!=findPartyRelationship && CollectionUtils.isNotEmpty(findPartyRelationship)){			
			for(PartyRelationship p:findPartyRelationship){
				ContactPersonInfo vendorPerson = vendorDao.getVendorPersonList(p.getPartyIdFrom());
				if(null != vendorPerson){
					contactPersonInfos.add(vendorPerson);
				}				
			}
			
		}
	
		//供应商绑定的联系人对应的产品线
		if(CollectionUtils.isNotEmpty(contactPersonInfos))
		{
			//循环联系人
			for (ContactPersonInfo contactPersonInfo : contactPersonInfos) {
				List<PartyRelationship> partyRelationshipList1 = personDao.findProductLineByPartyId(contactPersonInfo.getPartyId(),PartyRelationshipTypeEnum.USER_PRODUCTLINE_REL.name());
			
				//如果联系人负责的产品线不为空则将产品线ID加入联系人信息中
				if(CollectionUtils.isNotEmpty(partyRelationshipList1)){
					List<String> partyProductLines= partyRelationshipList1.stream().map(PartyRelationship:: getPartyIdTo).collect(Collectors.toList());	
					contactPersonInfo.setPartyProductLineIdList(partyProductLines);
				}					
			}
		}
		vendorSaleInfoVo.setContactPersonInfoList(contactPersonInfos);
		return vendorSaleInfoVo;
	}
	
//	/**
//	 *  根据联系人查询供应商联系人产品线
//	 * @param partyProductLineList
//	 * @param partyProductLineId
//	 * @param partyId
//	 * @return
//	 * @since 2017年8月15日
//	 * @author zr.chenxuemin@yikuyi.com
//	 */
//	public List<String> partyProductLines(List<PartyProductLine> partyProductLineList,List<PartyRelationship> PartyRelationshipList1){
//		List<String> list=new ArrayList<>();
//			for (PartyProductLine partyProductLine2 : partyProductLineList) {
//				for (PartyRelationship partyRelationship : PartyRelationshipList1) {
//					//联系人的产品与 供应商的产品对比，如果拥有则设置为Y
//					if(partyProductLine2.getPartyProductLineId().equals(partyRelationship.getPartyIdTo()))
//					{
//						list.add(partyProductLine2.getPartyProductLineId());
//						continue;
//					}
//				}
//			}
//		
//		return list;
//	}
	
	public static Map<String, String> getIdNameMap(List<PartyAttribute> attribute) {
	    return attribute.stream().collect(Collectors.toMap(PartyAttribute::getKey, PartyAttribute::getValue));
	}
	
}