package com.yikuyi.party.vendorManage.bll;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.framework.springboot.model.LoginUser;
import com.framework.springboot.utils.AuthorizationUtil;
import com.framewrok.springboot.web.LoginUserInjectionInterceptor;
import com.github.pagehelper.PageInfo;
import com.github.springtestdbunit.TransactionDbUnitTestExecutionListener;
import com.yikuyi.party.credit.model.PartyAttachment;
import com.yikuyi.party.facility.model.Facility;
import com.yikuyi.party.vendor.vo.CheckStartOrLose;
import com.yikuyi.party.vendor.vo.CheckStartOrLose.StartOrLose;
import com.yikuyi.party.vendor.vo.ContactPersonInfo;
import com.yikuyi.party.vendor.vo.ContactPersonInfo.PersonalTitle;
import com.yikuyi.party.vendor.vo.PartyBankAccount;
import com.yikuyi.party.vendor.vo.PartyProductLine;
import com.yikuyi.party.vendor.vo.PartyProductLineVo;
import com.yikuyi.party.vendor.vo.Vendor;
import com.yikuyi.party.vendor.vo.Vendor.Currency;
import com.yikuyi.party.vendor.vo.VendorCreditVo;
import com.yikuyi.party.vendor.vo.VendorInfoVo;
import com.yikuyi.party.vendor.vo.VendorSaleInfoVo;
import com.yikuyi.workflow.Apply;
import com.yikuyi.workflow.WorkflowClientBuilder;
import com.ykyframework.exception.BusinessException;
import com.ykyframework.model.IdGen;

import net.sf.json.JSONObject;

@RunWith(SpringRunner.class)
@SpringBootTest
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class,
		TransactionDbUnitTestExecutionListener.class,MockitoTestExecutionListener.class })
@Transactional
@Rollback
public class VendorsManager2Test {
	
	@Autowired
	private VendorManage2 vendorsManager2;
	

	@SpyBean
	private AuthorizationUtil authorizationUtil;
	
	@SpyBean
	private WorkflowClientBuilder workflowClientBuilder;
	
	public VendorsManager2Test() {
		MockitoAnnotations.initMocks(this);
	}
	
	
	@Before
	public void init() {
		LoginUser loginUser = new LoginUser("9999999901", "admin", "9999999901", Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")));		
		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(new MockHttpServletRequest()));;
		RequestContextHolder.currentRequestAttributes().setAttribute(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser, RequestAttributes.SCOPE_REQUEST);
	}
		
	@Test
	public void parseProductsFileTest() {
		try {
			PageInfo<PartyProductLine> parseProductsFile = vendorsManager2.parseProductsFile(null, "//ictrade-private-hz-uat.oss-cn-hangzhou.aliyuncs.com/sit/vendor/product/201709/08/28e825fb657046161470748d66e09f23.xlsx");
			List<PartyProductLine> list = parseProductsFile.getList();
			Assert.assertTrue(list.size()>0);
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void addVendorFileTest() throws BusinessException {
		
		Vendor vendor =new Vendor();
		vendor.setDescribe("新建档案");
		
		// 供应商基础信息
		VendorInfoVo vendorInfoVo =new VendorInfoVo();
		// 产品线信息
		List<PartyProductLine> partyProductLineList = new ArrayList<>();
		// 供应商信用信息
		VendorCreditVo vendorCreditVo =new VendorCreditVo();
		// 供应商销售信息
		VendorSaleInfoVo vendorSaleInfoVo = new VendorSaleInfoVo();
		vendorInfoVo.setDescribe("我要新建文档");
		vendorInfoVo.setGroupNameFull("网易有限公司");
		vendorInfoVo.setGroupName("网易");
		vendorInfoVo.setPartyCode("10086");
		vendorInfoVo.setCategory("1");
		vendorInfoVo.setCategoryName("游戏");
		vendorInfoVo.setIsCore("Y");
		vendorInfoVo.setLogoImageUrl("//aa.img");
		vendorInfoVo.setWebsite("www.xyq163.com");
		vendorInfoVo.setRegion("CHAINA");
		vendorInfoVo.setRegionName("中国");
		vendorInfoVo.setGeneralHeadquarters("中国");
		vendorInfoVo.setGenre("001");
		vendorInfoVo.setGenreName("国有企业");
		vendorInfoVo.setListed("Y");
		vendorInfoVo.setStockCode("888888");
		vendorInfoVo.setLegalPerson("王磊");
		vendorInfoVo.setRegPrice("100000000");
		vendorInfoVo.setRegAddress("杭州");
		vendorInfoVo.setEmployeeNum("10000");
		vendorInfoVo.setDeptId("110");
		vendorInfoVo.setDeptName("业务拓展部");
		vendorInfoVo.setPrincipalId("999");
		vendorInfoVo.setPrincipalName("张三");
		vendorInfoVo.setEnquiryId("888");
		vendorInfoVo.setEnquiryName("李四");	
		
		Map<String, String> map = new HashMap<String, String>();
		map.put("VENDOR_INFO_LEGALPERSON","张三");
		map.put("VENDOR_INFO_REGPRICE","10000");
		map.put("VENDOR_INFO_REGRADDRESS","北京");
		map.put("VENDOR_INFO_EMPLOYEENUM","100000");
		map.put("VENDOR_INFO_WEBSITE","www.baidu.com");
		map.put("VENDOR_CREDIT_PURCHASEDEAL","ALREADY_SIGN");
		map.put("VENDOR_CREDIT_PURCHASEDEALDATE","2018-8-8");
		map.put("VENDOR_CREDIT_SECRECYPROTOCOL","ALREADY_SIGN");
		map.put("VENDOR_CREDIT_SECRECYPROTOCOLDATE","2018-8-8");
		map.put("VENDOR_SALE_INFOVO_FOCUSFIELDS","电压，电阻");
		map.put("VENDOR_SALE_INFOVO_PRODUCTCATEGORYS","价格优惠");
		map.put("VENDOR_SALE_INFOVO_MAJORCLIENTS","淘宝");
		
		PartyProductLine partyProductLine = new PartyProductLine();
		partyProductLine.setPartyProductLineId(String.valueOf(IdGen.getInstance().nextId()));
		partyProductLine.setBrandName("3M");
		partyProductLine.setBrandId("1");
		partyProductLine.setCategory1Name("无源器件");
		partyProductLine.setCategory1Id("1");
		partyProductLine.setCategory2Name("电阻");
		partyProductLine.setCategory2Id("2");
		partyProductLine.setCategory3Name("贴片电阻");
		partyProductLine.setCategory3Id("11");
		partyProductLineList.add(partyProductLine);
		
		
		List<PartyBankAccount> partyBankAccountList =new ArrayList<>();
		PartyBankAccount partyBankAccount2 = new PartyBankAccount();
		partyBankAccount2.setAccountName("中国银行");
		partyBankAccount2.setCurrency(Currency.CNY);
		partyBankAccount2.setBankAccount("123456789");
		partyBankAccount2.setBankName("王磊");
		partyBankAccount2.setTaxNumber("110");
		partyBankAccount2.setAddress("杭州分行");
		partyBankAccount2.setContactNumber("13888888888");
		partyBankAccount2.setIsDefault("Y");
		partyBankAccount2.setSwiftCode(null);
		partyBankAccountList.add(partyBankAccount2);
		
		List<PartyAttachment> creditAttachmentList = new ArrayList<>();
		PartyAttachment partyCreditAttachment = new PartyAttachment();
		partyCreditAttachment.setAttachmentName("账期");
		partyCreditAttachment.setAttachmentUrl("www.baidu.com");
		creditAttachmentList.add(partyCreditAttachment);

		vendorCreditVo.setPartyBankAccount(partyBankAccountList);
		vendorCreditVo.setPurchaseDeal("ALREADY_SIGN");
		vendorCreditVo.setPurchaseDealDate("2018-8-8");
		vendorCreditVo.setSecrecyProtocol("ALREADY_SIGN");
		vendorCreditVo.setSecrecyProtocolDate("2018-8-8");
		vendorCreditVo.setCurrency(Currency.CNY);
		vendorCreditVo.setCreditQuota(10000);
		vendorCreditVo.setRealtimeCreditQuota(0);
		vendorCreditVo.setCreditDeadline("30");
		vendorCreditVo.setCheckDate("30");
		vendorCreditVo.setPaymentTerms("月结");
		vendorCreditVo.setSettlementMethod("现金");
		vendorCreditVo.setPayDate("30");
		vendorCreditVo.setCommon(null);
		vendorCreditVo.setCreditAttachmentList(creditAttachmentList);
		
		List<Facility> facilityList = new ArrayList<>();
		Facility facility = new Facility();
		facility.setFacilityName("亚洲仓");
		facilityList.add(facility);
		
		List<ContactPersonInfo> contactPersonInfoList=new ArrayList<>();
		
		List<String> list = new ArrayList<>();	
		list.add("88888");
		list.add("99999");
		list.add("00000");
				
		ContactPersonInfo contactPersonInfo = new ContactPersonInfo();
		contactPersonInfo.setLastNameLocal("王磊");
		contactPersonInfo.setOccupation("猪席");
		contactPersonInfo.setPersonalTitle(PersonalTitle.ENQUIRY);
		contactPersonInfo.setMail("48484848@qq.com	");
		contactPersonInfo.setFixedtel("6339739");
		contactPersonInfo.setTel("13888888888");
		contactPersonInfo.setAddress("杭州");
		contactPersonInfo.setIsDefault("Y");
		contactPersonInfo.setPartyProductLineIdList(list);
		contactPersonInfoList.add(contactPersonInfo);
		
		vendorSaleInfoVo.setFacilityList(facilityList);
		vendorSaleInfoVo.setFocusFields("电阻,电容");
		vendorSaleInfoVo.setProductCategorys("电阻1,电容1");
		vendorSaleInfoVo.setMajorClients("中国,美国");
		vendorSaleInfoVo.setContactPersonInfoList(contactPersonInfoList);
		vendorSaleInfoVo.setOrderVerify("Y");
		vendorSaleInfoVo.setIsShowName("Y");
		vendorSaleInfoVo.setSupportCurrency("CNY");
		vendorSaleInfoVo.setMinOrderPriceCNY(new BigDecimal(60));
		vendorSaleInfoVo.setMinOrderPriceUSD(new BigDecimal(6));
				
		vendor.setVendorInfoVo(vendorInfoVo);
		vendor.setPartyProductLineList(partyProductLineList);
		vendor.setVendorCreditVo(vendorCreditVo);
		vendor.setVendorSaleInfoVo(vendorSaleInfoVo);
		vendor.setMap(map);		
		
		
						
			  String applyId=String.valueOf(IdGen.getInstance().nextId());
			  // 插入PARTY_RELATIONSHIP 供应商与审核的关系
			  
				Apply apply = new Apply();		
				JSONObject jsonObject = JSONObject.fromObject(vendor);  
				apply.setApplyId(applyId);
				apply.setApplyContent(jsonObject.toString());
				apply.setApplyUserId("111");
				apply.setProcessId("ORG_SUPPLIER_ARCHIVES_REVIEW");
				apply.setApplyOrgId("111");
				apply.setCompanyName(vendor.getVendorInfoVo().getGroupName());
				apply.setApplyPageUrl("");
				apply.setCallBackUrl("");
				apply.setReason(vendor.getDescribe());					
				
		vendorsManager2.addVendor(vendor);				
	}
	
	@Test
	public void updateVendorSaleInfoVoTest() throws BusinessException {
		
		// 供应商销售信息
		VendorSaleInfoVo vendorSaleInfoVo = new VendorSaleInfoVo();
		
		List<Facility> facilityList = new ArrayList<>();
		Facility facility = new Facility();
		facility.setFacilityName("亚洲仓");
		facilityList.add(facility);
		
		List<ContactPersonInfo> contactPersonInfoList=new ArrayList<>();
		
		List<String> list = new ArrayList<>();	
		list.add("88888");
		list.add("99999");
		list.add("11111");
				
		ContactPersonInfo contactPersonInfo = new ContactPersonInfo();
		contactPersonInfo.setPartyId("897660897214857216");
		contactPersonInfo.setLastNameLocal("王磊");
		contactPersonInfo.setOccupation("猪席");
		contactPersonInfo.setPersonalTitle(PersonalTitle.ENQUIRY);
		contactPersonInfo.setMail("48484848@qq.com	");
		contactPersonInfo.setFixedtel("6339739");
		contactPersonInfo.setTel("13888888888");
		contactPersonInfo.setAddress("杭州");
		contactPersonInfo.setIsDefault("Y");
		contactPersonInfo.setPartyProductLineIdList(list);
		contactPersonInfoList.add(contactPersonInfo);
		
		Map<String, String> map = new HashMap<>();
		map.put("VENDOR_SALE_INFOVO_FOCUSFIELDS", "电阻,电容");
		map.put("VENDOR_SALE_INFOVO_PRODUCTCATEGORYS", "电阻1,电容1");
		map.put("VENDOR_SALE_INFOVO_MAJORCLIENTS", "中国,美国");
		
		vendorSaleInfoVo.setPartyId("899517648864280576");
		vendorSaleInfoVo.setFacilityList(facilityList);
		vendorSaleInfoVo.setFocusFields("电阻,电容");
		vendorSaleInfoVo.setProductCategorys("电阻1,电容1");
		vendorSaleInfoVo.setMajorClients("中国,美国");
		vendorSaleInfoVo.setContactPersonInfoList(contactPersonInfoList);
		vendorSaleInfoVo.setOrderVerify("Y");
		vendorSaleInfoVo.setIsShowName("Y");
		vendorSaleInfoVo.setSupportCurrency("CNY");
		vendorSaleInfoVo.setSaleAttributeMap(map);
		vendorSaleInfoVo.setMinOrderPriceCNY(new BigDecimal(60));
		vendorSaleInfoVo.setMinOrderPriceUSD(new BigDecimal(6));
		
		vendorsManager2.updateVendorSaleInfoVo(vendorSaleInfoVo);			
		
	}
	
	@Test
	public void updateVendorCreditVoTest() throws BusinessException {
		// 供应商信用信息
	    VendorCreditVo vendorCreditVo =new VendorCreditVo();
	    
	    List<PartyBankAccount> partyBankAccountList =new ArrayList<>();
		PartyBankAccount partyBankAccount2 = new PartyBankAccount();
		partyBankAccount2.setAccountName("王磊");
		partyBankAccount2.setCurrency(Currency.CNY);
		partyBankAccount2.setBankAccount("123456789");
		partyBankAccount2.setBankName("中国银行");
		partyBankAccount2.setTaxNumber("110");
		partyBankAccount2.setAddress("杭州分行");
		partyBankAccount2.setContactNumber("13888888888");
		partyBankAccount2.setIsDefault("Y");
		partyBankAccount2.setSwiftCode(null);
		partyBankAccountList.add(partyBankAccount2);
		
		List<PartyAttachment> creditAttachmentList = new ArrayList<>();
		PartyAttachment partyCreditAttachment = new PartyAttachment();
		partyCreditAttachment.setAttachmentName("账期");
		partyCreditAttachment.setAttachmentUrl("www.baidu.com");
		creditAttachmentList.add(partyCreditAttachment);
		
		Map<String, String> map = new HashMap<>();
		map.put("VENDOR_CREDIT_PURCHASEDEAL", "ALREADY_SIGN");
		map.put("VENDOR_CREDIT_PURCHASEDEALDATE", "2018-8-8");
		map.put("VENDOR_CREDIT_SECRECYPROTOCOL", "ALREADY_SIGN");
		map.put("VENDOR_CREDIT_SECRECYPROTOCOLDATE", "2018-8-8");

		vendorCreditVo.setPartyBankAccount(partyBankAccountList);
		vendorCreditVo.setPartyId("899559114013671424");	
		vendorCreditVo.setPurchaseDeal("ALREADY_SIGN");
		vendorCreditVo.setPurchaseDealDate("2018-8-8");
		vendorCreditVo.setSecrecyProtocol("ALREADY_SIGN");
		vendorCreditVo.setSecrecyProtocolDate("2018-8-8");
		vendorCreditVo.setCurrency(Currency.CNY);
		vendorCreditVo.setCreditQuota(10000);
		vendorCreditVo.setRealtimeCreditQuota(0);
		vendorCreditVo.setCreditDeadline("30");
		vendorCreditVo.setCheckDate("30");
		vendorCreditVo.setPaymentTerms("月结");
		vendorCreditVo.setSettlementMethod("现金");
		vendorCreditVo.setPayDate("30");
		vendorCreditVo.setCreditAttributeMap(map);
		vendorCreditVo.setCommon(null);
		vendorCreditVo.setCreditAttachmentList(creditAttachmentList);
		
		vendorsManager2.updateVendorCreditVo(vendorCreditVo);			
		
	}
	
	@Test
	public void updatePartyProductLineTest() throws BusinessException {
		
		PartyProductLineVo p=new PartyProductLineVo();
			
		List<PartyProductLine> partyProductLineList =new ArrayList<>();
		PartyProductLine partyProductLine1 = new PartyProductLine();
		partyProductLine1.setPartyId("899845721178505216");
		partyProductLine1.setBrandName("6666");
		PartyProductLine partyProductLine2 = new PartyProductLine();
		partyProductLine2.setBrandName("6666");
		PartyProductLine partyProductLine3 = new PartyProductLine();
		partyProductLine3.setBrandName("7777");
		partyProductLineList.add(partyProductLine1);
		partyProductLineList.add(partyProductLine2);
		partyProductLineList.add(partyProductLine3);
		
		p.setPartyId("899845721178505216");
		p.setDescribe("产品线变更");
		p.setPartyProductLineList(partyProductLineList);
		
		try {
			vendorsManager2.updatePartyProductLine(p);
			
		} catch (Exception e) {
			e.printStackTrace();
		}			
		
	}
	
	@Test
	public void updateVendorInfoVoTest() throws BusinessException {
		// 供应商基础信息
		VendorInfoVo vendorInfoVo =new VendorInfoVo();
		
		Map<String, String> map = new HashMap<String, String>();
		map.put("VENDOR_INFO_LEGALPERSON","张三11");
		map.put("VENDOR_INFO_REGPRICE","1000011");
		map.put("VENDOR_INFO_REGRADDRESS","北京11");
		map.put("VENDOR_INFO_EMPLOYEENUM","10000011");
		map.put("VENDOR_INFO_WEBSITE","www.baidu11.com");
		
		vendorInfoVo.setPartyId("899559114013671424");
		vendorInfoVo.setGroupNameFull("网易有限公司11222");
		vendorInfoVo.setGroupName("网易11222");
		vendorInfoVo.setPartyCode("YKY2017");
		vendorInfoVo.setCategory("100003");
		vendorInfoVo.setCategoryName("游戏22");
		vendorInfoVo.setIsCore("Y");
		vendorInfoVo.setLogoImageUrl("//aaa.img");
		vendorInfoVo.setWebsite("www.baidu.com");
		vendorInfoVo.setRegion("CHAINA1");
		vendorInfoVo.setRegionName("中国");
		vendorInfoVo.setGeneralHeadquarters("中国1");
		vendorInfoVo.setGenre("008");
		vendorInfoVo.setGenreName("国有企业");
		vendorInfoVo.setListed("N");
		vendorInfoVo.setStockCode("888888112");
		vendorInfoVo.setLegalPerson("王磊");
		vendorInfoVo.setRegPrice("100000000");
		vendorInfoVo.setRegAddress("杭州");
		vendorInfoVo.setEmployeeNum("10000");
		vendorInfoVo.setDeptId("110112211");
		vendorInfoVo.setDeptName("业务拓展部");
		vendorInfoVo.setPrincipalId("99112211");
		vendorInfoVo.setPrincipalName("张三");
		vendorInfoVo.setEnquiryId("888112211");
		vendorInfoVo.setEnquiryName("李四");	
		vendorInfoVo.setVendorInfoAttributeMap(map);
		vendorInfoVo.setDescribe("基础信息更改");
		try {
			vendorsManager2.updateVendorInfoVo(vendorInfoVo);
		} catch (Exception e) {
			
		}						
	}
	
	@Test
	public void startOrLoseTest() throws BusinessException {
		
			try {
				CheckStartOrLose checkStartOrLose = new CheckStartOrLose();
				vendorsManager2.startOrLose("899559114013671424",StartOrLose.LOSE,"我要启动",checkStartOrLose);
			} catch (Exception e) {
			
			}
					
	}
}
