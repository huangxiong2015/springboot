package com.yikuyi.party.enterprise.bll;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.yikuyi.party.contact.model.ContactMech;
import com.yikuyi.party.contact.model.PostalAddress;
import com.yikuyi.party.contact.vo.EnterpriseParamVo;
import com.yikuyi.party.contact.vo.EnterpriseVo;
import com.yikuyi.party.contact.vo.UserExtendVo;
import com.yikuyi.party.group.model.PartyGroup.ActiveStatus;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.model.PartyContactMech;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyContactMech.PurposeType;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.shipAddress.bll.PartyContactMechManager;
import com.yikuyi.workflow.Apply;
import com.yikuyi.workflow.vo.ApplyVo;
import com.ykyframework.exception.SystemException;

@Service
@Transactional
public class EnterpriseSearchManager {
	private static final Logger logger = LoggerFactory.getLogger(EnterpriseSearchManager.class);
	
	@Autowired
	private PartyDao partyDao;
	
	@Autowired
	private PartyAttributeDao partyAttributeDao;
	
	@Autowired
	private PartyContactMechManager partyContactMechManager;
	
	// workflow 27090 前缀
	@Value("${api.workflow.serverUrlPrefix}")
	private String workflowUrlPrefix;
	
	@Autowired
	private RestTemplate restTemplate;
	
	private static final String ORG_DATA_REVIEW = "ORG_DATA_REVIEW";// 申请认证流程
	private static final String ORG_PROXY_REVIEW = "ORG_PROXY_REVIEW";
	@Autowired
	private PartyRelationshipDao relationshipDao;

	@Autowired
	private PartyGroupDao partyGroupDao;
	/**
	 * 获取公司信息详情
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public EnterpriseVo getPartyDetail(String id) throws SystemException {
		EnterpriseVo entVo = new EnterpriseVo();
		String userId = RequestHelper.getLoginUserId();
		if (!StringUtils.isEmpty(id)) {
			userId = id;
		}
		String partyId;// 企业的partyId
		Party p = partyDao.getPartyPersonDetail(userId);
		if (p != null && p.getCorporationId() != null) {
			partyId = p.getCorporationId();
		} else {
			return null;
		}
		return getPartyDetailByEntId(userId,partyId, entVo,PartyType.CORPORATION);
	}

	/**
	 * 根据企业ID获取企业相关信息
	 * 
	 * @param entId
	 * @param entVo
	 * @return
	 * @since 2017年2月16日
	 * @author gongtianyu@yikuyi.com
	 * @throws IOException
	 */
	public EnterpriseVo getPartyDetailByEntId(String entId, String corporationId, EnterpriseVo entVo,
			PartyType partyType) {
		Party party = partyDao.getPartyDetail(corporationId, partyType);// 获取状态，公司名，图片
		if (null != party) {
			entVo.setId(party.getId());
			if (null != party.getPartyGroup()) {
				entVo.setAccountStatus(party.getPartyGroup().getAccountStatus());// 账号状态主账号或子账号
				entVo.setActiveStatus(party.getPartyGroup().getActiveStatus());// 认证状态认证未认证
				entVo.setName(party.getPartyGroup().getGroupName());
				entVo.setLogo(party.getPartyGroup().getLogoImageUrl());
				entVo.setComments(party.getPartyGroup().getComments());
			}
			entVo.setPartyCode(party.getPartyCode());
			entVo.setPartyStatus(party.getPartyStatus());// 账号启用或停用
			
			List<PartyAttribute> attrList;
			// 公司属性
			attrList = partyAttributeDao.getPartAttribute(corporationId);
			if (null != attrList && CollectionUtils.isNotEmpty(attrList)) {
				Map<String, String> map = new HashMap<>();
				for(PartyAttribute attr:attrList){
				 map.put(attr.getKey(), attr.getValue());
			   }
				entVo.setMap(map);
			}

			// 调用服务获取企业联系信息
			List<PartyContactMech> partyContactMechList = partyContactMechManager
					.selectPartyContactMechByType(PurposeType.REGISTER_LOCATION, corporationId, null);
			if (null != partyContactMechList && !partyContactMechList.isEmpty()) {
				PartyContactMech partyContactMech = partyContactMechList.get(0);
				// 获取基本信息
				getContactMech(entVo, partyContactMech);
			}

			// 如果是不是审核状态企业三证从mongodb中获取数据
			if (!StringUtils.isEmpty(entVo.getActiveStatus()) && entVo.getActiveStatus() != ActiveStatus.PARTY_VERIFIED
					&& entVo.getActiveStatus() != ActiveStatus.PARTY_NOT_VERIFIED) {
				//查询认证流程数据
				getProcessData(entVo,corporationId,ORG_DATA_REVIEW);
				
			}
			// 如果是不是审核状态企业三证从mongodb中获取数据
				if (!StringUtils.isEmpty(entVo.getActiveStatus()) && entVo.getActiveStatus() != ActiveStatus.PARTY_VERIFIED
						&& entVo.getActiveStatus() != ActiveStatus.PARTY_NOT_VERIFIED) {
					//查询企业授权委托证流程数据
					getProcessData(entVo,corporationId,ORG_PROXY_REVIEW);
				}

		}
		return entVo;
	}

	public EnterpriseVo getProcessData(EnterpriseVo entVo,String corporationId,String type){
		String url = workflowUrlPrefix + "/v1/apply/PROCESS/"+type;
		ApplyVo applyVo = new ApplyVo();
		applyVo.setPage(1);
		applyVo.setPageSize(1);
		applyVo.setApplyOrgId(corporationId);
		HttpEntity<JSONObject> entity;
		try {
			entity = new HttpEntity<>(JSONObject.parseObject(new ObjectMapper().writeValueAsString(applyVo)));
		} catch (JsonProcessingException e) {
			throw new SystemException(e.getMessage(), e);
		}

		ParameterizedTypeReference<PageInfo<Apply>> responseEntity = new ParameterizedTypeReference<PageInfo<Apply>>() {
		};
		ResponseEntity<PageInfo<Apply>> response = restTemplate.exchange(url, HttpMethod.POST, entity,
				responseEntity);
		PageInfo<Apply> pageinfo = response.getBody();
		if (null == pageinfo || null == pageinfo.getList() || pageinfo.getList().isEmpty()) {
			return entVo;
		}
		Apply apply = pageinfo.getList().get(0);
		if (null == apply || StringUtils.isEmpty(apply.getApplyContent())) {
			return entVo;
		}

		String processId = apply.getProcessId();
		// 把jsonObject转化成对应的实体
		EnterpriseVo enterpriseVo = JSONObject.parseObject(apply.getApplyContent(), EnterpriseVo.class);
		if (processId.equals(ORG_DATA_REVIEW)) {
			Map<String,String> map = entVo.getMap();
			Map<String,String> newMap = new HashMap<>();
			//因为去除资质，重新添加
			for (Object map1 : map.entrySet()){  
					  if(((Map.Entry)map1).getKey().toString() .equals("INDUSTRY_CATEGORY_ID") || ((Map.Entry)map1).getKey().toString() .equals("INDUSTRY_CATEGORY_ID_OTHER")
							|| ((Map.Entry)map1).getKey().toString() .equals("WEBSITE_URL")|| ((Map.Entry)map1).getKey().toString() .equals("D_CODE")|| ((Map.Entry)map1).getKey().toString() .equals("CORPORATION_CATEGORY_ID")){
						  if(null !=((Map.Entry)map1).getValue()){
						  newMap.put(((Map.Entry)map1).getKey().toString(), ((Map.Entry)map1).getValue().toString());
						  }
					 }
				}
			
			Map<String,String> newMap1 = enterpriseVo.getMap();
			newMap.putAll(newMap1);
			entVo.setMap(newMap);
			//流程id
			entVo.setApplyId(apply.getApplyId());
			//用来判断是从会员中心来的还是从operation来的
			entVo.setIsVipCenter(enterpriseVo.getIsVipCenter());
		}else if(processId.equals(ORG_PROXY_REVIEW)){
		     //将老的LOa移除掉，重新封装
			Map<String,String> map = entVo.getMap();
			Map<String,String> newMap1 = enterpriseVo.getMap();
			Iterator iterator = map.keySet().iterator();    
			while (iterator.hasNext()) {   
			    String key = (String) iterator.next();   
			    if ("LOA".equals(key) || "LOA_PDF_NAME".equals(key)) {   
			       map.remove(key);   
			    }   
			 }  
			map.putAll(newMap1);
			entVo.setMap(map);
			//流程id
			entVo.setApplyId(apply.getApplyId());
			//用来判断是从会员中心来的还是从operation来的
			entVo.setIsVipCenter(enterpriseVo.getIsVipCenter());
		}
		return entVo;
	}
	/**
	 * 获取公司信息抽取方法
	 * 
	 * @param id
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void getContactMech(EnterpriseVo entVo, PartyContactMech partyContactMech) {
		if (null != partyContactMech) {
			ContactMech contactMech = partyContactMech.getContactMech();
			if (null != contactMech.getId()) {
				// 地址信息
				PostalAddress postalAddress = contactMech.getPostalAddress();
				if (null != postalAddress) {
					entVo.setAddress(postalAddress.getAddress1());
					entVo.setProvince(postalAddress.getProvinceGeoId());
					entVo.setProvinceName(postalAddress.getProvinceGeoName());
					entVo.setCity(postalAddress.getCityGeoId());
					entVo.setCityName(postalAddress.getCityGeoName());
					entVo.setCountry(postalAddress.getCountyGeoId());
					entVo.setCountryName(postalAddress.getCountyGeoName());
				}
			}
		}
	}

	/**
	 * 获取后台认证企业列表
	 * 
	 * @param param
	 * @param rowBounds
	 * @return
	 * @since 2017年5月5日
	 * @author zr.helinmei@yikuyi.com
	 */
	public PageInfo<EnterpriseVo> entCertificationList(EnterpriseParamVo param, RowBounds rowBounds) {
		return new PageInfo<>(partyDao.entCertificationList(param, rowBounds));
	}
	
	/**
	 * 获取后台企业账户审核列表
	 * 
	 * @param param
	 * @param rowBounds
	 * @return
	 * @since 2017年5月5日
	 * @author zr.helinmei@yikuyi.com
	 */
	public PageInfo<EnterpriseVo> getAccountApplyList(EnterpriseParamVo param, RowBounds rowBounds) {
		return new PageInfo<>(partyDao.getAccountApplyList(param, rowBounds));
	}

	
	/**
	 * 查询认证企业的授权委托书授权状态
	 * 
	 * @param param
	 * @param rowBounds
	 * @return
	 * @since 2017年5月5日
	 * @author zr.helinmei@yikuyi.com
	 */
	public String getAccountStatus(String id){
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(id);//生成新的企业id
		relationShip.setRoleTypeIdFrom(RoleType.ENTERPRISE_CUST);
		relationShip.setRoleTypeIdTo(RoleType.VIP_ENTERPRISE);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
		List<PartyRelationship>  relationList= relationshipDao.getPartyRelationship(relationShip);
		PartyRelationship partyRelationship;
		if(CollectionUtils.isNotEmpty(relationList)){
			partyRelationship = relationList.get(0);
			//企业id
			String entId = partyRelationship.getPartyIdTo();
			
			if(StringUtils.isEmpty(entId)){
				return null;
			}
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if(null != party && null != party.getPartyGroup() && null != party.getPartyGroup().getAccountStatus()){
				return party.getPartyGroup().getAccountStatus().toString();
			}
		}
		return null;
	}
	/**
	 * 根据企业账号获取子账号信息
	 * 
	 * @param entId
	 * @return
	 * @since 2017年5月13日
	 * @author zr.helinmei@yikuyi.com
	 */
	public List<UserExtendVo> getEnterpriseAccountsList(String entId) {
		//先查询认证企业的原企业id
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdTo(entId);//生成新的企业id
		relationShip.setRoleTypeIdFrom(RoleType.ENTERPRISE_CUST);
		relationShip.setRoleTypeIdTo(RoleType.VIP_ENTERPRISE);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
		List<PartyRelationship>  relationList= relationshipDao.getPartyRelationship(relationShip);
		PartyRelationship partyRelationship;
		if(!CollectionUtils.isNotEmpty(relationList)){
			return null;
		}
		partyRelationship = relationList.get(0);
		if(null == partyRelationship){
			return null;
		}
		String id =partyRelationship.getPartyIdFrom();
		List<UserExtendVo> list = partyDao.getEnterpriseAccountsList(id);
		if (!CollectionUtils.isEmpty(list)) {
			List<UserExtendVo> result = new ArrayList<>();
			UserExtendVo v = list.get(0);
			result.add(v);
			for (int i = 1; i < list.size(); i++) {
				if (!v.getId().equals(list.get(i).getId())) {
					result.add(list.get(i));
				}
			}
			return result;
		}
		return Collections.emptyList();
	}

}
	 
	

