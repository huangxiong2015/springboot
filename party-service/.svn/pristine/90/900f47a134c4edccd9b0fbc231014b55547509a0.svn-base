package com.yikuyi.party.customer.bll;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Service;
import org.springframework.util.Base64Utils;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSONObject;
import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.RequestHelper;
import com.yikuyi.message.mail.vo.MailInfoVo;
import com.yikuyi.message.sms.vo.MailAddressValidVO;
import com.yikuyi.party.common.utils.Constants;
import com.yikuyi.party.contact.vo.MsgResultVo;
import com.yikuyi.party.contact.vo.UserExtendVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.enterprise.bll.EnterpriseManager;
import com.yikuyi.party.group.model.PartyGroup;
import com.yikuyi.party.login.model.UserLogin;
import com.yikuyi.party.login.model.UserLogin.PwdStrength;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.person.model.Person;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.userLogin.dao.UserLoginDao;
import com.ykyframework.mqservice.sender.MsgSender;

@Service
public class CustomerSummeryManager {
	
	private static final Logger logger = LoggerFactory.getLogger(CustomerSummeryManager.class);
	
	@Autowired
	private UserLoginDao userLoginDao;
	
	@Autowired
	private PartyGroupDao partyGroupDao;
	
	@Autowired
	private PartyRoleDao partyRoleDao;
	
	@Autowired
	private EnterpriseManager enterpriseManager;
	
	@Autowired
	private MsgSender msgSender;
	
	// 手机、邮箱验证码服务地址
	@Value("${api.message.serverUrlPrefix}")
	private String messageServerUrl;
	
	@Value("${customer.serverUrlPrefix}")
	private String customerUrl;
	
	@Value("${mqConsumeConfig.sendMsgAndEmail.topicName}")
	private String sendMsgAndEmailTopicName;
	
	@Autowired
//	@Qualifier(value="restTemplate")
	private RestTemplate restTemplate;
	
	//密码做正则验证符合的数量
	private static final int WEAK=1;
	private static final int MDAIAM=2;
	private static final int HIGH=3;
	//倍数
	private static final int MULTIPLE = 20;
	
	private static final int DEFAULT_SCORE = 40;
	
	//定义用户角色
	private static final RoleType CUSTOMER = RoleType.CUSTOMER;//个人用户
	
	/**
	 * 邮件模板类型
	 */
	private static final String TEMPLATEID = "RESET_PASSWORD";
	
	/**
	 * 类型（邮件：email或站内信：msg）
	 */
	private static final String MAIL_TYPE = "EMAIL";
	
	/**
	 * 邮箱验证码校验地址
	 */
	private static final String VAILD_MAIL_URL = "/getpwd.htm?action=mailvalid&sid=";
	
	
	
	
	/**
	 * 获取用户基本信息
	 * @param partyId
	 * @return
	 * @since 2017年2月6日
	 * @author tb.yumu@yikuyi.com
	 * @throws IOException 
	 */
	public UserExtendVo getUserSummeryInfo(String loginId , String partyId){
		UserLogin userLogin = userLoginDao.getUserSummeryInfo(loginId);
		if (userLogin!=null) {
			UserExtendVo vo = new UserExtendVo();
			List<RoleType> roleTypes = userLogin.getParty()==null?null:userLogin.getParty().getRoleTypeList();
			RoleType type = this.checkRoleType(roleTypes);
			vo.setAccounttype(type==null?null:type.toString());
			Party party = userLogin.getParty();
			if (type==CUSTOMER) {
				vo.setMobile(userLogin.getId());
				Person person =null;
				if (party != null) {
					person = party.getPerson();
				}
				if (person!=null) {
					vo.setName(person.getLastName());
				}
			}else {
				vo.setMail(userLogin.getId());
				try {
					String name = enterpriseManager.getPartyDetail(userLogin.getParty().getId()).getName();
					vo.setCompanyName(name);
				} catch (Exception e) {
					logger.error("获取公司名字异常：{}",e);
				}
			}
			if (party != null) {
				vo.setPartyId(party.getId());
				vo.setStatus(userLogin.getParty().getPartyStatus());
				Person person = party.getPerson();
				vo.setLogoUrl(person==null?null:person.getLogoImageUrl());
			}
			vo.setScore(this.calcScore(userLogin.getPwdStrength()));
			vo.setStrongPwd(userLogin.getPwdStrength()==null?null:userLogin.getPwdStrength().toString());
			vo.setLastLoginTime(userLogin.getLastUpdateDate());
			return vo;
		}
		return null;
	}
	
	/**
	 * 根据partyid获取公司名字
	 * @param partyId
	 * @return
	 * @since 2017年2月6日
	 * @author tb.yumu@yikuyi.com
	 */
	public String getCompanyNameByPartyId(String partyId){
		Party party = partyGroupDao.findPartyGroupByPartyId(partyId);
		return null == party ? null : party.getPartyGroup().getGroupName();
	}
	
	/**
	 * 查找出权限中的
	 * @param roleTypes
	 * @return
	 * @since 2017年1月19日
	 * @author tb.yumu@yikuyi.com
	 */	
	public RoleType checkRoleType(List<RoleType> roleTypes){
		RoleType type = null;
		if (CollectionUtils.isNotEmpty(roleTypes)) {
			for (RoleType roleType : roleTypes) {
				if (roleType==CUSTOMER || roleType==RoleType.MAIN_ROLE) {
					type = roleType;
					break;
				}
			}
		}
		return type;
	}
	
	public Integer calcScore(PwdStrength pwdStrength){
		int score = DEFAULT_SCORE;
		if (pwdStrength==PwdStrength.WEAK) {
			score = score + (MULTIPLE*WEAK);
		}else if (pwdStrength==PwdStrength.MDAIAM) {
			score = score + (MULTIPLE*MDAIAM);
		}else if (pwdStrength==PwdStrength.HIGH) {
			score = score + (MULTIPLE*HIGH);
		}
		return score;
	}
	/**
	 * 账户安全 - 修改密码服务
	 * @param loginId
	 * @param userVo
	 * @return
	 * @since 2017年1月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo changePassword(String partyId,UserVo userVo){
		
		MsgResultVo vo = new MsgResultVo();
		//原密码为空直接返回失败
		if (StringUtils.isEmpty(userVo.getPassword().trim())){
			vo.setCode(Constants.FAILED);
			return vo;
		}
		//校验原密码是否正确
		MsgResultVo checkMsgVo = this.checkedOldPassword(partyId, userVo.getPassword());
		if (checkMsgVo.getCode().equals(Constants.SUCCESS)) {
			vo = this.changePasswordByLoginId(partyId, userVo);
		}else {
			vo.setCode(Constants.FAILED);
		}
		return vo;
	}
	
	/**
	 * 找回密码
	 * @param loginId
	 * @param userVo
	 * @return
	 * @since 2017年1月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo findPassword(String loginId , UserVo userVo){
		MsgResultVo vo = new MsgResultVo();
		if (StringUtils.isEmpty(loginId.trim())) {
			vo.setCode(Constants.FAILED);
			return vo;
		}
		String loginName = new String(Base64Utils.decodeFromString(loginId));//解密
		UserLogin userLogin = userLoginDao.findEntityById(loginName);//根据账户查询用户partyid
		vo = this.changePasswordByLoginId(userLogin.getParty().getId(), userVo);
		return vo;
	}
	
	/**
	 * 校验用户输入密码与原密码是否一致
	 * @param loginName
	 * @param password
	 * @return
	 * @since 2017年1月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo checkedOldPassword(String partyId,String password){
		List<UserLogin> findUserLogins = userLoginDao.findUserPassword(partyId);
		MsgResultVo vo = new MsgResultVo();
		if (findUserLogins==null) {
			vo.setCode(Constants.FAILED);
			return vo;
		}
		String findpassword = findUserLogins.get(0).getBcryptPassword();
	 	boolean flag = BCrypt.checkpw(password, findpassword);
		if (flag) {
			vo.setCode(Constants.SUCCESS);
		}else {
			vo.setCode(Constants.FAILED);
		}
		return vo;
	} 
	
	/**
	 * 根据账户修改密码
	 * @param loginId
	 * @param userVo
	 * @return
	 * @since 2017年1月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo changePasswordByLoginId(String partyId,UserVo userVo){
		
		MsgResultVo vo = new MsgResultVo();
		//为空直接返回失败
		if (StringUtils.isEmpty(userVo.getNewPassword().trim())) {
			vo.setCode(Constants.FAILED);
			return vo;
		}
		UserLogin login = new UserLogin();
		login.setCurrentPassword(userVo.getNewPassword());
		PwdStrength pwdStrength = this.checkedPwdStrong(userVo.getNewPassword());
		Integer num = userLoginDao.changePasswordByLoginId(login.getCurrentPassword(), pwdStrength.toString(), partyId);
		if (num>0) {
			vo.setCode(Constants.SUCCESS);
		}else {
			vo.setCode(Constants.FAILED);
		}
		return vo;
	}
	
	/**
	 * 发送邮件
	 * @param mailAddr
	 * @return
	 * @since 2017年2月8日
	 * @author tb.yumu@yikuyi.com
	 */
	public void sendMail(String mailAddr){
		String mail = new String(Base64Utils.decodeFromString(mailAddr));//base64解密邮件地址
		String mailValidCode = this.getMailCode(mail);//获取验证码
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String sendDate = format.format(new Date());
		//参数顺序:1 邮箱地址，  2邮箱验证码    3发送时间		
		String url =  Base64Utils.encodeToString((mail+"_"+mailValidCode+"_"+sendDate).getBytes());
		MailInfoVo vo = new MailInfoVo();
		vo.setTemplateId(TEMPLATEID);
		vo.setType(MAIL_TYPE);
		vo.setTo(mail);
		JSONObject content = new JSONObject();
		content.put("url", customerUrl+VAILD_MAIL_URL+url);//项目前缀+链接地址+参数
		vo.setContent(content);
		msgSender.sendMsg(sendMsgAndEmailTopicName, vo, null);
	}
	
	/**
	 * 获取邮箱验证码
	 * @param mail
	 * @return
	 * @since 2017年2月8日
	 * @author tb.yumu@yikuyi.com
	 */
	public String getMailCode(String mail){
		String url = messageServerUrl +"/v1/mail/verifyCode";
		MailAddressValidVO vo = new MailAddressValidVO();
		String uuid = UUID.randomUUID().toString();
		vo.setMailAddress(mail);
		vo.setUuid(uuid);
		String code = "";
		try {
			HttpEntity<MailAddressValidVO> entity = new HttpEntity<>(vo);
			ResponseEntity<String> response = restTemplate.exchange(url,HttpMethod.POST, entity, new ParameterizedTypeReference<String>(){});
			code = response.getBody();
		} catch (Exception e) {
			logger.error("调用发送邮箱验证码服务错误：{},服务地址为：{}",e,url);
		}
		return code;
	}
	
	
	public UserExtendVo getUserLoginInfo(LoginUser user){
		if (user == null) {
			return null;
		}
		UserExtendVo userExtendVo = new UserExtendVo();
		Integer userType = partyRoleDao.findRoleByIdCount(user.getId());
		userExtendVo.setUserType(userType);
		if (userType==0) {
			userExtendVo.setAccounttype("MAIN_ROLE");
			userExtendVo.setMail(RequestHelper.getLoginUser().getUsername());
			Party party = partyGroupDao.getGroupNameByUserPartyId(user.getId());
			PartyGroup partyGroup = null;
			if (party != null) {
				partyGroup = party.getPartyGroup();
			}
			//设置公司名字
			if (partyGroup != null) {
				userExtendVo.setCompanyName(partyGroup.getGroupName());
			}
		}else if(userType==1){
			userExtendVo.setAccounttype("CUSTOMER");
			userExtendVo.setMobile(RequestHelper.getLoginUser().getUsername());
		}		
		return userExtendVo;
	}
	
	/**
	 * 计算密码强度
	 * @param userPwd
	 * @return
	 * @since 2017年1月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public PwdStrength checkedPwdStrong(String userPwd){
		//定义初始强度
		PwdStrength pwdStrength = PwdStrength.HIGH;
		
		//进行正则验证
		String numRegEx = "([0-9])";//数字验证规则
		String bigRegEx = "([A-Z])";//大写验证规则
		String smallRegEx = "([a-z])";//小写验证规则
		String specialRegEx="([`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？])"; //特殊字符的验证规则
		Pattern pattern1 = Pattern.compile(numRegEx);
		Matcher numFlag = pattern1.matcher(userPwd);
		Pattern pattern2 = Pattern.compile(bigRegEx);
		Matcher bigFlag = pattern2.matcher(userPwd);
		Pattern pattern3 = Pattern.compile(smallRegEx);
		Matcher smallFlag = pattern3.matcher(userPwd);
		Pattern pattern4 = Pattern.compile(specialRegEx);
		Matcher specialFlag = pattern4.matcher(userPwd);
		boolean[] array = {numFlag.find(),bigFlag.find(),smallFlag.find(),specialFlag.find()};
		int result = 0;
		for (boolean b : array) {
			if (b) {
				result++;
			}
		}
		//强度计算
		switch (result) {
		case WEAK:
			pwdStrength = PwdStrength.WEAK;
			break;
		case MDAIAM:
			pwdStrength = PwdStrength.MDAIAM;
			break;
		case HIGH:
			pwdStrength = PwdStrength.HIGH;
			break;
		default:
			break;
		}
		return pwdStrength;
	}
	
	/**
	 * 隐藏邮箱
	 * @param mail
	 * @return
	 * @since 2017年1月19日
	 * @author tb.yumu@yikuyi.com
	 */
	public String hideMail(String mail){
		if (!StringUtils.isEmpty(mail)) {
			if (checkEmail(mail)) {
				String[] mailArray = mail.split("@");
				int length = mailArray[0].length();
				return mailArray[0].substring(0, 2)+"****"+mailArray[0].substring(length-1, length)+"@"+mailArray[1];
			}else {
				return hidePhone(mail);
			}
		}
		return null;
	}

	/**
	 * 隐藏手机号
	 * @param mobile
	 * @return
	 * @since 2017年1月19日
	 * @author tb.yumu@yikuyi.com
	 */
	public String hidePhone(String mobile){
		if (!StringUtils.isEmpty(mobile)) {
			int length = mobile.length();
			return mobile.substring(0,3)+"****"+mobile.substring(length-4,length);
		}
		return null;
	}	
	
	/**
	 * 正则验证邮箱
	 * @param email
	 * @return
	 * @since 2017年2月8日
	 * @author tb.yumu@yikuyi.com
	 */
	 public boolean checkEmail(String email){
	    boolean flag = false;
	    try{
	        String check = "^([a-z0-9A-Z]+[-|_|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
	        Pattern regex = Pattern.compile(check);
	        Matcher matcher = regex.matcher(email);
	        flag = matcher.matches();
	    }catch(Exception e){
	    	logger.error(e.getMessage(),e);
	        flag = false;
	    }
        return flag;
	 }
}