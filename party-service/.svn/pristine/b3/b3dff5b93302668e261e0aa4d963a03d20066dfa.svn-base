package com.yikuyi.party.enterprise.bll;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.framewrok.springboot.web.RequestHelper;
import com.yikuyi.party.contact.vo.EnterpriseCertificatesVo;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.ykyframework.model.IdGen;
@Service
@Transactional
public class EnterpriseCertManager {
	@Autowired
	private PartyAttributeDao partyAttributeDao;
	private static final String COMMON = "COMMON";
	private static final String BUSI_LIC_PIC = "BUSI_LIC_PIC";
	private static final String SOCIAL_CODE = "SOCIAL_CODE";
	private static final String ENT_NAME = "ENT_NAME";
	private static final String LOCATION = "LOCATION";
	private static final String BUSI_RANGE = "BUSI_RANGE";
	private static final String TAX_REG_PIC = "TAX_REG_PIC";
	private static final String FAX_CODE = "FAX_CODE";
	private static final String FAX_NAME = "FAX_NAME";
	private static final String ORG_CODE = "ORG_CODE";
	private static final String ORG_NAME = "ORG_NAME";
	private static final String ORG_LOCATION = "ORG_LOCATION";
	private static final String ORG_CDATE = "ORG_CDATE";
	private static final String ORG_LIMIT = "ORG_LIMIT";
	private static final String HK_ENT_NAME = "HK_ENT_NAME";
	private static final String HK_SIGN_CDATE = "HK_SIGN_CDATE";
	private static final String HK_BUSI_NAME = "HK_BUSI_NAME";
	private static final String HK_ADDR = "HK_ADDR";
	private static final String HK_EFFECTIVE_DATE = "HK_EFFECTIVE_DATE";
	private static final String LOA = "LOA";
	private static final String OCC_PIC = "OCC_PIC";
	private static final String REGISTE_ADDR = "0";
	private static final String LOA_PDF_NAME = "LOA_PDF_NAME";//执照类型
	
	private static final String BUSI_PDF_NAME = "BUSI_PDF_NAME";//营业执照pdf名字
	private static final String TAX_PDF_NAME = "TAX_PDF_NAME";//税务登记pdf名字
	private static final String OCC_PDF_NAME = "OCC_PDF_NAME";//组织机构pdf名字
	/**
	 * 审核成功的账户保存
	 * 
	 * @param enterpriseVo，id为企业id,applyId申请的会员id,
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void saveCertificate(EnterpriseCertificatesVo entVo) {
		//如果attrId不为空位修改，否则新增
		if(!StringUtils.isEmpty(entVo.getAttrId())){
			updateCertificate(entVo);
		}else{
			insertCertified(entVo);
		}
	}
	/**
	 * 审核成功的账户保存
	 * 
	 * @param enterpriseVo，id为企业id,applyId申请的会员id,
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void insertCertified(EnterpriseCertificatesVo entVo){
		String partyId = entVo.getId();
		String registeAddr = entVo.getRegisteAddr();//注册地址0大陆1香港
		String busiLisType = entVo.getBusiLisType();//资质类型（普通营业执照：COMMON，企业三证合一：3-TO-1，香港：HK-CODE）busiLisType
		
		// 公司资质营业执照
		Party party = new Party();
		//注册地址0大陆1香港
		if(registeAddr.equals(REGISTE_ADDR)){
			//普通营业执照：COMMON，企业三证合一：3-TO-1
			if(busiLisType.equals(COMMON)){
				//通过partyId和营业执照key找到唯一的attr_Id
				String busiLicAttrId = getAttrId(partyId,BUSI_LIC_PIC);
				if(null != busiLicAttrId){
					party.setId(busiLicAttrId);
				}
				PartyAttributes picBusLicAttrs = new PartyAttributes();
				List<PartyAttribute> corporationBusLicDataInfo = new ArrayList<>();
				//营业执照影印件，(统一社会信用代码,企业名称（全称）,住所,经营范围)
				//统一社会信用代码
				String attrIdSocial = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdSocial,corporationBusLicDataInfo,SOCIAL_CODE,entVo.getSocialCode());
				//企业名称（全称）
				String attrIdEntName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdEntName,corporationBusLicDataInfo,ENT_NAME,entVo.getEntName());
				//住所
				String attrIdLocation = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdLocation,corporationBusLicDataInfo,LOCATION,entVo.getLocation());
				//经营范围
				String attrIdBusiRange = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdBusiRange,corporationBusLicDataInfo,BUSI_RANGE,entVo.getBusiRange());
				// 把值插入到资质图片列表中
				picBusLicAttrs.setCorporationBusLicDataInfo(corporationBusLicDataInfo);
				party.setPartyAttributes(picBusLicAttrs);
				String userId = RequestHelper.getLoginUserId();
				party.setCreator(userId);
				party.setCreatedDate(new Date());
				partyAttributeDao.insertCorporationBusLicData(party);
				
				
				//税务登记证影印件(纳税人识别号,纳税人名称)TAX_REG_PIC
				PartyAttributes picFaxAttrs = new PartyAttributes();
				Party partyFax = new Party();
				String faxAttrId = getAttrId(partyId,TAX_REG_PIC);
				if(null != faxAttrId){
					partyFax.setId(faxAttrId);
				}
				List<PartyAttribute> corporationFaxDataInfo = new ArrayList<>();
				//纳税人识别号
				String attrIdFaxCode = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdFaxCode,corporationFaxDataInfo,FAX_CODE,entVo.getFaxCode());
				//纳税人名称
				String attrIdFaxName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdFaxName,corporationFaxDataInfo,FAX_NAME,entVo.getFaxName());
				// 把值插入到资质图片列表中
				picFaxAttrs.setCorporationFaxDataInfo(corporationFaxDataInfo);
				partyFax.setPartyAttributes(picFaxAttrs);
				partyFax.setCreator(userId);
				partyFax.setCreatedDate(new Date());
				partyAttributeDao.insertCorporationFaxData(partyFax);
				
				//组织机构代码影印件(机构代码,机构名称,机构地址,成立日期,营业期限)OCC_PIC
				
				PartyAttributes picOrgAttrs = new PartyAttributes();
				Party partyOrg = new Party();
				String orgAttrId = getAttrId(partyId,OCC_PIC);
				if(null != orgAttrId){
					partyOrg.setId(orgAttrId);
				}
				List<PartyAttribute> corporationOrgDataInfo = new ArrayList<>();
				//机构代码
				String attrIdOrgCode = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgCode,corporationOrgDataInfo,ORG_CODE,entVo.getOrgCode());
				//机构名称
				String attrIdOrgName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgName,corporationOrgDataInfo,ORG_NAME,entVo.getOrgName());
				//机构地址
				String attrIdOrgLocation = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgLocation,corporationOrgDataInfo,ORG_LOCATION,entVo.getOrgLocation());
				//成立日期
				String attrIdOrgCdate = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgCdate,corporationOrgDataInfo,ORG_CDATE,entVo.getOrgCdate());
				//营业期限
				String attrIdOrgLimit = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgLimit,corporationOrgDataInfo,ORG_LIMIT,entVo.getOrgLimit());
				// 把值插入到资质图片列表中
				picOrgAttrs.setCorporationOrgDataInfo(corporationOrgDataInfo);
				partyOrg.setPartyAttributes(picOrgAttrs);
				partyOrg.setCreator(userId);
				partyOrg.setCreatedDate(new Date());
				partyAttributeDao.insertCorporationOrgData(partyOrg);
			}else{
				//通过partyId和营业执照key找到唯一的attr_Id
				String busiLicAttrId = getAttrId(partyId,BUSI_LIC_PIC);
				if(null != busiLicAttrId){
					party.setId(busiLicAttrId);
				}
				PartyAttributes picBusLicAttrs = new PartyAttributes();
				List<PartyAttribute> corporationBusLicDataInfo = new ArrayList<>();
				//营业执照影印件，(统一社会信用代码,企业名称（全称）,住所,经营范围)
				//统一社会信用代码
				String attrIdSocial = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdSocial,corporationBusLicDataInfo,SOCIAL_CODE,entVo.getSocialCode());
				//企业名称（全称）
				String attrIdEntName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdEntName,corporationBusLicDataInfo,ENT_NAME,entVo.getEntName());
				//住所
				String attrIdLocation = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdLocation,corporationBusLicDataInfo,LOCATION,entVo.getLocation());
				//经营范围
				String attrIdBusiRange = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdBusiRange,corporationBusLicDataInfo,BUSI_RANGE,entVo.getBusiRange());
				
				//纳税人识别号
				String attrIdFaxCode = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdFaxCode,corporationBusLicDataInfo,FAX_CODE,entVo.getFaxCode());
				//纳税人名称
				String attrIdFaxName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdFaxName,corporationBusLicDataInfo,FAX_NAME,entVo.getFaxName());
				
				//机构代码
				String attrIdOrgCode = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgCode,corporationBusLicDataInfo,ORG_CODE,entVo.getOrgCode());
				//机构名称
				String attrIdOrgName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgName,corporationBusLicDataInfo,ORG_NAME,entVo.getOrgName());
				//机构地址
				String attrIdOrgLocation = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgLocation,corporationBusLicDataInfo,ORG_LOCATION,entVo.getOrgLocation());
				//成立日期
				String attrIdCdate = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdCdate,corporationBusLicDataInfo,ORG_CDATE,entVo.getOrgCdate());
				//营业期限
				String attrIdOrgLimit = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
				setAttribute(attrIdOrgLimit,corporationBusLicDataInfo,ORG_LIMIT,entVo.getOrgLimit());
				
				// 把值插入到资质图片列表中
				picBusLicAttrs.setCorporationBusLicDataInfo(corporationBusLicDataInfo);
				party.setPartyAttributes(picBusLicAttrs);
				String userId = RequestHelper.getLoginUserId();
				party.setCreator(userId);
				party.setCreatedDate(new Date());
				partyAttributeDao.insertCorporationBusLicData(party);
				
			}
		}else{
			//香港
			//通过partyId和营业执照key找到唯一的attr_Id
			//注册证书（CR）跟大陆的营业执照key一样
			String busiLicAttrId = getAttrId(partyId,BUSI_LIC_PIC);
			if(null != busiLicAttrId){
				party.setId(busiLicAttrId);
			}
			PartyAttributes picBusLicAttrs = new PartyAttributes();
			List<PartyAttribute> corporationBusLicDataInfo = new ArrayList<>();
			//营业执照影印件，(公司名称，签发日期)
			//公司名称
			String attrIdEntName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
			setAttribute(attrIdEntName,corporationBusLicDataInfo,HK_ENT_NAME,entVo.getEntName());
			//签发日期
			String attrIdSignCdate = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
			setAttribute(attrIdSignCdate,corporationBusLicDataInfo,HK_SIGN_CDATE,entVo.getHkSignCdate());
			//把值插入到资质图片列表中
			picBusLicAttrs.setCorporationBusLicDataInfo(corporationBusLicDataInfo);
			party.setPartyAttributes(picBusLicAttrs);
			String userId = RequestHelper.getLoginUserId();
			party.setCreator(userId);
			party.setCreatedDate(new Date());
			partyAttributeDao.insertCorporationBusLicData(party);
			
			//商业登记证书（BR）(税务登记证影印件)(业务所用名称,地址,生效日期)TAX_REG_PIC
			PartyAttributes picFaxAttrs = new PartyAttributes();
			Party partyFax = new Party();
			String faxAttrId = getAttrId(partyId,TAX_REG_PIC);
			if(null != faxAttrId){
				partyFax.setId(faxAttrId);
			}
			List<PartyAttribute> corporationFaxDataInfo = new ArrayList<>();
			//业务所用名称
			String attrIdBusiName = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
			setAttribute(attrIdBusiName,corporationFaxDataInfo,HK_BUSI_NAME,entVo.getHkBusiName());
			//地址
			String attrIdAddr = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
			setAttribute(attrIdAddr,corporationFaxDataInfo,HK_ADDR,entVo.getHkAddr());
			//生效日期
			String attrIdEffective = String.valueOf(IdGen.getInstance().nextId());//生成唯一id
			setAttribute(attrIdEffective,corporationFaxDataInfo,HK_EFFECTIVE_DATE,entVo.getHkEffctiveDate());
			
			// 把值插入到资质图片列表中
			picFaxAttrs.setCorporationFaxDataInfo(corporationFaxDataInfo);
			partyFax.setPartyAttributes(picFaxAttrs);
			partyFax.setCreator(userId);
			partyFax.setCreatedDate(new Date());
			partyAttributeDao.insertCorporationFaxData(partyFax);
			
			
		}
	}
	public void setAttribute(String attrId,List<PartyAttribute> corporationDataInfo,String key,String value){
		PartyAttribute entNameAttr = new PartyAttribute();
		entNameAttr.setKey(key);
		entNameAttr.setValue(value);
		entNameAttr.setAttrId(attrId);
		corporationDataInfo.add(entNameAttr);
	}
	private String getAttrId(String partyId,String attrName){
		PartyAttribute partyAttr= partyAttributeDao.getAttrByKey(partyId, attrName);
		String attrId = "";
		if(null != partyAttr){
			attrId =partyAttr.getAttrId();
		}
		return attrId;
	}
	/**
	 * 审核成功的账户修改
	 * 
	 * @param entVo
	 * @return void
	 * @since 2016年2月18日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void updateCertificate(EnterpriseCertificatesVo entVo) {
		String partyId = entVo.getId();
		String registeAddr = entVo.getRegisteAddr();//注册地址0大陆1香港
		String busiLisType = entVo.getBusiLisType();//资质类型（普通营业执照：COMMON，企业三证合一：3-TO-1，香港：HK-CODE）busiLisType
		// 公司资质营业执照
		//注册地址0大陆1香港
		if(registeAddr.equals(REGISTE_ADDR)){
			//普通营业执照：COMMON，企业三证合一：3-TO-1
			if(busiLisType.equals(COMMON)){
				//String mainKey,String partyId,String key,String value
				//营业执照
				//统一社会信用代码
				getEnt(BUSI_LIC_PIC,partyId,SOCIAL_CODE,entVo.getSocialCode());
				//企业名称（全称）
				getEnt(BUSI_LIC_PIC,partyId,ENT_NAME,entVo.getEntName());
				
				//住所
				getEnt(BUSI_LIC_PIC,partyId,LOCATION,entVo.getLocation());
				//经营范围
				getEnt(BUSI_LIC_PIC,partyId,BUSI_RANGE,entVo.getBusiRange());
				
				//税务登记证影印件
				//纳税人识别号
				getEnt(TAX_REG_PIC,partyId,FAX_CODE,entVo.getFaxCode());
				//纳税人名称
				getEnt(TAX_REG_PIC,partyId,FAX_NAME,entVo.getFaxName());
				
				//组织机构代码影印件
				//机构代码
				getEnt(OCC_PIC,partyId,ORG_CODE,entVo.getOrgCode());
				//机构名称
				getEnt(OCC_PIC,partyId,ORG_NAME,entVo.getOrgName());
				//机构地址
				getEnt(OCC_PIC,partyId,ORG_LOCATION,entVo.getOrgLocation());
				//成立日期
				getEnt(OCC_PIC,partyId,ORG_CDATE,entVo.getOrgCdate());
				//营业期限
				getEnt(OCC_PIC,partyId,ORG_LIMIT,entVo.getOrgLimit());
			}else{
				//营业执照
				//统一社会信用代码
				getEnt(BUSI_LIC_PIC,partyId,SOCIAL_CODE,entVo.getSocialCode());
				//企业名称（全称）
				getEnt(BUSI_LIC_PIC,partyId,ENT_NAME,entVo.getEntName());
				
				//住所
				getEnt(BUSI_LIC_PIC,partyId,LOCATION,entVo.getLocation());
				//经营范围
				getEnt(BUSI_LIC_PIC,partyId,BUSI_RANGE,entVo.getBusiRange());
				
				//税务登记证影印件
				//纳税人识别号
				getEnt(BUSI_LIC_PIC,partyId,FAX_CODE,entVo.getFaxCode());
				//纳税人名称
				getEnt(BUSI_LIC_PIC,partyId,FAX_NAME,entVo.getFaxName());
				
				//组织机构代码影印件
				//机构代码
				getEnt(BUSI_LIC_PIC,partyId,ORG_CODE,entVo.getOrgCode());
				//机构名称
				getEnt(BUSI_LIC_PIC,partyId,ORG_NAME,entVo.getOrgName());
				//机构地址
				getEnt(BUSI_LIC_PIC,partyId,ORG_LOCATION,entVo.getOrgLocation());
				//成立日期
				getEnt(BUSI_LIC_PIC,partyId,ORG_CDATE,entVo.getOrgCdate());
				//营业期限
				getEnt(BUSI_LIC_PIC,partyId,ORG_LIMIT,entVo.getOrgLimit());
			}
		}else{
			//营业执照
			//公司名称
			getEnt(BUSI_LIC_PIC,partyId,HK_ENT_NAME,entVo.getEntName());
			//签发日期
			getEnt(BUSI_LIC_PIC,partyId,HK_SIGN_CDATE,entVo.getHkSignCdate());
			
			//税务登记证影印件
			//业务所用名称
			getEnt(TAX_REG_PIC,partyId,HK_BUSI_NAME,entVo.getHkBusiName());
			//地址
			getEnt(TAX_REG_PIC,partyId,HK_ADDR,entVo.getHkAddr());
			//生效日期
			getEnt(TAX_REG_PIC,partyId,HK_EFFECTIVE_DATE,entVo.getHkEffctiveDate());
			
		}
	}
	
	public void getEnt(String mainKey,String partyId,String key,String value){
		//通过partyId和营业执照key找到唯一的attr_Id
		PartyAttribute partyAttr= partyAttributeDao.getAttrByKey(partyId, mainKey);
		Party party = new Party();
		if(null != partyAttr){
			//找到attrId即partyId
			String parentPartyId = partyAttr.getAttrId();
			//通过partyId和key找到attrId
			PartyAttribute socialAttr= partyAttributeDao.getAttrByKey(parentPartyId, key);
			if(null != socialAttr){
				String userId = RequestHelper.getLoginUserId();
				party.setId(socialAttr.getAttrId());
				party.setExternalId(key);// 为了不多写方法所以用ExternalId代替attr_name,Description代替attr_value
				party.setDescription(value);
				party.setLastUpdateUser(userId);
				party.setLastUpdateDate(new Date());
				partyAttributeDao.updateEntInfo(party);
			}
		}
		
	}
	/**
	 * 获取公司资质详情
	 * 
	 * @param EnterpriseCertificatesVo，id为企业id,applyId申请的会员id,
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public EnterpriseCertificatesVo getCertificate(String partyId) {
		PartyAttribute registeAddrs= partyAttributeDao.getAttrByKey(partyId, "REG_ADDR");
		PartyAttribute busiLisTypeAttr= partyAttributeDao.getAttrByKey(partyId, "BUSI_LIS_TYPE");
		String registeAddr;
		String busiLisType;
		if(null == registeAddrs){
		      return null;
		}else{
			 registeAddr = registeAddrs.getValue();//注册地址0大陆1香港
			 busiLisType = busiLisTypeAttr.getValue();//资质类型（普通营业执照：COMMON，企业三证合一：3-TO-1，香港：HK-CODE）busiLisType
		}
		EnterpriseCertificatesVo entVo = new EnterpriseCertificatesVo();
		entVo.setRegisteAddr(registeAddr);
		entVo.setBusiLisType(busiLisType);
		// 公司资质营业执照
		//注册地址0大陆1香港
		if(registeAddr.equals(REGISTE_ADDR)){
			//普通营业执照：COMMON，企业三证合一：3-TO-1
			if(busiLisType.equals(COMMON)){
				//通过partyId和营业执照key找到唯一的attr_Id
				PartyAttribute partyAttr= partyAttributeDao.getAttrByKey(partyId, BUSI_LIC_PIC);
				if(null != partyAttr){
					//营业执照图片url
					entVo.setBusiLicPic(partyAttr.getValue());
					//根据party查询资质信息
					getBusiAttr(entVo, partyAttr);
				}
				
				//通过partyId和税务登记key找到唯一的attr_Id
				PartyAttribute taxAttr= partyAttributeDao.getAttrByKey(partyId, TAX_REG_PIC);
				if(null != taxAttr){
					//税务登记图片url
					entVo.setTaxRegPic(taxAttr.getValue());
					//根据party查询资质信息
					getTaxAttr(entVo, taxAttr);
				}
				
				//通过partyId和组织机构代码影印件key找到唯一的attr_Id
				PartyAttribute orgAttr= partyAttributeDao.getAttrByKey(partyId, OCC_PIC);
				if(null != orgAttr){
					//税务登记图片url
					entVo.setOccPic(orgAttr.getValue());
					getOccAttr(entVo, orgAttr);
				}
			}else{
				PartyAttribute partyAttr= partyAttributeDao.getAttrByKey(partyId, BUSI_LIC_PIC);
				if(null != partyAttr){
					//营业执照图片url
					entVo.setBusiLicPic(partyAttr.getValue());
					getThreeAttr(entVo, partyAttr);
				}
				
			}
		}else{
			//香港
			//通过partyId和营业执照key找到唯一的attr_Id
			PartyAttribute partyAttr= partyAttributeDao.getAttrByKey(partyId, BUSI_LIC_PIC);
			if(null != partyAttr){
				//营业执照图片url
				entVo.setBusiLicPic(partyAttr.getValue());
				//根据party查询资质信息
				getHkBusiAttr(entVo, partyAttr);
			}
			
			//通过partyId和商业登记证书（BR）key找到唯一的attr_Id
			PartyAttribute taxAttr= partyAttributeDao.getAttrByKey(partyId, TAX_REG_PIC);
			if(null != taxAttr){
				//税务登记图片url
				entVo.setTaxRegPic(taxAttr.getValue());
				getHkTaxAttr(entVo, taxAttr);
			}
			
		}
		//通过partyId企业授权委托书key找到唯一的attr_Id
		PartyAttribute loaAttr= partyAttributeDao.getAttrByKey(partyId, LOA);
		if(null != loaAttr){
			entVo.setLoaPic(loaAttr.getValue());
		}
		
		//查询图片pdf名字
		List<Map<String, String>> maps = new ArrayList<>();
		Map<String, String> mapLoa = getOther(partyId, LOA_PDF_NAME);
		if(null !=mapLoa && !mapLoa.isEmpty()){
			maps.add(mapLoa);
		}
		Map<String, String> mapBusi = getOther(partyId, BUSI_PDF_NAME);
		if(null !=mapBusi && !mapBusi.isEmpty()){
			maps.add(mapBusi);
		}
		Map<String, String> mapTax = getOther(partyId, TAX_PDF_NAME);
		if(null !=mapTax && !mapTax.isEmpty()){
			maps.add(mapTax);
		}
		Map<String, String> mapOcc = getOther(partyId, OCC_PDF_NAME);
		if(null !=mapOcc && !mapOcc.isEmpty()){
			maps.add(mapOcc);
		}
		entVo.setOtherAttrs(maps);
		return entVo;
	}
	private void getHkBusiAttr(EnterpriseCertificatesVo entVo, PartyAttribute partyAttr) {
		if(!StringUtils.isEmpty(partyAttr.getAttrId())){
			List<PartyAttribute> listAttr =	partyAttributeDao.getPartAttribute(partyAttr.getAttrId());
			for(int i=0;i<listAttr.size();i++){
				PartyAttribute attr=listAttr.get(i);
				// 企业名称(全称)
				if (attr.getKey().equals(HK_ENT_NAME)) {
					entVo.setEntName(attr.getValue());
					entVo.setAttrId(attr.getAttrId());//用来判断是修改还是新增
				}
				// 签发日期
				if (attr.getKey().equals(HK_SIGN_CDATE)) {
					entVo.setHkSignCdate(attr.getValue());
				}
			}
		}
	}
	private void getHkTaxAttr(EnterpriseCertificatesVo entVo, PartyAttribute taxAttr) {
		//根据party查询资质信息
		if(!StringUtils.isEmpty(taxAttr.getAttrId())){
			List<PartyAttribute> listTaxAttr =	partyAttributeDao.getPartAttribute(taxAttr.getAttrId());
			for(int i=0;i<listTaxAttr.size();i++){
				PartyAttribute attrTax=listTaxAttr.get(i);
				// 业务所用名称
				if (attrTax.getKey().equals(HK_BUSI_NAME)) {
					entVo.setHkBusiName(attrTax.getValue());
				}
				// 地址
				if (attrTax.getKey().equals(HK_ADDR)) {
					entVo.setHkAddr(attrTax.getValue());
				}
				// 生效日期
				if (attrTax.getKey().equals(HK_EFFECTIVE_DATE)) {
					entVo.setHkEffctiveDate(attrTax.getValue());
				}
			}
		}
	}
	private void getThreeAttr(EnterpriseCertificatesVo entVo, PartyAttribute partyAttr) {
		//根据party查询资质信息
		if(!StringUtils.isEmpty(partyAttr.getAttrId())){
			List<PartyAttribute> listAttr =	partyAttributeDao.getPartAttribute(partyAttr.getAttrId());
			for(int i=0;i<listAttr.size();i++){
				PartyAttribute attr=listAttr.get(i);
				// 统一社会信用代码
				if (attr.getKey().equals(SOCIAL_CODE)) {
					entVo.setSocialCode(attr.getValue());
					entVo.setAttrId(attr.getAttrId());//用来判断是修改还是新增
				}
				// 企业名称(全称)
				if (attr.getKey().equals(ENT_NAME)) {
					entVo.setEntName(attr.getValue());
				}
				// 住所
				if (attr.getKey().equals(LOCATION)) {
					entVo.setLocation(attr.getValue());
				}
				// 经营范围
				if (attr.getKey().equals(BUSI_RANGE)) {
					entVo.setBusiRange(attr.getValue());
				}
				// 纳税人识别号
				if (attr.getKey().equals(FAX_CODE)) {
					entVo.setFaxCode(attr.getValue());
				}
				// 纳税人名称
				if (attr.getKey().equals(FAX_NAME)) {
					entVo.setFaxName(attr.getValue());
				}
				// 机构代码
				if (attr.getKey().equals(ORG_CODE)) {
					entVo.setOrgCode(attr.getValue());
				}
				// 机构名称
				if (attr.getKey().equals(ORG_NAME)) {
					entVo.setOrgName(attr.getValue());
				}
				// 机构地址
				if (attr.getKey().equals(ORG_LOCATION)) {
					entVo.setOrgLocation(attr.getValue());
				}
				// 成立日期
				if (attr.getKey().equals(ORG_CDATE)) {
					entVo.setOrgCdate(attr.getValue());
				}
				// 营业期限
				if (attr.getKey().equals(ORG_LIMIT)) {
					entVo.setOrgLimit(attr.getValue());
				}
			}
		}
	}
	private void getOccAttr(EnterpriseCertificatesVo entVo, PartyAttribute orgAttr) {
		//根据party查询资质信息
		if(!StringUtils.isEmpty(orgAttr.getAttrId())){
			List<PartyAttribute> listOrgAttr =	partyAttributeDao.getPartAttribute(orgAttr.getAttrId());
			for(int i=0;i<listOrgAttr.size();i++){
				PartyAttribute attrOrg=listOrgAttr.get(i);
				// 机构代码
				if (attrOrg.getKey().equals(ORG_CODE)) {
					entVo.setOrgCode(attrOrg.getValue());
				}
				// 机构名称
				if (attrOrg.getKey().equals(ORG_NAME)) {
					entVo.setOrgName(attrOrg.getValue());
				}
				// 机构地址
				if (attrOrg.getKey().equals(ORG_LOCATION)) {
					entVo.setOrgLocation(attrOrg.getValue());
				}
				// 成立日期
				if (attrOrg.getKey().equals(ORG_CDATE)) {
					entVo.setOrgCdate(attrOrg.getValue());
				}
				// 营业期限
				if (attrOrg.getKey().equals(ORG_LIMIT)) {
					entVo.setOrgLimit(attrOrg.getValue());
				}
			
			}
		}
	}
	private void getTaxAttr(EnterpriseCertificatesVo entVo, PartyAttribute taxAttr) {
		if(!StringUtils.isEmpty(taxAttr.getAttrId())){
			List<PartyAttribute> listTaxAttr =	partyAttributeDao.getPartAttribute(taxAttr.getAttrId());
			for(int i=0;i<listTaxAttr.size();i++){
				PartyAttribute attrTax=listTaxAttr.get(i);
				// 纳税人识别号
				if (attrTax.getKey().equals(FAX_CODE)) {
					entVo.setFaxCode(attrTax.getValue());
				}
				// 纳税人名称
				if (attrTax.getKey().equals(FAX_NAME)) {
					entVo.setFaxName(attrTax.getValue());
				}
			}
		}
	}
	private void getBusiAttr(EnterpriseCertificatesVo entVo, PartyAttribute partyAttr) {
		if(!StringUtils.isEmpty(partyAttr.getAttrId())){
			List<PartyAttribute> listAttr =	partyAttributeDao.getPartAttribute(partyAttr.getAttrId());
			for(int i=0;i<listAttr.size();i++){
				PartyAttribute attr=listAttr.get(i);
				// 统一社会信用代码
				if (attr.getKey().equals(SOCIAL_CODE)) {
					entVo.setSocialCode(attr.getValue());
					entVo.setAttrId(attr.getAttrId());//用来判断是修改还是新增
				}
				// 企业名称(全称)
				if (attr.getKey().equals(ENT_NAME)) {
					entVo.setEntName(attr.getValue());
				}
				// 住所
				if (attr.getKey().equals(LOCATION)) {
					entVo.setLocation(attr.getValue());
				}
				// 经营范围
				if (attr.getKey().equals(BUSI_RANGE)) {
					entVo.setBusiRange(attr.getValue());
				}
				
			}
		}
	}
	private Map<String, String> getOther(String partyId,String key){
		PartyAttribute attrName= partyAttributeDao.getAttrByKey(partyId, key);
		if(null != attrName){
			Map<String, String> map = new HashMap<>();
			map.put(key, attrName.getValue());
			return map;
		}
		return null;
	}
}
