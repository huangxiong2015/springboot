package com.yikuyi.party.partygroup.api.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.framewrok.springboot.web.RequestHelper;
import com.yikuyi.party.contact.vo.MsgResultVo;
import com.yikuyi.party.group.vo.PartyGroupVo;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.partygroup.api.IPartyGroupResource;
import com.yikuyi.party.partygroup.bll.PartyGroupManager;
import com.yikuyi.party.vo.PartyVo;

/**
 * 定义收货地址的相关接口
 * 
 * @author guowenyao
 *
 */
@RestController
@RequestMapping("v1")
public class PartyGroupResource implements IPartyGroupResource {

	@Autowired
	private PartyGroupManager partyGroupManager;

	/**
	 * 根据partId获取供应商列表
	 * 
	 * @param addressType
	 * @return
	 * @since 2016年12月12日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@RequestMapping(value = "partyGroup", method = RequestMethod.PUT)
	public List<PartyVo> getPartyGroupList(@RequestBody PartyGroupVo vo) {
		List<PartyVo> partyVos = new ArrayList<>();
		
		String partyId = RequestHelper.getLoginUserId();
		vo.setPartyIdFrom(partyId);
		List<Party> list = partyGroupManager.getAllPartyGroupList(vo, RowBounds.DEFAULT);
		
		for (Party party : list) {
			PartyVo partyVo = new PartyVo();
			BeanUtils.copyProperties(party, partyVo);
			if(null != party.getPartyAttributes() && null != party.getPartyAttributes().getIsShowName()){
				String isshowName = party.getPartyAttributes().getIsShowName().getValue();
				if ("Y".equals(isshowName)) {
					if (null != party.getPartyGroup()) {
						partyVo.setDisplayName(party.getPartyGroup().getGroupName());
					}
				} else {
					partyVo.setDisplayName(party.getPartyCode());
				}
			}
			partyVos.add(partyVo);
		}
		return partyVos;
	}

	/**
	 * 根据组织名称查找记录
	 * 
	 * @author 张伟
	 * @param groupName
	 * @return
	 */
	@RequestMapping(value = "groups/groupname", method = RequestMethod.GET)
	public MsgResultVo findPartyGroupByName(@RequestParam(required = false) String groupName) {
		MsgResultVo result = new MsgResultVo();
		Party party = partyGroupManager.findPartyGroupByName(groupName);
		if (null != party) {
			result.setCode("10001");
			result.setValue(party);
		} else {
			result.setCode("10000");
			result.setValue("供应商名称可用");
		}

		return result;
	}

	/**
	 * 物流公司
	 */
	@RequestMapping(value = "party/allparty", method = RequestMethod.PUT)
	public List<PartyVo> getAllPartyGroupList(@RequestBody PartyGroupVo vo) {
		List<PartyVo> partyVos = new ArrayList<>();
		
		List<Party> list = partyGroupManager.getAllPartyGroupList(vo, RowBounds.DEFAULT);
		
		for (Party party : list) {
			PartyVo partyVo = new PartyVo();
			BeanUtils.copyProperties(party, partyVo);
			if(null != party.getPartyAttributes() && null != party.getPartyAttributes().getIsShowName()){
				String isshowName = party.getPartyAttributes().getIsShowName().getValue();
				if ("Y".equals(isshowName)) {
					if (null != party.getPartyGroup()) {
						partyVo.setDisplayName(party.getPartyGroup().getGroupName());
					}
				} else {
					partyVo.setDisplayName(party.getPartyCode());
				}
			}
			partyVos.add(partyVo);
		}
		return partyVos;
	}
	
	  /**
     *购物车下定的权限控制 
     */
	@RequestMapping(value = "party/permissions", method = RequestMethod.GET)
	public MsgResultVo orderPermissions(@RequestParam(required = false) String  partyId) {
		return partyGroupManager.orderPermissions(partyId);
	}

	/**
	 * 新增物流公司信息
	 */
	@Override
	@RequestMapping(value="/party/logistics" , method = RequestMethod.POST)
	public void insertLogisticsCompany(@RequestBody PartyGroupVo vo) {
		partyGroupManager.insertLogisticsCompany(vo);
	}

	/**
	 * 编辑物流公司信息
	 */
	@Override
	@RequestMapping(value="/party/logistics" , method = RequestMethod.PUT)
	public void updateLogisticsCompany(@RequestBody PartyGroupVo vo) {
		partyGroupManager.updateLogisticsCompany(vo);
	}

	/**
	 * 启用/停用物流公司信息
	 */
	@Override
	@RequestMapping(value="/party/logistics/status" , method = RequestMethod.PUT)
	public void changeLogisticsCompanyStatus(@RequestBody PartyGroupVo vo) {
		partyGroupManager.changeLogisticsCompanyStatus(vo);
	}

}
