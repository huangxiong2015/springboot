/*
 * Created: 2017年1月19日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.enterprise.bll;

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ibatis.session.RowBounds;
import org.jasig.inspektr.audit.annotation.Audit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.framework.springboot.audit.Param;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.ictrade.tools.export.ExportFactory;
import com.ictrade.tools.export.ExportProcesser;
import com.yikuyi.basedata.category.model.Category;
import com.yikuyi.message.mail.vo.MailInfoVo;
import com.yikuyi.party.common.utils.Constants;
import com.yikuyi.party.contact.model.ContactMech;
import com.yikuyi.party.contact.model.PostalAddress;
import com.yikuyi.party.contact.vo.EnterpriseParamVo;
import com.yikuyi.party.contact.vo.EnterpriseVo;
import com.yikuyi.party.contact.vo.MsgResultVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.group.model.PartyGroup;
import com.yikuyi.party.group.model.PartyGroup.AccountStatus;
import com.yikuyi.party.group.model.PartyGroup.ActiveStatus;
import com.yikuyi.party.login.model.UserLogin;
import com.yikuyi.party.login.model.UserLogin.UserLoginMethod;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.model.PartyContactMech;
import com.yikuyi.party.model.PartyContactMech.PurposeType;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.bll.PartyGroupManager;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.person.model.Person;
import com.yikuyi.party.person.model.Person.PersonTypeStatus;
import com.yikuyi.party.person.model.Person.RelationSratus;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.shipAddress.bll.PartyContactMechManager;
import com.yikuyi.party.userLogin.dao.UserLoginDao;
import com.yikuyi.party.vo.EnterpriseExpiredVo;
import com.yikuyi.workflow.Apply;
import com.yikuyi.workflow.Apply.ApplyStatus;
import com.ykyframework.exception.SystemException;
import com.ykyframework.model.IdGen;
import com.ykyframework.mqservice.sender.MsgSender;
import com.ykyframework.oss.AliyunOSSAccount;
import com.ykyframework.oss.AliyunOSSHelper;

@Service
@Transactional
public class EnterpriseManager {
	private static final Logger logger = LoggerFactory.getLogger(EnterpriseManager.class);
	@Autowired
	private PartyDao partyDao;

	@Autowired
	private PartyAttributeDao partyAttributeDao;

	@Autowired
	private PartyContactMechManager partyContactMechManager;

	@Autowired
	private PartyGroupManager partyGroupManager;

	@Autowired
	private PartyGroupDao partyGroupDao;

	@Autowired
	private PartyRoleDao partyRoleDao;

	@Autowired
	private PersonDao personDao;

	@Autowired
	private UserLoginDao userLoginDao;

	private static final String STATUS_ID = "ENABLE";
	
	private static final String TD_END_STR = "</td>";// td结束符号
	private static final String TD_START_STR = "<td>";// td开始符号
	private static final String WEBSITE_URL = "WEBSITE_URL";// 公司官网
	private static final String CORPORATION_CATEGORY_ID = "CORPORATION_CATEGORY_ID";// 公司类型
	private static final String INDUSTRY_CATEGORY_ID = "INDUSTRY_CATEGORY_ID";// 所属行业
	private static final String INDUSTRY_CATEGORY_ID_OTHER = "INDUSTRY_CATEGORY_ID_OTHER";// 所属行业其它属性拓展属性
	private static final String D_CODE = "D_CODE";// 邓氏编码
	private static final String LOA = "LOA";// 企业委托
	private static final String LOA_PDF_NAME = "LOA_PDF_NAME";// 企业授权pdf名字

	private static final String NOTACTIVE = "notActive";// 申请账户未激活或者关联

	private static final String RELATING = "relating";// 申请账户关联审核中或者驳回中
	private static final String ACTIVING = "activing";// 申请账户激活审核中或者驳回中

	private static final String RELATED = "related";// 申请账户关联审核通过
	private static final String ACTIVED = "actived";// 申请账户激活审核通过

	private static final String EMAIL = "EMAIL";// 邮件类型
	private static final String INNERMAIL = "INNERMAIL";// 站内信

	private static final String COMPANYNAME = "companyName";// 公司名称

	private static final String EXPORT_TEMPLATE = "公司名称,公司类型,所属行业,公司官网,公司简介,公司注册地,联系人,联系电话,电子传真,QQ,详细地址";
	@Autowired
	private PartyRelationshipDao relationshipDao;


	// workflow 27090 前缀
	@Value("${api.workflow.serverUrlPrefix}")
	private String workflowUrlPrefix;

	// party 前缀
	@Value("${api.party.serverUrlPrefix}")
	private String partyServerUrlPrefix;

	// customer
	@Value("${customer.serverUrlPrefix}")
	private String customerServerUrlPrefix;

	@Autowired
	private RestTemplate restTemplate;

	public static final ObjectMapper mapper = new ObjectMapper();

	@Autowired
	private MsgSender msgSender;

	@Value("${mqConsumeConfig.sendMsgAndEmail.topicName}")
	private String sendMsgAndEmailTopicName;

	// 项目前缀
	@Value("${operation.serverUrlPrefix}")
	private String operationUrl;

	@Autowired
	@Qualifier(value = "aliyun.oss.account")
	private AliyunOSSAccount aliyunOSSAccount;

	// portal
	@Value("${portal.serverUrlPrefix}")
	private String portalServerUrlPrefix;

	@Value("${api.basedata.serverUrlPrefix}")
	private String serverUrl;

	/**
	 * 根据保存的Url获取原图、缩略图
	 * 
	 * @param imgUrl
	 * @return
	 * @since 2016年6月15日
	 * @author zr.xuheng@yikuyi.com
	 */
	public Map<String, String> getImgUrlMap(String imgUrl) {
		Map<String, String> map = new HashMap<>();
		if (!StringUtils.isEmpty(imgUrl)) {
			map = AliyunOSSHelper.getImageUrl(aliyunOSSAccount, imgUrl, 1000L, "UTF-8");
			if (imgUrl.toLowerCase().contains(".pdf")) {
				map.put("type", "1");
			} else {
				map.put("type", "0");
			}
		}
		return map;
	}

	/**
	 * 根据保存的Url获取原图、缩略图
	 * 
	 * @param imgUrl
	 * @return
	 * @since 2016年6月15日
	 * @author zr.xuheng@yikuyi.com
	 */
	public String getImagUrl(String url) {
		Map<String, String> map = getImgUrlMap(url);
		return map.get("image");

	}

	//////////////////////////////////// 提交申请认证/////////////////////////////
	/**
	 * 账户认证申请保存信息
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void activeAccountSave(Apply apply) {
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			String userId = RequestHelper.getLoginUserId();
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null != enterpriseVo) {
				String url = "";
				try {
					  //判断是企业还是个人 //如果userType为1为个人，否则为企业
					Integer userType = partyRoleDao.findRoleByIdCount(apply.getApplyUserId());
					if (userType==1) {
						//先创建企业
						String id = String.valueOf(IdGen.getInstance().nextId());
						//生成企业信息
						createEnt(apply, userId, enterpriseVo, id);
						//修改个人信息
						createPerson(enterpriseVo,apply.getApplyUserId());
						//插入企业与账户的关联
						saveRelationShip(apply.getApplyUserId(), enterpriseVo.getId(),1);
						apply.setApplyOrgId(id);
						enterpriseVo.setId(id);
					}else{
						String id = enterpriseVo.getId();// 企业id
						Party party = new Party();
						party.setId(id);// 设置企业id
						party.setLastUpdateDate(new Date());
						party.setLastUpdateUser(userId);
						partyDao.updateParty(party);
						// 修改partyGroup表设置为待审核状态
						updatePartyGroup(party, ActiveStatus.WAIT_APPROVE, null, null, userId, enterpriseVo.getName(), enterpriseVo.getLogo(),new Date(),null);
						//修改属性
						updatePartyAttr(enterpriseVo, party);
						// 修改公司注册地址
						saveBaseInfo(enterpriseVo, id);
					
						//修改账号信息person信息
						Party party1 = new Party();
						party1.setId(apply.getApplyUserId());// 设置企业id
						Person person = new Person();
						person.setLastNameLocal(enterpriseVo.getContactUserName());
						person.setTel(enterpriseVo.getContactUserTel());
						person.setMail(enterpriseVo.getMail());
						person.setPersonalTitle(enterpriseVo.getPersonalTitle());
						party1.setPerson(person);
						personDao.editPerson(party1);
					
					
				   }
					// 调用workFlow服务
					url = workflowUrlPrefix + "/v1/apply";
					HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
					ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
					};
					restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseEntity);
					try {
						String urlMail = operationUrl + "/verify.htm";
						// 获取申请的用户名
						//Party p = personDao.findPersonById(userId);
						/*String applyName = "";
						if (null != p && null != p.getPerson()
								&& !StringUtils.isEmpty(p.getPerson().getLastNameLocal())) {
							applyName = p.getPerson().getLastNameLocal();
						}*/
						sendCerMail(urlMail, enterpriseVo.getName(),"资质","APPLY_ACTIVE");
					} catch (Exception e) {
						logger.error("发送激活邮件MQ出错:{}", e);
					}

				} catch (Exception e) {
					logger.error("调用workflow服务异常：{}", e.getMessage(), e);
				}
			}

		}

	}

	private void createEnt(Apply apply, String userId, EnterpriseVo enterpriseVo, String id) {
		Party party = new Party();
		party.setId(id);
		party.setPartyType(PartyType.CORPORATION);
		party.setPartyStatus(PartyStatus.PARTY_NOT_VERIFIED);
		party.setCreator(userId);
		party.setCreatedDate(new Date());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		partyDao.insert(party);
		//修改把当前个人用户变为企业用户
		Party partyNew = new Party();
		partyNew.setId(apply.getApplyUserId());
		partyNew.setCorporationId(id);
		partyDao.updateParty(partyNew);
		//新增partyGroup
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setGroupName(enterpriseVo.getName());
		partyGroup.setCreator(userId);
		partyGroup.setCreatedDate(new Date());
		partyGroup.setLastUpdateUser(userId);
		partyGroup.setLastUpdateDate(new Date());
		partyGroup.setApplyDate(new Date());
		partyGroup.setActiveStatus(ActiveStatus.WAIT_APPROVE);
		partyGroup.setAccountStatus(AccountStatus.PARALLEL_ACCOUNT);
		party.setPartyGroup(partyGroup);
		partyGroupDao.insert(party);
		// 插入公司官网 
		insertCer(WEBSITE_URL, enterpriseVo.getWebSite(), party, userId);
		//公司类型
		insertCer(CORPORATION_CATEGORY_ID, enterpriseVo.getCorCategory(), party, userId);
		//所属行业
		insertCer(INDUSTRY_CATEGORY_ID, enterpriseVo.getCorCategory(), party, userId);
		// 邓氏编码
		insertCer(D_CODE, enterpriseVo.getdCode(), party, userId);
		// 设置other值
		List<Map<String, String>> otherAttrs = enterpriseVo.getOtherAttrs();
		if (otherAttrs != null && !otherAttrs.isEmpty()) {
			String mapKey;
			// 循环得到key
			for (Map<String, String> map : otherAttrs) {
				Iterator<String> iterator = map.keySet().iterator();
				// 如果原本是图片后来修改成pdf则需要新增pdf名字，否则修改pdf名字
				while (iterator.hasNext()) {
					mapKey = iterator.next();
					if(null !=map.get(mapKey) && map.get(mapKey) != ""){
					 insertCer(mapKey, map.get(mapKey), party, userId);
					}
				}

			}
		}
	}
	/**
	 * 保存账号信息
	 * @param userVo
	 * @return
	 * @since 2017年4月28日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private void createPerson(EnterpriseVo entVo,String accountId) {
		String id = String.valueOf(IdGen.getInstance().nextId());
        //PERSON 表生成记录 PARTY_ID 和  PARTY表一致。
		Party party = new Party();
		party.setId(accountId);
		Person person = new Person();
		person.setLastNameLocal(entVo.getContactUserName());
		person.setMail(entVo.getMail());
		person.setPersonalTitle(entVo.getPersonalTitle());
		person.setTel(entVo.getContactUserTel());
		person.setTelStatus("Y");
		person.setMailStatus("Y");
		person.setCreator(id);
		person.setCreatedDate(new Date());
		person.setLastUpdateDate(new Date());
		person.setLastUpdateUser(id);
		person.setPersonTypeStatus(PersonTypeStatus.COMMON);
		party.setPerson(person);
		personDao.editPerson(party);
		//c.生成登录数据USER_LOGIN  字段： ENABLED = ‘Y’ , PARTY_ID 和 PARTY表一致， USER_LOGIN_ID =  刚刚注册的手机号。
		UserLogin userLogin = new UserLogin();
		userLogin.setId(entVo.getMail());
		userLogin.setParty(party);
		userLogin.setEnabled("Y");
		userLogin.setIsSystem("N");
		userLogin.setRequirePasswordChange("N");
		userLogin.setUserLoginMethod(UserLoginMethod.EMAIL.toString());
		userLogin.setCreator(id);
		userLogin.setCreatedDate(new Date());
		userLogin.setLastUpdateUser(id);
		userLogin.setLastUpdateDate(new Date());
		userLoginDao.update(userLogin);
		
        //删除个人用户原有的角色
		partyRoleDao.deletePartyRoleByType(accountId);
		 //d.生成 PARTY_ROLE 数据  ROLE_TYPE_ID 为：REGISTER
		partyRoleDao.insert(accountId, RoleType.ENTERPRISE_CUST.toString(),id,new Date(),id,new Date());
		
	}

	/////////////////////////////////////// 审核//////////////

	/**
	 * 账户激活审核成功保存数据
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void save(JSONObject jsonObject) {
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		String userId = RequestHelper.getLoginUserId();
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			// 驳回
			if (apply.getStatus() == ApplyStatus.REJECT) {
				Party party = new Party();
				party.setId(apply.getApplyOrgId());
				
				// 修改partyGrop的状态
				updatePartyGroup(party, ActiveStatus.REJECTED, null, enterpriseVo.getComments(), userId, null, null,null,new Date());
				String urlMail = customerServerUrlPrefix + "/enterprise.htm";
				//用户姓名
				String cerName = getUserName(apply.getApplyUserId());
				// 查询认证部邮件
				commonMsg(MailInfoVo.TemplateId.ACTIVE_REJECT.toString(), MailInfoVo.Type.EMAIL.toString(),
						enterpriseVo.getMail(), urlMail, enterpriseVo.getName(), apply.getReason(),cerName);
				sendInnerMail("ACTIVE_REJECT", urlMail, enterpriseVo);
			} else {
				// 审核成功
				if (null != enterpriseVo) {
					saveApply(apply.getApplyUserId(),enterpriseVo);
					//用户姓名
					String cerName = getUserName(apply.getApplyUserId());
					commonMsg(MailInfoVo.TemplateId.ACTIVE_PASS.toString(), MailInfoVo.Type.EMAIL.toString(),
							enterpriseVo.getMail(), null, enterpriseVo.getName(), null,cerName);
					sendInnerMail("ACTIVE_PASS", null, enterpriseVo);
				}
			}
		}
	}

	private String getUserName(String id){
		String cerName = "";
		Party partyUserName = personDao.findPersonById(id);
		if (null != partyUserName.getPerson()
				&& !StringUtils.isEmpty(partyUserName.getPerson().getLastNameLocal())) {
			cerName = partyUserName.getPerson().getLastNameLocal();
		}
		return cerName;
	}
	/**
	 * 抽取激活账户审核成功信息
	 * 
	 * @param enterpriseVo
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void saveApply(String applyUserId,EnterpriseVo entVo) {
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(entVo.getId());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		partyDao.updateParty(party);
		// 修改企业名和logo
		updatePartyGroup(party, ActiveStatus.PARTY_VERIFIED, null, null, userId, entVo.getName(), entVo.getLogo(),null,new Date());
	
		// 插入资质信息
		commonCer(entVo,party);
		// 根据企业id判断当前企业是否有生成过组织代码 ,一个企业只能插入一条数据
		//如果没有组织机构代码则根据公司名称查询  用户名，组织机构代码，key
		if(!StringUtils.isEmpty(entVo.getOccCode())){
			//如果有组织机构代码则按照名称和组织机构代码去查询
			List<EnterpriseVo> entList= partyAttributeDao.findPartyCodeList(entVo.getName(),entVo.getOccCode(),"ORG_CODE");
		    if(null == entList){
		    	 //新增一个vip企业
		    	newEnt(entVo);	
		    }
		}else{
			List<EnterpriseVo> entNameList= partyAttributeDao.findPartyCodeList(entVo.getName(),null,"ORG_CODE");
			if(null == entNameList){
				 //新增一个vip企业
				newEnt(entVo);	
			}
		}
	
	}
    //新增一个vip企业
	void newEnt(EnterpriseVo entVo) {
		String userId = RequestHelper.getLoginUserId();		// 重新备份一份数据到party表中
		// 插入到party表
		Party partyNew = new Party();
		String id = String.valueOf(IdGen.getInstance().nextId());
		partyNew.setId(id);
		partyNew.setPartyType(PartyType.VIP_CORPORATION);
		partyNew.setPartyStatus(PartyStatus.PARTY_ENABLED);
		partyNew.setCreatedDate(new Date());
		partyNew.setCreator(userId);
		partyDao.insert(partyNew);

		// 插入group表
		PartyGroup partyGroupNew = new PartyGroup();
		partyGroupNew.setGroupName(entVo.getName());
		partyGroupNew.setCreator(userId);
		partyGroupNew.setCreatedDate(new Date());
		partyGroupNew.setActiveStatus(ActiveStatus.PARTY_VERIFIED);
		partyNew.setPartyGroup(partyGroupNew);
		partyGroupDao.insert(partyNew);

		// 插入新企业与老企业的关系
		saveRelationShip(entVo.getId(), id,2);
		
		List<PartyAttribute> attrList = partyAttributeDao.getPartAttribute(entVo.getId());
		if(null != attrList && CollectionUtils.isNotEmpty(attrList)){
			for(PartyAttribute attr:attrList){
				if(attr.getKey().equals(CORPORATION_CATEGORY_ID)){
					entVo.setCorCategory(attr.getValue());
				}
				if(attr.getKey().equals(INDUSTRY_CATEGORY_ID)){
					entVo.setIndustryCategory(attr.getValue());
				}
				if(attr.getKey().equals(WEBSITE_URL)){
					entVo.setWebSite(attr.getValue());
				}
				if(attr.getKey().equals(D_CODE)){
					entVo.setdCode(attr.getValue());
				}
				if(attr.getKey().equals(INDUSTRY_CATEGORY_ID_OTHER)){
					List<Map<String, String>> otherAttrs = new ArrayList<>();
					Map<String, String> otherMap = new HashMap<>();
					otherMap.put(INDUSTRY_CATEGORY_ID_OTHER, attr.getValue());
					otherAttrs.add(otherMap);
					entVo.setOtherAttrs(otherAttrs);
				}
				
			}
			//新增或修改属性
			updatePartyAttr(entVo,partyNew);
		
		}
        //插入组织机构代码信息和注册地
		commonCer(entVo,partyNew);
	}

	void commonCer(EnterpriseVo entVo,Party party){
		String userId = RequestHelper.getLoginUserId();		
		//插入组织机构代码等信息
		insertCertificate(entVo, userId, party);
		// 修改注册地
		saveBaseInfo(entVo, entVo.getId());
	}

	 void insertCertificate(EnterpriseVo entVo, String userId, Party party) {
		 //删除资质
		 Map<String, String> map = entVo.getMap();
		 if(null == map){
			 return;
		 }
		 List<String> delKeyList = new ArrayList<>();
		 PartyAttributes attrList = new PartyAttributes();
		 for (Object map1 : map.entrySet()){
		    delKeyList.add(((Map.Entry)map1).getKey().toString());
		 }
		 attrList.setKeyList(delKeyList);
		 party.setPartyAttributes(attrList);
		 // 先删除资质信息
		 partyAttributeDao.deleteByIdOrKey(party);
		 
		
		 PartyAttributes cerAttr;
		 PartyAttribute cer;
		 for (Object map1 : map.entrySet()){  
			cerAttr= new PartyAttributes();
			cer = new PartyAttribute();
			  if(null !=((Map.Entry)map1).getValue() && "" !=((Map.Entry)map1).getValue()){
				    cer.setKey(((Map.Entry)map1).getKey().toString());// 将map的key设置给partyAttribute的key
					cer.setValue(((Map.Entry)map1).getValue().toString());// 将map的value设置给partyAttribute的value
					cer.setCreator(userId);
					cer.setCreatedDate(new Date());
					cerAttr.setCertificateAttrs(cer);
					party.setPartyAttributes(cerAttr);
					partyAttributeDao.insertCerAttrs(party);
			  }
		 }
		
	}

	private void sendCerMail(String urlMail, String name,String type,String template) {
		// 查询认证部邮件
		List<String> list = new ArrayList<>();
		list.add("CUST_CERT_SPECIALIST");
		List<Party> cerPartyList = personDao.findDataByRole(list);
		if (null != cerPartyList && !cerPartyList.isEmpty()) {
			for (int i = 0; i < cerPartyList.size(); i++) {
				Party partyMail = cerPartyList.get(i);
				if (null != partyMail) {
					// 获取认证部的名字
					String cerName = "";
					String email = "";// 要发送的邮件
					if (null != partyMail.getPerson()
							&& !StringUtils.isEmpty(partyMail.getPerson().getLastNameLocal())) {
						cerName = partyMail.getPerson().getLastNameLocal();
					}
					if (null != partyMail.getPerson() && !StringUtils.isEmpty(partyMail.getPerson().getMail())) {
						email = partyMail.getPerson().getMail();
					}
		
					MailInfoVo mailInfoVo = new MailInfoVo();
					JSONObject object = new JSONObject();
					object.put("cerName", cerName);// 认证部名称
					//SimpleDateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					//object.put("applyDate", dfDate.format(new Date()));// 申请时间
					object.put("companyName", name);// 公司名称
					object.put("type", type);// 公司类型
					object.put("urlMail", urlMail);// 链接
					String logoPrefix = portalServerUrlPrefix;// portal项目前缀
					object.put("portalUrl", logoPrefix);// 公司logoUrl
					mailInfoVo.setTemplateId(template);
					mailInfoVo.setContent(object);
					mailInfoVo.setTo(email);
					mailInfoVo.setType(EMAIL);
					msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				}
			}
		}
	}

	public void commonMsg(String templateId, String type, String toAddress, String url, String companyName,
			String reson,String cerName) {
		MailInfoVo mailInfoVo = new MailInfoVo();
		mailInfoVo.setTemplateId(templateId);
		mailInfoVo.setType(type);
		mailInfoVo.setTo(toAddress);
		JSONObject object = new JSONObject();
		object.put("cerName", cerName);//用户名
		object.put("urlMail", url);// 链接地址
		object.put(COMPANYNAME, companyName);//公司名称
		object.put("applyReason", reson);// 驳回原因
		mailInfoVo.setContent(object);
		logger.info("激活账户邮件参数：{}", JSONObject.toJSON(mailInfoVo).toString());
		msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
	}

	/**
	 * 发送站内信
	 * 
	 * @param emplateId
	 * @param url
	 * @param vo
	 * @since 2017年2月21日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void sendInnerMail(String emplateId, String url, EnterpriseVo vo) {
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(emplateId);
			mailInfoVo.setType(INNERMAIL);
			mailInfoVo.setTo(vo.getId());
			JSONObject content = new JSONObject();
			content.put("url", url);
			mailInfoVo.setTo(vo.getId());
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("站内信邮件发送失败：{}", e);
		}
	}

	/**
	 * 保存地址信息
	 * 
	 * @param UserExtendVo
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	void saveBaseInfo(EnterpriseVo entVo, String partyId) {
		if (null != entVo) {
			PartyContactMech partyContactMech = new PartyContactMech();
			partyContactMech.setPurposeType(PurposeType.REGISTER_LOCATION);
			ContactMech contactMech = new ContactMech();
			PostalAddress postalAddress = new PostalAddress();
			postalAddress.setAddress1(entVo.getAddress());
			postalAddress.setCountryGeoName("中国");
			postalAddress.setCountryGeoId("china");

			postalAddress.setProvinceGeoName(entVo.getProvinceName());
			postalAddress.setProvinceGeoId(entVo.getProvince());

			postalAddress.setCountyGeoName(entVo.getCountryName());
			postalAddress.setCountyGeoId(entVo.getCountry());

			postalAddress.setCityGeoName(entVo.getCityName());
			postalAddress.setCityGeoId(entVo.getCity());

			contactMech.setPostalAddress(postalAddress);

			partyContactMech.setContactMech(contactMech);
			partyContactMech.setPartyId(partyId);
			partyContactMechManager.insert(partyContactMech);

		}
	}

	/**
	 * 修改公司信息
	 * 
	 * @param id
	 * @return
	 * @since 2017年2月7日
	 * @author zr.helinmei@yikuyi.com
	 */
	@Audit(action = "Enterprise Modifyqqq;;;'#enterpriseVo.id'qqq;;;'#enterpriseVo.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void editCompany(EnterpriseVo enterpriseVo) {
		if (null != enterpriseVo) {
			try {
				updateParty(enterpriseVo);
			} catch (IOException e) {
				logger.error(e.getMessage(), e);
			}
		}
	}

	/**
	 * 修改公司信息
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void updateParty(EnterpriseVo entVo) throws IOException {
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(entVo.getId());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		party.setPartyCode(entVo.getPartyCode());// yky编码
		partyDao.updateParty(party);

		// 修改企业名和logo
		updatePartyGroup(party, null, null, entVo.getComments(), userId, entVo.getName(), entVo.getLogo(),null,null);

		// 修改企業屬性
		updatePartyAttr(entVo, party);

		// 修改公司注册信息
		saveBaseInfo(entVo, entVo.getId());

	}

	/**
	 * 抽取方法修改企业属性信息
	 * 
	 * @param id
	 * @return EnterpriseVo,party
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void updatePartyAttr(EnterpriseVo entVo, Party party) {
		// 修改企业属性
		// 邓氏编码
		// 为了不多写方法所以用ExternalId代替attr_name,Description代替attr_value
/*		updateAttr(D_CODE, entVo.getdCode(), party);
		// 公司类型
		updateAttr(CORPORATION_CATEGORY_ID, entVo.getCorCategory(), party);

		// 所属行业
		updateAttr(INDUSTRY_CATEGORY_ID, entVo.getIndustryCategory(), party);
		// 公司官网
		updateAttr(WEBSITE_URL, entVo.getWebSite(), party);
		*/
		
		String userId = RequestHelper.getLoginUserId();
		// 公司类型
		if(!StringUtils.isEmpty(entVo.getCorCategory())){
			 PartyAttribute attrWeb = partyAttributeDao.getAttrByKey(party.getId(), CORPORATION_CATEGORY_ID);
				
				if (null != attrWeb) {
					// 插入公司官网
					 updateAttr(CORPORATION_CATEGORY_ID, entVo.getCorCategory(), party);
				} else {
					// 公司官网
					insertCer(CORPORATION_CATEGORY_ID, entVo.getCorCategory(), party, userId);
				}
		 }
		// 所属行业
		if(!StringUtils.isEmpty(entVo.getIndustryCategory())){
		   PartyAttribute attrWeb = partyAttributeDao.getAttrByKey(party.getId(), INDUSTRY_CATEGORY_ID);
			if (null != attrWeb) {
				updateAttr(INDUSTRY_CATEGORY_ID, entVo.getIndustryCategory(), party);
				// 插入公司官网
			} else {
				// 公司官网
				insertCer(INDUSTRY_CATEGORY_ID, entVo.getIndustryCategory(), party, userId);
			}
		}
		// 判断公司官网是否有插入值如果没插入就插入，插入了就修改
		if(!StringUtils.isEmpty(entVo.getWebSite())){
			PartyAttribute attrWeb = partyAttributeDao.getAttrByKey(party.getId(), WEBSITE_URL);
		
			if (null != attrWeb) {
				// 插入公司官网
				updateAttr(WEBSITE_URL, entVo.getWebSite(), party);
			} else {
				// 公司官网
				insertCer(WEBSITE_URL, entVo.getWebSite(), party, userId);
			}
		}
		// 判断邓氏编码是否有插入值如果没插入就插入，插入了就修改
		if(!StringUtils.isEmpty(entVo.getdCode())){
		PartyAttribute attrDCode = partyAttributeDao.getAttrByKey(party.getId(), D_CODE);
			if (null != attrDCode) {
				// 邓氏编码
				updateAttr(D_CODE, entVo.getdCode(), party);
			} else {
				// 邓氏编码
				insertCer(D_CODE, entVo.getdCode(), party, userId);
			}
		}
	
		// 如果原本是图片后来修改成pdf则需要新增pdf名字，否则修改pdf名字
		// 设置other值
		List<Map<String, String>> otherAttrs = entVo.getOtherAttrs();
		if (otherAttrs == null || otherAttrs.isEmpty()) {
			return;
		}
		PartyAttributes otherAttr;
		PartyAttribute other;
		// 循环得到key
		for (Map<String, String> map : otherAttrs) {
			Iterator<String> iterator = map.keySet().iterator();
			while (iterator.hasNext()) {
				String mapKey = iterator.next();
				otherAttr = new PartyAttributes();
				other = new PartyAttribute();
					PartyAttribute attrBusi = partyAttributeDao.getAttrByKey(party.getId(), INDUSTRY_CATEGORY_ID_OTHER);
					if (null != attrBusi) {
						party.setDescription(map.get(mapKey));
						party.setExternalId(mapKey);
						partyAttributeDao.updateEnterpriseAttribute(party);
					} else {
						other.setKey(mapKey);// 将map的key设置给partyAttribute的key
						other.setValue(map.get(mapKey));// 将map的value设置给partyAttribute的value
						otherAttr.setOtherAttrs(other);
						party.setPartyAttributes(otherAttr);
						partyAttributeDao.insertOtherAttrs(party);
					}
				
			}
		}
	}
    
	void updateAttr(String key, String value, Party party) {
		party.setExternalId(key);
		party.setDescription(value);
		partyAttributeDao.updateEnterpriseAttribute(party);
	}

	/**
	 * 修改资质信息
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2017年5月3日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	@Audit(action = "EntQualifications Modifyqqq;;;'#entVo.id'qqq;;;'#entVo.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void updateQualifications(EnterpriseVo entVo) {
		Party party = new Party();
		party.setId(entVo.getId());
		
		String userId = RequestHelper.getLoginUserId();
		// 修改认证备注
		updatePartyGroup(party, null, null, entVo.getComments(), userId, null, null,null,null);
		// 插入资质
		insertCertificate(entVo, userId, party);
	}

	/**
	 * 根据账号查询管理员信息
	 * 
	 * @param id
	 * @param role
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getAdmin(String id, String role) {
		UserVo userVo = new UserVo();
		if (!"admin".equals(role)) {
			return userVo;
		}
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList == null || relationshipList.isEmpty()) {
			return userVo;
		}
		partyRelationship = relationshipList.get(0);
		// 企业id
		String entId = partyRelationship.getPartyIdTo();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// 根据企业id查询企业名称
		Party party = partyDao.getPartyDetail(entId, PartyType.CORPORATION);
		if (party != null && party.getPartyGroup() != null) {
			String companyName = party.getPartyGroup().getGroupName();
			userVo.setCompanyName(companyName);
		}
		// 关联时间
		String relationDate = formatter.format(partyRelationship.getFromDate());
		userVo.setRelationDate(relationDate);
		// 根据企业id查询管理员id
		PartyRelationship partyRelationship1 = new PartyRelationship();
		partyRelationship1.setPartyIdTo(entId);
		partyRelationship1.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship1.setRoleTypeIdTo(RoleType.CORPORATION);
		relationshipList = relationshipDao.getPartyRelationship(partyRelationship1);
		if (relationshipList == null || relationshipList.isEmpty()) {
			return userVo;
		}
		String adminId = relationshipList.get(0).getPartyIdFrom();

		// 根据管理员id查询邮箱地址,名称
		Party party1 = partyDao.getPartyPersonDetail(adminId);

		if (party1 != null && party1.getPerson() != null) {
			userVo.setName(party1.getPerson().getLastNameLocal());
		}

		// 获取企业联系信息
		String email = userLoginDao.findUserLogin(adminId, EMAIL);
		userVo.setMail(email);

		return userVo;
	}

	/**
	 * 关联成功之后的回调函数 添加企业账号与子账户的关联关系
	 * 
	 * @param jsonObject
	 * @return
	 * @since 2017年1月22日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo addEnterPriserelation(JSONObject jsonObject) {
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		MsgResultVo vo = new MsgResultVo();
		vo.setCode(Constants.FAILED);
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			List<String> ids = new ArrayList<>();
			ids.add(enterpriseVo.getId());
			String mailAddr = "";
			Party partyMail = personDao.findPersonById(enterpriseVo.getId());
			if (null != partyMail && null != partyMail.getPerson()
					&& !StringUtils.isEmpty(partyMail.getPerson().getMail())) {
				mailAddr = partyMail.getPerson().getMail();
			}
			/*
			 * List<UserLogin> logins = userLoginDao.findUserBypartyid(ids); if
			 * (logins!=null && !logins.isEmpty()) { mailAddr =
			 * logins.get(0).getId(); }
			 */
			Party party = new Party();
			if (apply.getStatus() == ApplyStatus.REJECT) {
				// 驳回 修改状态为关联失败
				Person person = new Person();
				person.setRelationSratus(RelationSratus.REJECTED);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(enterpriseVo.getId());
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				party.setId(enterpriseVo.getId());
				party.setPerson(person);
				personDao.editPerson(party);
				// 发送邮件和站内信
				relactionFailedSendMailAndMessage(mailAddr, enterpriseVo, apply.getReason());
				vo.setCode(Constants.SUCCESS);
				return vo;
			} else if (apply.getStatus() == ApplyStatus.WAIT_APPROVE) {
				// 审核中 修改对应状态为审核中
				Person person = new Person();
				person.setRelationSratus(RelationSratus.WAIT_APPROVE);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(enterpriseVo.getId());
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				party.setId(enterpriseVo.getId());
				party.setPerson(person);
				personDao.editPerson(party);
				vo.setCode(Constants.SUCCESS);
				return vo;

			} else if (apply.getStatus() == ApplyStatus.APPROVED) {
				// 成功 修改状态为已关联且生成关联关系
				Person person = new Person();
				person.setRelationSratus(RelationSratus.RELATED);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(enterpriseVo.getId());
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				party.setId(enterpriseVo.getId());
				party.setPerson(person);
				personDao.editPerson(party);
				vo = this.savePartyRelationship(enterpriseVo);
				saveBaseInfo(enterpriseVo, enterpriseVo.getId());
				// 更新企业id
				Party party1 = new Party();
				party1.setId(enterpriseVo.getId());
				party1.setCorporationId(enterpriseVo.getRelationEnterpriseId());
				party1.setLastUpdateDate(new Date());
				party1.setLastUpdateUser(enterpriseVo.getId());
				partyDao.updateParty(party1);
				// 发送邮件和站内信
				relactionSuccessSendMailAndMessage(mailAddr, enterpriseVo);
				return vo;
			}
		}
		return vo;
	}

	/**
	 * 请求关联
	 * 
	 * @param id
	 * @param apply
	 * @return
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo editRelationStatus(String id, Apply apply) {
		String url = workflowUrlPrefix + "/v1/apply";
		String userId = RequestHelper.getLoginUserId();
		apply.setApplyOrgId(id);// 被关联的企业id
		apply.setApplyUserId(userId);
		apply.setCallBackUrl(partyServerUrlPrefix + "/v1/enterprises/relation");
		MsgResultVo vo = new MsgResultVo();
		try {
			HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
			ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
			};
			restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseEntity);

			Party party = new Party();
			Person person = new Person();
			person.setRelationSratus(RelationSratus.WAIT_APPROVE);
			person.setLastUpdateDate(new Date());
			person.setLastUpdateUser(userId);
			party.setId(userId);
			party.setPerson(person);
			personDao.editPerson(party);
			// 发送邮件和站内信
			requestTrlationsendMailAndMessage(id, apply);
			vo.setCode(Constants.SUCCESS);
			return vo;
		} catch (Exception e) {
			logger.error("调用workflow服务异常：{},服务地址：{}", e, url);
			vo.setCode(Constants.FAILED);
		}
		return vo;

	}

	/**
	 * 关联成功发送站内信和邮件
	 * 
	 * @param mailAddr
	 * @param companyName
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public void relactionSuccessSendMailAndMessage(String mailAddr, EnterpriseVo vo) {
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId("RELEVANCY_PASS");
			mailInfoVo.setType(EMAIL);
			mailInfoVo.setTo(mailAddr);
			JSONObject content = new JSONObject();
			content.put(COMPANYNAME, vo.getName());
			mailInfoVo.setContent(content);
			logger.error("关联成功发送邮件");
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
			PartyRelationship relationship = relationshipDao
					.findpartyIdByEnterpriseId(vo.getRelationEnterpriseId());
			if (relationship != null) {
				mailInfoVo.setFrom(relationship.getPartyIdFrom());
			}
			mailInfoVo.setType(INNERMAIL);
			mailInfoVo.setTo(vo.getId());
			logger.info("账户关联邮件参数：{}", JSONObject.toJSON(mailInfoVo).toString());
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("关联成功发送邮件异常：{}", e);
		}
	}

	/**
	 * 关联驳回发送邮件和站内信
	 * 
	 * @param mailAddr
	 * @param companyName
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public void relactionFailedSendMailAndMessage(String mailAddr, EnterpriseVo vo, String reson) {
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId("RELEVANCY_REJECT");
			mailInfoVo.setType(EMAIL);
			mailInfoVo.setTo(mailAddr);
			JSONObject content = new JSONObject();
			content.put(COMPANYNAME, vo.getName());
			String callbackUrl = customerServerUrlPrefix + "/enterprise.htm";
			content.put("url", callbackUrl);
			content.put("applyReason", reson);
			mailInfoVo.setContent(content);
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
			PartyRelationship relationship = relationshipDao
					.findpartyIdByEnterpriseId(vo.getRelationEnterpriseId());
			if (relationship != null) {
				mailInfoVo.setFrom(relationship.getPartyIdFrom());
			}
			mailInfoVo.setType(INNERMAIL);

			mailInfoVo.setTo(vo.getId());

			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("关联失败发送邮件异常：{}", e);
		}

	}

	/**
	 * 申请关联发送邮件和站内信
	 * 
	 * @param id
	 * @param apply
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public void requestTrlationsendMailAndMessage(String id, Apply apply) {
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdTo(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		// 查询要关联的企业的登录partyid
		List<PartyRelationship> partyRelationships = relationshipDao.getPartyRelationship(partyRelationship);
		List<String> ids = new ArrayList<>();
		ids.add(partyRelationships.get(0).getPartyIdFrom());
		List<UserLogin> logins = userLoginDao.findUserBypartyid(ids);
		if (logins != null && !logins.isEmpty()) {
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			try {
				// 调用发送邮件
				String partyId = RequestHelper.getLoginUserId();
				MailInfoVo mailInfoVo = new MailInfoVo();

				mailInfoVo.setTemplateId("JOIN_ACCOUNT");
				mailInfoVo.setType(EMAIL);
				mailInfoVo.setTo(logins.get(0).getId());
				mailInfoVo.setOperateUser(RequestHelper.getLoginUser().getUsername());
				mailInfoVo.setOperatorName(enterpriseVo.getContactUserName());
				JSONObject content = new JSONObject();
				content.put("operateUser", RequestHelper.getLoginUser().getUsername());
				content.put("operatorName", enterpriseVo.getContactUserName());
				content.put(COMPANYNAME, enterpriseVo.getName());
				content.put("applyReason", enterpriseVo.getReason());
				String callbackUrl = customerServerUrlPrefix + "/enterprise.htm";
				content.put("url", callbackUrl);
				mailInfoVo.setContent(content);
				logger.info("申请关联发送邮件，邮件参数：{}", JSONObject.toJSON(mailInfoVo));
				msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				// 发送站内信
				PartyRelationship relationship = relationshipDao
						.findpartyIdByEnterpriseId(enterpriseVo.getRelationEnterpriseId());
				if (relationship != null) {
					mailInfoVo.setTo(relationship.getPartyIdFrom());
				}
				mailInfoVo.setTemplateId("RELEVANCY_APPLY");
				mailInfoVo.setCc(RequestHelper.getLoginUser().getUsername());// 用抄送地址封装邮箱给消息使用
				mailInfoVo.setType(INNERMAIL);

				mailInfoVo.setFrom(partyId);
				msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
			} catch (Exception e) {
				logger.error("申请关联成功发送邮件异常：{}", e);
			}

		}

	}

	/**
	 * 保存企业关联关系
	 * 
	 * @param enterpriseVo
	 * @return
	 * @since 2017年2月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo savePartyRelationship(EnterpriseVo enterpriseVo) {
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(enterpriseVo.getId());
		partyRelationship.setPartyIdTo(enterpriseVo.getRelationEnterpriseId());
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		partyRelationship.setPartyRelationshipTypeId(PartyRelationshipType.EMPLOYMENT);
		partyRelationship.setStatusId(STATUS_ID);
		partyRelationship.setCreator(enterpriseVo.getRelationEnterpriseId());
		partyRelationship.setLastUpdateUser(enterpriseVo.getId());
		Date date = new Date();
		partyRelationship.setFromDate(date);
		partyRelationship.setCreatedDate(date);
		partyRelationship.setLastUpdateDate(date);
		int num = relationshipDao.insert(partyRelationship);
		MsgResultVo vo = new MsgResultVo();
		if (num > 0) {
			vo.setCode(Constants.SUCCESS);
		} else {
			vo.setCode(Constants.FAILED);
		}
		return vo;
	}


	/**
	 * 根据id更新状态
	 * 
	 * @param id
	 * @param status
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Audit(action = "User Modifyqqq;;;修改'#party.person.mail'账号状态为'#party.partyStatus'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void updateStatus(@Param("party") Party party) {
		partyDao.updateParty(party);
	}

	/**
	 * 根据用户的id判断是否为管理员
	 * 
	 * @param id
	 * @return
	 * @since 2017年2月7日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isAdmin(String id) {
		Boolean falg = false;
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			partyRelationship = relationshipList.get(0);
			String entId = partyRelationship.getPartyIdTo();
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if (party == null) {
				return falg;
			}
			if (party.getPartyGroup().getActiveStatus() != null && ActiveStatus.PARTY_VERIFIED.toString()
					.equals(party.getPartyGroup().getActiveStatus().toString())) {
				falg = true;
			} else {
				falg = false;
			}

		}
		return falg;
	}

	public Party getPartyGroupByEmployeeId(String employeeId) {
		PartyRelationship pr = new PartyRelationship();
		pr.setPartyIdFrom(employeeId);
		pr.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		pr.setRoleTypeIdTo(RoleType.CORPORATION);
		pr.setRelationshipName(PartyRelationship.PartyRelationshipType.EMPLOYMENT.name());
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(pr);
		// 这里排除一个员工受雇于多家公司的情况
		if (CollectionUtils.isNotEmpty(relationshipList)) {
			String partyGroupId = relationshipList.get(0).getPartyIdTo();
			return partyGroupManager.getPartyGroupByGroupId(partyGroupId);
		}
		return null;
	}

	/**
	 * 获取后台企业管理员列表
	 * 
	 * @param param
	 * @param rowBounds
	 * @return
	 * @since 2017年2月13日
	 * @author gongtianyu@yikuyi.com
	 */

	public PageInfo<EnterpriseVo> getEnterpriseList(EnterpriseParamVo param, RowBounds rowBounds) {
		return new PageInfo<>(partyDao.getEnterpriseList(param, rowBounds));
	}


	
	/**
	 * 根据用户的id判断是否为激活或者关联，返回true：已经激活或者关联，fail：未激活或者未关联
	 * 
	 * @param id
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String isActivedOrRelationed(String id) {
		// 没有激活
		String falg = NOTACTIVE;
		// 判断关联
		Party p = personDao.findPersonById(id);
		if (p != null && p.getPerson() != null && p.getPerson().getRelationSratus() != null
				&& Person.RelationSratus.RELATED.toString().equals(p.getPerson().getRelationSratus().toString())) {
			// 已关联
			falg = RELATED;
			return falg;
		}
		if (p != null && p.getPerson() != null && p.getPerson().getRelationSratus() != null) {
			// 关联中
			falg = RELATING;
			// 判断激活
			PartyRelationship partyRelationship = new PartyRelationship();
			partyRelationship.setPartyIdFrom(id);
			partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
			partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
			List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
			if (relationshipList != null && !relationshipList.isEmpty()) {
				// 激活中
				falg = ACTIVING;
				partyRelationship = relationshipList.get(0);
				String entId = partyRelationship.getPartyIdTo();
				Party party = partyGroupDao.findPartyGroupByPartyId(entId);
				if (party != null && party.getPartyGroup().getActiveStatus() != null && ActiveStatus.PARTY_VERIFIED
						.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
					// 已激活
					falg = ACTIVED;
					return falg;
				}
			}
			return falg;
		}
		// 判断激活
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			// 激活中
			falg = ACTIVING;
			partyRelationship = relationshipList.get(0);
			String entId = partyRelationship.getPartyIdTo();
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if (party != null && party.getPartyGroup().getActiveStatus() != null && ActiveStatus.PARTY_VERIFIED
					.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
				// 已激活
				falg = ACTIVED;
				return falg;
			}
		}
		Party party1 = partyDao.getPartyPersonDetail(id);
		if (null != party1) {
			String entId = party1.getCorporationId();// 获取企业Id
			if (!StringUtils.isEmpty(entId)) {
				Party party2 = partyDao.getPartyDetail(entId, PartyType.CORPORATION);
				if (null != party2 && null != party2.getPartyGroup() && null != party2.getPartyGroup().getActiveStatus()
						&& party2.getPartyGroup().getActiveStatus() == PartyGroup.ActiveStatus.REJECTED) {
					// 激活中
					falg = ACTIVING;
				}
			}

		}

		return falg;
	}

	/**
	 * 根据用户的id判断是否为首次激活或者关联
	 * 
	 * @return
	 * @since 2017年2月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isFristActive(String id) {
		Boolean falg = false;
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			return falg;
		}
		Party party = personDao.findPersonById(id);
		if (party != null && party.getPerson() != null && party.getPerson().getRelationSratus() != null) {
			return falg;
		}
		party = partyDao.getPartyPersonDetail(id);
		if (party != null && !StringUtils.isEmpty(party.getCorporationId())) {
			return falg;
		}
		falg = true;
		return falg;
	}

	/**
	 * 获取用户信息
	 * 
	 * @param id
	 * @return
	 * @since 2017年3月28日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getUser(String id) {
		return userLoginDao.getPerson(id);
	}

	/**
	 * 导出企业会员列表
	 * 
	 * @param vo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public void exportEnt(EnterpriseParamVo vo, HttpServletResponse response) throws IOException {
		// 查询数据
		List<EnterpriseVo> list = partyDao.getEntList(vo);
		response.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		response.addHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", "EnterpriseList.xls"));
		response.addHeader("Pragma", "no-cache");
		response.addHeader("Expires", "0");
		this.exportExcelXls(list, response.getOutputStream());
	}

	/**
	 * 导出企业会员数据
	 * 
	 * @param list
	 * @param os
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private void exportExcelXls(List<EnterpriseVo> list, OutputStream os) {
		ExportProcesser processer = null;
		try {
			processer = ExportFactory.getProcesser(ExportFactory.TYPE_XLS, os);
			// 标题
			processer.writeLine("Sheet1", EXPORT_TEMPLATE.split(","));
			List<List<String>> rowDataList;
			rowDataList = this.enterpriseDataList(list);
			for (List<String> rowData : rowDataList) {
				processer.writeLine("Sheet1", rowData);
			}
			processer.output();
		} catch (Exception e) {
			logger.error("Exception", e);
			throw new SystemException("exportExcelXls Exception", e);
		} finally {
			if (null != processer) {
				processer.close();
			}
		}

	}

	/**
	 * 重构数据
	 * 
	 * @param enterpriseVo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private List<List<String>> enterpriseDataList(List<EnterpriseVo> list) {
		List<List<String>> rowDataList = Lists.newArrayList();
		if (list == null || list.size() == 0) {
			return rowDataList;
		}
		List<String> rowData = null;
		List<Category> corCategoryList = this.getCategorys("CORPORATION_CATEGORY");
		Map<String, String> corMap = categoryToMap(corCategoryList);
		List<Category> industryCategoryList = this.getCategorys("INDUSTRY_CATEGORY");
		Map<String, String> industryMap = categoryToMap(industryCategoryList);
		for (EnterpriseVo enterpriseVo : list) {
			rowData = Lists.newArrayList();
			// 公司名称
			rowData.add(enterpriseVo.getName());
			// 公司类型
			String corCategory = getCategory(corMap, enterpriseVo.getCorCategory(), "CORPORATION_CATEGORY");
			rowData.add(corCategory);
			// 所属行业
			String industryCategory = getCategory(industryMap, enterpriseVo.getIndustryCategory(), "INDUSTRY_CATEGORY");
			if (!StringUtils.isEmpty(enterpriseVo.getOtherAttr())) {
				industryCategory = industryCategory + "(" + enterpriseVo.getOtherAttr() + ")";
			}
			rowData.add(industryCategory);
			// 公司官网
			rowData.add(enterpriseVo.getWebSite());
			// 公司简介
			rowData.add(enterpriseVo.getDescription());
			// 公司注册地
			rowData.add(enterpriseVo.getRegisteAddr());
			// 联系人
			rowData.add(enterpriseVo.getContactUserName());
			// 联系电话
			rowData.add(enterpriseVo.getContactUserTel());
			// 电子传真
			rowData.add(enterpriseVo.getFax());
			// QQ
			rowData.add(enterpriseVo.getContactUserQQ());
			// 详细地址
			rowData.add(enterpriseVo.getAddress());
			rowDataList.add(rowData);

		}
		return rowDataList;
	}

	/**
	 * 
	 * @param categoryStr
	 * @param category
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String getCategory(Map<String, String> map, String categoryStr, String category) {
		String cateStr = "";
		if (StringUtils.isEmpty(categoryStr)) {
			return cateStr;
		}
		if (map == null) {
			map = new HashMap<>();
		}
		String[] arrStr = categoryStr.split(",");
		for (String str : arrStr) {
			if (StringUtils.isEmpty(str)) {
				continue;
			}
			String value = map.get(str);
			if (StringUtils.isEmpty(value)) {
				cateStr = cateStr + "," + str;
			} else {
				cateStr = cateStr + "," + value;
			}

		}
		if (!StringUtils.isEmpty(cateStr)) {
			cateStr = cateStr.substring(1);
		}
		return cateStr;
	}

	/**
	 * 根据业务类型获取维度数据
	 * 
	 * @param category
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public List<Category> getCategorys(String category) {
		String url = serverUrl + "/v1/category/companylist?categoryTypeId=" + category;
		// String url =
		// "http://192.168.1.110:27081/v1/category/companylist?categoryTypeId="+category;
		ResponseEntity<List<Category>> response;
		List<Category> list = null;
		try {
			response = restTemplate.exchange(url, HttpMethod.GET, null,
					new ParameterizedTypeReference<List<Category>>() {
					});
			list = response.getBody();
		} catch (Exception e) {
			logger.error("调用查询业务类型失败:{}", e);
		}
		return list;
	}

	/**
	 * 业务类型转换map
	 * 
	 * @param list
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Map<String, String> categoryToMap(List<Category> list) {
		Map<String, String> map = new HashMap<String, String>();
		if (null == list || list.size() == 0) {
			return null;
		}
		for (Category category : list) {
			if (!StringUtils.isEmpty(category.getCategoryId())) {
				map.put(category.getCategoryId(), category.getCategoryName());
			}
		}
		return map;
	}

	/**
	 * 账户激活后企业修改审核成功保存数据
	 * 
	 * @param JSONObject
	 * @return void
	 * @since 2017年4月13日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void editEntApplySave(JSONObject jsonObject) {
		String userId = RequestHelper.getLoginUserId();// 当前申请修改的人
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		if (null == apply) {
			return;
		}
		// 获取内容
		String applyContent = apply.getApplyContent();
		// 把获取的内容转化为json格式
		JSONObject json = JSON.parseObject(applyContent);
		// 把jsonObject转化成对应的实体
		EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);

		String email = "";
		Party partyData = personDao.findPersonById(apply.getApplyUserId());
		if (null != partyData && null != partyData.getPerson() && !StringUtils.isEmpty(partyData.getPerson().getMail())) {
			email = partyData.getPerson().getMail();
		}
		// 驳回
		if (apply.getStatus() == ApplyStatus.REJECT) {
			Party partys = new Party();
			partys.setId(apply.getApplyOrgId());
			// 修改partyGrop的状态
			updatePartyGroup(partys, ActiveStatus.REJECTED, null, enterpriseVo.getComments(), userId, null, null,null,new Date());
			String urlMail = customerServerUrlPrefix + "/enterprise.htm";
			//用户姓名
			String cerName = getUserName(apply.getApplyUserId());
			// 查询认证部邮件
			commonMsg(MailInfoVo.TemplateId.ACTIVE_REJECT.toString(), MailInfoVo.Type.EMAIL.toString(),
					enterpriseVo.getMail(), urlMail, enterpriseVo.getName(), apply.getReason(),cerName);

			return;
		}
		// 审核成功
		if (null != enterpriseVo) {
			//修改partyGroup状态为审核通过
			Party partyObj = new Party();
			partyObj.setId(enterpriseVo.getId());
			updatePartyGroup(partyObj, ActiveStatus.PARTY_VERIFIED, null, null, userId,null, null,null,new Date());

			 //新增资质
			 insertCertificate(enterpriseVo, userId, partyObj);
			//新增企业
			// 根据企业id判断当前企业是否有生成过组织代码 ,一个企业只能插入一条数据
			//如果没有组织机构代码则根据公司名称查询  用户名，组织机构代码，key
			if(!StringUtils.isEmpty(enterpriseVo.getOccCode())){
				//如果有组织机构代码则按照名称和组织机构代码去查询
				List<EnterpriseVo> entList= partyAttributeDao.findPartyCodeList(enterpriseVo.getName(),enterpriseVo.getOccCode(),"ORG_CODE");
			    if(null == entList){
			    	newEnt(enterpriseVo);	
			    }
			}else{
				List<EnterpriseVo> entNameList= partyAttributeDao.findPartyCodeList(enterpriseVo.getName(),null,"ORG_CODE");
				if(null == entNameList){
					newEnt(enterpriseVo);	
				}
			}
			//用户姓名
			String cerName = getUserName(userId);
			commonMsg(MailInfoVo.TemplateId.ACTIVE_PASS.toString(), MailInfoVo.Type.EMAIL.toString(),
					email, null, enterpriseVo.getName(), null,cerName);
			sendInnerMail("ACTIVE_PASS", null, enterpriseVo);
		}

	}

	
	/**
	 * 后台企业用户会员管理3证修改审核
	 * 
	 * @param id
	 * @return Apply
	 * @since 2017年4月13日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	@Audit(action = "Enterprise Modifyqqq;;;'#apply.applyOrgId'qqq;;;'#apply.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void editEntApply(@Param("apply") Apply apply) {
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null != enterpriseVo) {
				String url = "";
				try {

					String userId = RequestHelper.getLoginUserId();// 当前申请修改的人
					// String id = enterpriseVo.getId();//企业id
					apply.setApplyOrgId(apply.getApplyOrgId());// 企业id
					apply.setApplyUserId(userId);
					// 修改企业信息
					Party party = new Party();
					party.setId(apply.getApplyOrgId());
					// 修改partyGroup状态
					updatePartyGroup(party, ActiveStatus.WAIT_APPROVE, null, enterpriseVo.getComments(), userId, null,
							null,new Date(),null);

					// 调用workFlow服务
					url = workflowUrlPrefix + "/v1/apply";
					System.out.println(new ObjectMapper().writeValueAsString(apply));
					HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
					ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
					};
					restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseEntity);
					try {
						String urlMail = operationUrl + "/verify.htm";
						// 获取申请的用户名
						//Party p = personDao.findPersonById(userId);
					/*	String applyName = "";
						if (null != p && null != p.getPerson()
								&& !StringUtils.isEmpty(p.getPerson().getLastNameLocal())) {
							applyName = p.getPerson().getLastNameLocal();
						}*/
						sendCerMail(urlMail, enterpriseVo.getName(),"资质","APPLY_ACTIVE");
						
					} catch (Exception e) {
						logger.error("后台企业会员管理修改审核发送激活邮件MQ出错:{}", e);
					}

				} catch (Exception e) {
					logger.error("后台企业会员管理修改审核调用workflow服务异常：{}", e.getMessage(), e);
				}
			}

		}

	}

	void updatePartyGroup(Party party, ActiveStatus status, AccountStatus accountStatus, String comments, String userId,
			String name, String logo,Date applyDate,Date approvedDate) {
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setActiveStatus(status);
		partyGroup.setAccountStatus(accountStatus);
		partyGroup.setLastUpdateUser(userId);
		partyGroup.setLastUpdateDate(new Date());
		partyGroup.setComments(comments);// 备注
		partyGroup.setGroupName(name);
		partyGroup.setLogoImageUrl(logo);
		partyGroup.setApplyDate(applyDate);
		partyGroup.setApprovedDate(approvedDate);
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);
	}

	/**
	 * 获取企业基本信息
	 * 
	 * @param partyId
	 * @return
	 * @since 2017年5月3日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public PartyGroup getEntBaseInfo(String partyId) {
		PartyGroup partyGroup = null;
		// 获取企业id
		String entId = partyDao.getPartyPersonDetail(partyId).getCorporationId();
		Party enterprise = partyDao.getPartyDetail(entId, PartyType.CORPORATION);
		if (null != enterprise) {
			partyGroup = enterprise.getPartyGroup();
		}
		return partyGroup;
	}

	/**
	 * 企业授权委托书审核接口
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2017年5月2日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void entAuthorize(JSONObject jsonObject) {
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		String userId = RequestHelper.getLoginUserId();
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null == enterpriseVo) {
				return;
			}
			Party party;
			// 驳回
			if (apply.getStatus() == ApplyStatus.REJECT) {
				party = new Party();
				party.setId(enterpriseVo.getId());
				// 修改party_group状态
				updatePartyGroup(party, null, AccountStatus.ACCOUNT_REJECTED, enterpriseVo.getComments(), userId, null,
						null,null,null);
				//同时修改认证企业的认证状态
				updateCerAccountStatus(apply.getApplyOrgId(),enterpriseVo.getComments(),AccountStatus.ACCOUNT_REJECTED);
				// 修改关联关系变为失效
				String urlMail = customerServerUrlPrefix + "/enterprise.htm";
				// 获取申请的用户名
				Party p = personDao.findPersonById(userId);
				String userName = "";
				if (null != p && null != p.getPerson()
						&& !StringUtils.isEmpty(p.getPerson().getLastNameLocal())) {
					userName = p.getPerson().getLastNameLocal();
				}
				
				accountApplySendMail("LICENSE_REJECT",urlMail,enterpriseVo.getName(),enterpriseVo.getMail(),userName);
				
			} else {
				// 审核成功
				party = new Party();
				party.setId(enterpriseVo.getId());
				// 修改partyGroup状态
				updatePartyGroup(party, null, AccountStatus.ACCOUNT_VERIFIED, enterpriseVo.getComments(), userId, null,
						null,null,new Date());

				 //新增资质
				 insertCertificate(enterpriseVo, userId, party);
				 
				// 插入关系表生成主账号
				saveRelationShip(apply.getApplyUserId(), enterpriseVo.getId(),0);

				// 插入角色表
				partyRoleDao.insert(apply.getApplyUserId(), RoleType.MAIN_ROLE.toString(), userId, new Date(), userId, new Date());
				//修改person表状态
				Party partyNew = new Party();
				Person person = new Person();
				partyNew.setId(apply.getApplyUserId());
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(userId);
				person.setPersonTypeStatus(PersonTypeStatus.MAIN);//生成主账号
				partyNew.setPerson(person);
				personDao.editPerson(partyNew);
				
				//同时修改认证企业的认证状态
				updateCerAccountStatus(apply.getApplyOrgId(),enterpriseVo.getComments(),AccountStatus.ACCOUNT_VERIFIED);
						
				String urlMail = operationUrl + "/verify.htm";
				// 获取申请的用户名
				Party p = personDao.findPersonById(userId);
				String userName = "";
				if (null != p && null != p.getPerson()
						&& !StringUtils.isEmpty(p.getPerson().getLastNameLocal())) {
					userName = p.getPerson().getLastNameLocal();
				}
				
				//发送邮件
				accountApplySendMail("LICENSE_PASS",urlMail,enterpriseVo.getName(),enterpriseVo.getMail(),userName);
				
			}
		}
	}
	void  updateCerAccountStatus(String id,String comments,AccountStatus status){
		String userId = RequestHelper.getLoginUserId();
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(id);//生成新的企业id
		relationShip.setRoleTypeIdFrom(RoleType.ENTERPRISE_CUST);
		relationShip.setRoleTypeIdTo(RoleType.VIP_ENTERPRISE);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
		List<PartyRelationship>  relationList= relationshipDao.getPartyRelationship(relationShip);
		PartyRelationship partyRelationship;
		if(CollectionUtils.isNotEmpty(relationList)){
			partyRelationship = relationList.get(0);
			//企业id
			String entId = partyRelationship.getPartyIdTo(); 
			if(!StringUtils.isEmpty(entId)){
				Party partyCer = new Party();
				partyCer.setId(entId);
				//修改认证后的子账号审核通过状态
				updatePartyGroup(partyCer, null, status, comments, userId, null,
						null,null,null);
			}
		}
	}

	void insertCer(String key, String value, Party party, String userId) {
		PartyAttributes loaAttrs = new PartyAttributes();
		PartyAttribute loaAttr = new PartyAttribute();
		loaAttr.setKey(key);
		loaAttr.setValue(value);
		loaAttr.setCreator(userId);
		loaAttr.setCreatedDate(new Date());
		loaAttrs.setLoa(loaAttr);
		party.setPartyAttributes(loaAttrs);
		partyAttributeDao.insertLoa(party);
	}

	/**
	 * 企业开通主账号
	 * 
	 * @param userId,id(剛生成party的企業id)
	 * @return String
	 * @since 2017年5月3日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	void saveRelationShip(String userId, String id,int type) {
		// 插入企业与注册用户的关联关系 主账号
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(userId);// 当前的登录用户partyId
		if(type ==1){
			//说明是个人申请企业
			relationShip.setRelationshipName("雇佣");
			relationShip.setRoleTypeIdFrom(RoleType.EMPLOYEE);
			relationShip.setPartyRelationshipTypeId(PartyRelationshipType.EMPLOYMENT);
			relationShip.setRoleTypeIdTo(RoleType.CORPORATION);
		}else if(type ==2){
			//vip企业
			relationShip.setRoleTypeIdFrom(RoleType.ENTERPRISE_CUST);
			relationShip.setRoleTypeIdTo(RoleType.VIP_ENTERPRISE);
			relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
			relationShip.setRelationshipName("认证企业");
			
		}else{
			relationShip.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
			relationShip.setPartyRelationshipTypeId(PartyRelationshipType.COS_PLAY);
			relationShip.setRelationshipName("职位代表");
			relationShip.setRoleTypeIdTo(RoleType.CORPORATION);
		}
		
		relationShip.setPartyIdTo(id);// 企业partyId
		relationShip.setStatusId(STATUS_ID);
		relationShip.setFromDate(new Date());
		relationShip.setThruDate(null);
		relationShip.setCreator(userId);
		relationShip.setCreatedDate(new Date());
		relationShip.setLastUpdateUser(userId);
		relationShip.setLastUpdateDate(new Date());
		// 主账号和员工关系 子账号
		relationshipDao.insert(relationShip);
	}
	

	/**
	 * 企业授权委托书审核申请
	 * 
	 * @param id
	 * @return Apply
	 * @since 2017年5月2日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void entApplyAuthorize(Apply apply) {
		// 主账号申请走审批流程
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null != enterpriseVo) {
				String url = "";
				try {
					String userId = RequestHelper.getLoginUserId();
					Party party = new Party();
					party.setId(enterpriseVo.getId());// 设置企业id
					// 修改partyGroup表设置为待审核状态
					updatePartyGroup(party, null, AccountStatus.ACCOUNT_WAIT_APPROVE, null, userId, null, null,new Date(),null);

					// 调用workFlow服务
					url = workflowUrlPrefix + "/v1/apply";
					HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
					ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
					};
					restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseEntity);
					try {
						String urlMail = operationUrl + "/verify.htm";
						
						sendCerMail(urlMail, enterpriseVo.getName(),"子账号管理功能","APPLY_LICENSE");
					} catch (Exception e) {
						logger.error("发送激活邮件MQ出错:{}", e);
					}

				} catch (Exception e) {
					logger.error("调用workflow服务异常：{}", e.getMessage(), e);
				}
			}

		}
	}
	
	void accountApplySendMail(String template,String urlMail,String name,String email,String cerName){
		
		MailInfoVo mailInfoVo = new MailInfoVo();
		JSONObject object = new JSONObject();
		object.put("cerName", cerName);// 用户名
		object.put("companyName", name);// 公司名称
		object.put("urlMail", urlMail);// 链接
		String logoPrefix = portalServerUrlPrefix;// portal项目前缀
		object.put("portalUrl", logoPrefix);// 公司logoUrl
		mailInfoVo.setTemplateId(template);
		mailInfoVo.setContent(object);
		mailInfoVo.setTo(email);
		mailInfoVo.setType(EMAIL);
		msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		
	}
	/**
	 * 失效账号
	 * 
	 * @param id
	 * @return
	 * @since 2017年5月10日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void invalidAccount(String id,String reason){
		//自己失效
		Party party = new Party();
		party.setId(id);
		//修改状态为失效
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setActiveStatus(ActiveStatus.INVALID);
		partyGroup.setComments(reason);
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);
		
		
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdTo(id);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.REPORTS_TO);
		List<PartyRelationship>  relationList= relationshipDao.getPartyRelationship(relationShip);
		if(CollectionUtils.isNotEmpty(relationList)){
			//子账号失效
			for(PartyRelationship partyRelationship:relationList){
				//子账号id
				String sonId = partyRelationship.getPartyIdFrom();
				party = new Party();
				party.setId(sonId);
				//修改状态为失效
				partyGroup = new PartyGroup();
				partyGroup.setActiveStatus(ActiveStatus.INVALID);
				partyGroup.setComments(reason);
				party.setPartyGroup(partyGroup);
				partyGroupDao.updatePartyGroup(party);
			}
		}
	}

	/**
	 * 查询失效的企业,并且发送邮件给认证员和客服
	 * 
	 * @since 2017年5月11日
	 * @author zr.shuzuo@yikuyi.com
	 */
	public void enterpriseDocumentsExpiredJob(){
		List<EnterpriseExpiredVo> list = partyDao.getEnterpriseDocumentsExpiredList();
		if(CollectionUtils.isEmpty(list)){
			return;
		}
		List<Party> partyList = personDao.findDataByRole(Arrays.asList("CUST_CERT_SPECIALIST","CUSTOMER_SERVICE"));
		if(CollectionUtils.isEmpty(partyList)){
			logger.error("认证和客户没有维护人员,请注意!");
			return;
		}
		StringBuilder tableStr = new StringBuilder();
		for(EnterpriseExpiredVo temp : list){
			tableStr.append("<td class='no_br'>").append(temp.getPartyCode()).append(TD_END_STR)
			.append(TD_START_STR).append(temp.getName()).append(TD_END_STR)
			.append(TD_START_STR).append(org.apache.commons.lang.StringUtils.isEmpty(temp.getOrgLimit()) ? temp.getHkEffectiveDate() : temp.getOrgLimit()).append(TD_END_STR);
		}
		for(Party tempVo : partyList){
			if(null == tempVo.getPerson() || org.apache.commons.lang.StringUtils.isEmpty(tempVo.getPerson().getMail())){
				continue;
			}
			MailInfoVo mailInfoVo = new MailInfoVo();
			JSONObject object = new JSONObject();
			object.put("tableValue", tableStr.toString());// 公司名称
			object.put("taskUrl", operationUrl+"/enterprise.htm?action=certificationEnt");// 链接
			object.put("toMail", tempVo.getPerson().getMail());
			object.put("portalUrl", portalServerUrlPrefix);// 公司logoUrl
			mailInfoVo.setTemplateId("DOCUMENT_EXPIRED");
			mailInfoVo.setContent(object);
			mailInfoVo.setTo(tempVo.getPerson().getMail());
			mailInfoVo.setType(EMAIL);
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		}
	}
	


}