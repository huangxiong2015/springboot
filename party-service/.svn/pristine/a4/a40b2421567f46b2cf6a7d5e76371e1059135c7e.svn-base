/*
 * Created: 2016年11月28日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2016 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.partygroup.bll;

import java.util.List;
import java.util.Set;

import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.yikuyi.party.contact.vo.MsgResultVo;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.group.model.PartyGroup.ActiveStatus;
import com.yikuyi.party.group.vo.PartyGroupVo;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.party.bll.PartyAttributeManager;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.person.model.Person.RelationSratus;
import com.yikuyi.party.role.model.RoleType;

@Service
@Transactional
public class PartyGroupManager {

	@Autowired
	private PartyGroupDao partyGroupDao;
	@Autowired
	private PartyRoleDao partyRoleDao;
	@Autowired
	private PartyRelationshipDao partyRelationshipDao;
	@Autowired
	private PersonDao personDao;
	
	
	@Autowired
	private PartyAttributeManager partyAttributeManager;

	
	/**
	 * 根据条件查找详细的party信息
	 * @author 张伟
	 * @param paramPartyGroup
	 * @return
	 */
	@Cacheable(value="partyGroupGetAllPartyGroupListCache", key="'getAllPartyGroupList.List[roleType:'+ #param.roleType+',status:'+ #param.status+',partyId:'+ #param.partyId+',groupName:'+ #param.groupName+',partyType:'+ #param.partyType+',partyIdFrom:'+ #param.partyIdFrom+',partyIdTo:'+ #param.partyIdTo+',roleTypeIdFrom:'+ #param.roleTypeIdFrom+',roleTypeIdTo:'+ #param.roleTypeIdTo+', offset:' + #rowBounds.offset + ', limit:' + #rowBounds.limit + ']'")
	public List<Party> getAllPartyGroupList(PartyGroupVo param,RowBounds rowBounds){
		 List<Party> list = partyGroupDao.getAllPartyGroupList(param,rowBounds);
		 for (Party party : list) {
			 PartyAttributes attr=new PartyAttributes(); 
			 //物流官网
			 List<PartyAttribute> urls=partyAttributeManager.getPartyAttributelist(party.getId(),null);
			 for (PartyAttribute partyAttribute : urls) {
				if("WEBSITE_URL".equals(partyAttribute.getKey())){//物流官网
					 attr.setWebSite(partyAttribute);
				}else if("IS_SHOW_NAME".equals(partyAttribute.getKey())){ //是否显示名称
					 attr.setIsShowName(partyAttribute);
				}
			}
			party.setPartyAttributes(attr);
		 }
		 return list;
	}
	
	/**
	 * 根据组织名称查找记录
	 * @author 张伟
	 * @param groupName
	 * @return
	 */
	public Party findPartyGroupByName(String groupName ){
		return partyGroupDao.findPartyGroupByName(groupName);
	}
	

	/**
	 * 根据partyGroupId获取party
	 * @param partyGroupId
	 * @return
	 */
	public Party getPartyGroupByGroupId(String partyGroupId) {
		return partyGroupDao.getPartyGroupByGroupId(partyGroupId);
	}
	
	/**
	 * @author 张伟
	 * @param partyId
	 * @return
	 */
	public MsgResultVo orderPermissions(String partyId) {
		MsgResultVo result = new MsgResultVo();
		//是否是管理员
		boolean isEnterpriseUser = false; 
		boolean isActiveStatus = false; 
		boolean isRelation = false;
		
		Set<String> partyRoles=partyRoleDao.findRoleByPartyId(partyId);
		if(null != partyRoles){
			for (String roles : partyRoles) {
				if("MAIN_ROLE".equals(roles)){
					isEnterpriseUser=true;
					break;
				}
			}
		}
		
		//是管理员
		if(isEnterpriseUser){
			PartyRelationship param=new PartyRelationship();
			param.setPartyIdFrom(partyId);
			param.setRoleTypeIdTo(RoleType.CORPORATION);
			List<PartyRelationship> partyRelationships =partyRelationshipDao.getPartyRelationship(param);
			String enterpriseUserId = ""; 
			for (PartyRelationship partyRelationship : partyRelationships) {
				RoleType roleTypeIdFrom =partyRelationship.getRoleTypeIdFrom();
				//找到当前当前人的企业账号
				if(null != roleTypeIdFrom && RoleType.MAIN_ROLE.equals(roleTypeIdFrom)){
					enterpriseUserId = partyRelationship.getPartyIdTo();
				}
			}
			//检查激活状态
			if(!StringUtils.isEmpty(enterpriseUserId)){
				Party enterpriseUser = partyGroupDao.findPartyGroupByPartyId(enterpriseUserId);
				if(null != enterpriseUser && null != enterpriseUser.getPartyGroup() && ActiveStatus.PARTY_VERIFIED.equals(enterpriseUser.getPartyGroup().getActiveStatus())){
					isActiveStatus=true;
				}
			}
			//检查关联状态
			Party person = personDao.findPersonById(partyId);
			if(null != person && null != person.getPerson() ){
				RelationSratus relationSratus = person.getPerson().getRelationSratus();
				//是否关联
				if(RelationSratus.RELATED.equals(relationSratus)){
					isRelation=true;
				}
			}
			
			//激活或者关联
			if(isActiveStatus || isRelation){
				result.setCode("10000");
				result.setValue("激活或者关联");
			}else{
				result.setCode("10002");
				result.setValue("未激活并且未关联");
			}
			return result;
		}else{
			result.setCode("10001");
			result.setValue("非企业用户");
			return result;
		}
	}
}