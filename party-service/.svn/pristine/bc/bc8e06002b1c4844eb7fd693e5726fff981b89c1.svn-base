/*
 * Created: 2016年11月28日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2016 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.vendors.bll;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ibatis.session.RowBounds;
import org.jasig.inspektr.audit.annotation.Audit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import com.framework.springboot.audit.Param;
import com.framework.springboot.utils.AuthorizationUtil;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.yikuyi.basedata.ShipmentClientBuilder;
import com.yikuyi.basedata.facility.model.Facility;
import com.yikuyi.news.model.News;
import com.yikuyi.party.common.utils.Constants;
import com.yikuyi.party.contact.vo.MsgResultVo;
import com.yikuyi.party.contact.vo.User;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.group.model.PartyGroup;
import com.yikuyi.party.group.vo.PartyGroupVo;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.bll.PartyAttributeManager;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.role.model.RoleTypeEnum;
import com.yikuyi.party.user.bll.UserManager;
import com.yikuyi.party.vo.FacilityVo;
import com.yikuyi.party.vo.SupplierVo;
import com.yikuyi.party.vo.VendorVo;
import com.yikuyi.product.ProductClientBuilder;
import com.yikuyi.transaction.TransactionClient;
import com.ykyframework.model.IdGen;


/**
 * 供应商管理
 * 
 * @author 张伟
 *
 */
@Service
@Transactional
public class VendorsManager {
	private static final Logger logger = LoggerFactory.getLogger(VendorsManager.class);
	
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private ShipmentClientBuilder shipmentClientBuilder;
	
	@Autowired
	private ProductClientBuilder productClientBuilder; 
	
	@Autowired
	private TransactionClient transactionClient;
	
	@Autowired
	private AuthorizationUtil authorizationUtil;
	
	@Value("${api.basedata.serverUrlPrefix}")
	private String basedataServerUrlPrefix;
	
	@Value("${api.product.serverUrlPrefix}")
	private String productServerUrlPrefix;
	
	@Value("${api.transaction.serverUrlPrefix}")
	private String transactionServerUrlPrefix;
	
	@Autowired
	private UserManager userManager;
	
	@Autowired
	private PartyDao partyDao;

	@Autowired
	private PartyRoleDao partyRoleDao;

	@Autowired
	private PartyGroupDao partyGroupDao;

	@Autowired
	private PartyRelationshipDao partyRelationshipDao;

	@Autowired
	private PartyAttributeDao partyAttributeDao;
	
	
	@Autowired
	private PartyAttributeManager partyAttributeManager;
	
	private static final String IS_SHOW_NAME = "IS_SHOW_NAME";
	
	private static final String IS_SUP_PRICE = "IS_SUP_PRICE";
	
	/**
	 * 查找所有供应商信息
	 * 
	 * @author 张伟
	 * @return
	 */
	public PageInfo<Party> getPartyList(PartyGroupVo param,RowBounds rowBounds) {
		
		List<Party> partylist= partyGroupDao.getAllPartyGroupList(param,rowBounds);
		List<String> vendorIdList = partylist.stream().map(Party::getId).collect(Collectors.toList());
		List<News> newsList = this.getNewsByVnedorId(vendorIdList);
		Map<String, News> newsMap = newsList.stream().collect(Collectors.toMap(News::getNewsId,Function.identity()));
		for (Party party : partylist) {
			String ownerPartyId =party.getId();
			PartyAttributes partyAttributes =new PartyAttributes();
			//如果存在key 则设置显示
			if (newsMap.containsKey(ownerPartyId)) {
				partyAttributes.setIsVendorDetail("Y");
			}
			List<PartyAttribute> partyAttributelist =partyAttributeManager.getPartyAttributelist(ownerPartyId, IS_SHOW_NAME);
			if (CollectionUtils.isNotEmpty(partyAttributelist)) {
				partyAttributes.setIsShowName(partyAttributelist.get(0));
			}
			party.setPartyAttributes(partyAttributes);
			//查找每个供应商的仓库
			List<Facility> facilitylist= this.getFacilityByPartyId(ownerPartyId);
			PartyGroup partyGroup =party.getPartyGroup();
			if(null == partyGroup){
				partyGroup=new PartyGroup();
				partyGroup.setFacilitylist(facilitylist);
				party.setPartyGroup(partyGroup);
			}else{
				party.getPartyGroup().setFacilitylist(facilitylist);
			}
		}
		return new PageInfo<>(partylist);
	}
	
	public List<News> getNewsByVnedorId(List<String> list){
		News news = new News();
		news.setNewsIds(list);
		news.setStatus("PUBLISHED");
		news.setCategoryTypeId("VENDOR");
		String url = productServerUrlPrefix + "/v1/news/newsbatch";
		logger.info("供应商调用查询分销商服务：{}",url);
		List<News> newsList = new ArrayList<News>();
		try {
			newsList = productClientBuilder.newsResource().newsBatch(news);
		} catch (Exception e) {
			logger.error("供应商调用查询分销商服务异常：{}，服务地址：{}",e,url);
		}
		
		return newsList;
		
	}

	/**
	 * 获取单个供应商信息
	 */
	public Party getPartyByPartyId(String id,String partyId) {
		PartyGroupVo param=new PartyGroupVo();
		param.setPartyId(id);
		param.setPartyIdFrom(partyId);
		List<Party> partylist= partyGroupDao.getAllPartyGroupList(param,RowBounds.DEFAULT);
		if(null != partylist && partylist.size() == 1){
			
			Party party=partylist.get(0);
			
			String ownerPartyId =party.getId();
			//是否显示供应商名称
			List<PartyAttribute> partyAttributelist =partyAttributeManager.getPartyAttributelist(ownerPartyId, IS_SHOW_NAME);
			if (CollectionUtils.isNotEmpty(partyAttributelist)) {
				PartyAttributes partyAttributes =new PartyAttributes();
				partyAttributes.setIsShowName(partyAttributelist.get(0));
				party.setPartyAttributes(partyAttributes);
			}
			
			//查找每个供应商的仓库
			List<Facility> facilitylist= this.getFacilityByPartyId(ownerPartyId);
			PartyGroup partyGroup =party.getPartyGroup();
			if(null == partyGroup){
				partyGroup=new PartyGroup();
				partyGroup.setFacilitylist(facilitylist);
				party.setPartyGroup(partyGroup);
			}else{
				party.getPartyGroup().setFacilitylist(facilitylist);
			}
			return party;
		}
		return null;
	}
	
	public Party getVendorDetail(String id) {
		Party party = partyGroupDao.getVendorDetail(id);
		if (party!=null) {
			//是否显示供应商名称
			String ownerPartyId =party.getId();
			List<PartyAttribute> partyAttributelist =partyAttributeManager.getPartyAttributelist(ownerPartyId, IS_SHOW_NAME);
			//是否支持价格策略 Y(显示),N(不显示)
			List<PartyAttribute> partyAttributelist1 =partyAttributeManager.getPartyAttributelist(ownerPartyId, IS_SUP_PRICE);
			if (CollectionUtils.isNotEmpty(partyAttributelist)) {
				PartyAttributes partyAttributes =new PartyAttributes();
				partyAttributes.setIsShowName(partyAttributelist.get(0));
				if(CollectionUtils.isNotEmpty(partyAttributelist1)){
					partyAttributes.setIsSupPrice(partyAttributelist1.get(0));
				}
				party.setPartyAttributes(partyAttributes);
			}
			//查找每个供应商的仓库
			List<Facility> facilitylist= this.getFacilityByPartyId(ownerPartyId);
			PartyGroup partyGroup =party.getPartyGroup();
			if(null == partyGroup){
				partyGroup=new PartyGroup();
				partyGroup.setFacilitylist(facilitylist);
				party.setPartyGroup(partyGroup);
			}else{
				party.getPartyGroup().setFacilitylist(facilitylist);
			}
			return party;
		}
		return new Party();
	}

	/**
	 * 保存供应商信息
	 */
	@Audit(action = "Vendor Modifyqqq;;;新增了'#vendorVo.vendorName'供应商", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public Party save(@Param("vendorVo") VendorVo vendorVo,String partyId) {
		
		Party party=new Party();
		party.setId(vendorVo.getVendorId());
		party.setPartyCode(vendorVo.getCode());
		party.setPartyType(PartyType.SUPPLIER);
		party.setPartyStatus(PartyStatus.PARTY_ENABLED);
		party.setCreator(partyId);
		party.setCreatedDate(new Date());
		party.setLastUpdateUser(partyId);
		party.setLastUpdateDate(new Date());
		partyDao.insert(party);
		PartyAttributes partyAttributes=new PartyAttributes();
		PartyAttribute isShowName=new PartyAttribute();
		Long attrId = IdGen.getInstance().nextId();
		isShowName.setAttrId(attrId.toString());
		isShowName.setKey(IS_SHOW_NAME);
		isShowName.setValue(vendorVo.getIsShowName());
		isShowName.setCreator(partyId);
		isShowName.setCreatedDate(new Date());
		isShowName.setLastUpdateUser(partyId);
		isShowName.setLastUpdateDate(new Date());
        partyAttributes.setIsShowName(isShowName);
        //添加属性
		party.setPartyAttributes(partyAttributes);
    	partyAttributeDao.insertIsShowName(party);
    	
    	//添加属性  是否支持价格策略
    	PartyAttribute isSupPrice=new PartyAttribute();
    	isSupPrice.setAttrId(attrId.toString());
		isSupPrice.setKey(IS_SUP_PRICE);
		isSupPrice.setValue(vendorVo.getSupPrice());
		isSupPrice.setCreator(partyId);
		isSupPrice.setCreatedDate(new Date());
		isSupPrice.setLastUpdateUser(partyId);
		isSupPrice.setLastUpdateDate(new Date());
        partyAttributes.setIsShowName(isSupPrice);
        //添加属性
		party.setPartyAttributes(partyAttributes);
    	partyAttributeDao.insertIsShowName(party);
		//供应商信息
		PartyGroup partyGroup=new PartyGroup();
		partyGroup.setGroupName(vendorVo.getVendorName());
		partyGroup.setGroupNameFull(vendorVo.getVendorNameFull());
		partyGroup.setLogoImageUrl(vendorVo.getLogoUrl());
		partyGroup.setLogoImageUrlSmall(vendorVo.getLogoUrl());
		partyGroup.setCreator(partyId);
		partyGroup.setCreatedDate(new Date());
		partyGroup.setLastUpdateUser(partyId);
		partyGroup.setLastUpdateDate(new Date());
		party.setPartyGroup(partyGroup);
		partyGroupDao.insert(party);
		partyRoleDao.insert(party.getId(),RoleTypeEnum.SUPPLIER.toString(),partyId,new Date(),partyId,new Date());
		
		List<FacilityVo> facilityVolist = vendorVo.getItem();
		
		if(CollectionUtils.isNotEmpty(facilityVolist)){
			//仓库列表
			List<Facility> facilitylist=new ArrayList<>();
			for (FacilityVo facilityVo : facilityVolist) {
			    Facility facility=new Facility();
		        facility.setFacilityName(facilityVo.getName());
		        facility.setOwnerPartyId(vendorVo.getVendorId());
		        facility = this.saveFacility(facility);
				facilitylist.add(facility);
			}
			// 保存供应商仓库的信息		
			partyGroup.setFacilitylist(facilitylist);
		}
		
		party.setPartyGroup(partyGroup);
		//用户拥有的角色类型
		/*List<RoleType> roleTypeList=new ArrayList<>();
		roleTypeList.add(RoleType.BUYER);
		roleTypeList.add(RoleType.AGENT);
		party.setRoleTypeList(roleTypeList);
		
		List<PartyStatusHis>partyStatusHisList=new ArrayList<>();
		PartyStatusHis partyStatusHis=new PartyStatusHis();
		Long partyStatusId= IdGen.getInstance().nextId();
		partyStatusHis.setId(partyStatusId.toString());
		partyStatusHisList.add(partyStatusHis);
		party.setPartyStatusHisList(partyStatusHisList);*/
		
		//当前人创建了那个供应商
		PartyRelationship pls1=new PartyRelationship();
		pls1.setPartyIdFrom(partyId);
		pls1.setPartyIdTo(party.getId());
		pls1.setRoleTypeIdFrom(RoleTypeEnum.OPERATION_REP.toString());
		pls1.setRoleTypeIdTo(RoleTypeEnum.SUPPLIER.toString());
		pls1.setPartyRelationshipTypeId(PartyRelationshipType.DEVELOPMENT_BY);
		pls1.setRelationshipName("开发");
		pls1.setCreator(partyId);
		pls1.setCreatedDate(new Date());
		pls1.setLastUpdateUser(partyId);
		pls1.setLastUpdateDate(new Date());
		pls1.setFromDate(new Date());
		partyRelationshipDao.insert(pls1);
		//供应商为哪个公司供货
		PartyRelationship pls2=new PartyRelationship();
		
		User user= getUser(partyId);
		pls2.setPartyIdFrom(party.getId());
		pls2.setPartyIdTo(user.getEnterpriseId());
		pls2.setRoleTypeIdFrom(RoleTypeEnum.SUPPLIER.toString());
		pls2.setRoleTypeIdTo(RoleTypeEnum.OPERATION_REP.toString());
		pls2.setPartyRelationshipTypeId(PartyRelationshipType.SUPPLIER_REL);
		pls2.setRelationshipName("授权");
		pls2.setCreator(partyId);
		pls2.setCreatedDate(new Date());
		pls2.setLastUpdateUser(partyId);
		pls2.setLastUpdateDate(new Date());
		pls2.setFromDate(new Date());
		partyRelationshipDao.insert(pls2);
		
		return party;
	}

	/**
	 * 根据id修改供应商信息
	 */
	@Audit(action = "Vendor Modifyqqq;;;编辑了'#vendorVo.vendorName'供应商", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public Party update(@Param("vendorVo")VendorVo vendorVo,String partyId) {
		Party party=new Party();
		try {
			party.setId(vendorVo.getVendorId());
			party.setPartyCode(vendorVo.getCode());
			
			partyDao.updateParty(party);
			
			PartyAttributes partyAttributes=new PartyAttributes();
			PartyAttribute isShowName=new PartyAttribute();		
			//更新是否显示供应商名称
			isShowName.setKey(IS_SHOW_NAME);
			isShowName.setValue(vendorVo.getIsShowName());
			partyAttributes.setIsShowName(isShowName);
			//添加属性
			party.setPartyAttributes(partyAttributes);
			partyAttributeDao.updateIsShowName(party);
			
			//更新是否支持价格策略
			isShowName.setKey(IS_SUP_PRICE);
			isShowName.setValue(vendorVo.getSupPrice());
			partyAttributes.setIsShowName(isShowName);
			//添加属性
			party.setPartyAttributes(partyAttributes);
			int num = partyAttributeDao.updateIsSupPrice(party);
			if(num == 0){
				//添加属性  是否支持价格策略
		    	PartyAttribute isSupPrice=new PartyAttribute();		    	
				isSupPrice.setKey(IS_SUP_PRICE);
				isSupPrice.setValue(vendorVo.getSupPrice());
				isSupPrice.setCreator(partyId);
				isSupPrice.setCreatedDate(new Date());
				isSupPrice.setLastUpdateUser(partyId);
				isSupPrice.setLastUpdateDate(new Date());
		        partyAttributes.setIsShowName(isSupPrice);
		        //添加属性
				party.setPartyAttributes(partyAttributes);
		    	partyAttributeDao.insertIsShowName(party);
				
			}
			
			//供应商信息
			PartyGroup partyGroup=new PartyGroup();
			partyGroup.setGroupName(vendorVo.getVendorName());
			partyGroup.setGroupNameFull(vendorVo.getVendorNameFull());
			partyGroup.setLogoImageUrl(vendorVo.getLogoUrl());
			partyGroup.setLogoImageUrlSmall(vendorVo.getLogoUrl());
			partyGroup.setLastUpdateUser(partyId);
			partyGroup.setLastUpdateDate(new Date());
			party.setPartyGroup(partyGroup);
			//更新partyGroup
			partyGroupDao.updatePartyGroup(party);			
			
			List<Facility> facilitylist=new ArrayList<>();
			//修改数据
			//new
			List<FacilityVo> facilityVolist = vendorVo.getItem();
			//history 当前供应商的历史仓库
			List<Facility> historyfacilitylist= this.getFacilityByPartyId(party.getId());
			
			for (Facility facility : historyfacilitylist) {
				String historyId = facility.getId();
				boolean exists = false;
				for (FacilityVo facilityVo : facilityVolist) {
					String newId = facilityVo.getId();
					//历史当前用户历史仓库，和 前端传个过来的供应商ID比较
					if(historyId.equals(newId)){//有找到对应的仓库ID需要修改根据仓库ID修改仓库名称
						facility.setFacilityName(facilityVo.getName());
						this.updateFacility(historyId, facility);
						facilitylist.add(facility);
						exists = true;
					}
				}
				if(!exists){
					this.delFacilityById(historyId);
				}
			}
			//新增数据
			for (FacilityVo facilityVo : facilityVolist) {
				if(StringUtils.isEmpty(facilityVo.getId()) ){
				    //保存供应商
				    Facility facility=new Facility();
			        facility.setFacilityName(facilityVo.getName());
			        facility.setOwnerPartyId(party.getId());
			        facility = this.saveFacility(facility);
			        facilitylist.add(facility);
				}
			}
			party.setPartyGroup(partyGroup);
			return party;
		} catch (Exception e) {
			logger.error("更新供应商信息："+e);
			return null;
		}
		
	}

	/**
	 * 删除当前人的供应商信息
	 * @author 张伟
	 * @param ids 供应商ID
	 * @param partyId 当前登录人
	 */
	public void delete(List<String> ids,String partyId) {
		for (String id : ids) {
			  Party party=new Party();
			  party.setId(id);
			  party.setPartyStatus(PartyStatus.PARTY_DISABLED);//停用party
			  party.setCreator(partyId);
			  party.setLastUpdateDate(new Date());
			  party.setLastUpdateUser(partyId);
	          partyDao.updateParty(party);
	          //删除供应商对应的仓库
	          this.delFacilityByPartyId(id);
	          
		}
	}
	
	/**
	 * 保存供应商的仓库信息
	 * @author 张伟
	 * @param facility
	 * @return
	 */
	public Facility saveFacility(Facility facility){
		 Facility fatyInfo = null;
		try {
			fatyInfo =  shipmentClientBuilder.facilityResource().addFacility(facility, authorizationUtil.getLoginAuthorization());
		} catch (Exception e) {
			logger.error("保存供应商仓库信息异常：{}",e);
		}
		return fatyInfo;
		
	}
	
	/**
	 * 根据仓库ID修改仓库信息
	 * @param id
	 * @param vo
	 * @return
	 */
	private void  updateFacility(String id ,Facility vo){
		//商品信息调用
		try {
			String url = basedataServerUrlPrefix + "/v1/facility/"+id;
			logger.info("根据仓库ID修改仓库信息：" + url);
			shipmentClientBuilder.facilityResource().upFacilityById(id, vo, authorizationUtil.getLoginAuthorization());
		} catch (Exception e) {
			logger.error("根据仓库ID修改仓库信息异常：{}",e);
		}
	}
	
	/**
	 * 根据用户ID获取用户信息
	 * @author 张伟
	 * @param userId
	 * @return
	 */
	public User getUser(String userId){
	  return  userManager.getUserInfo(userId);
	}
	
	/**
	 * 根据供应商ID查找对应的仓库信息
	 * @author 张伟
	 * @param ownerPartyId
	 * @return
	 */
	public List<Facility> getFacilityByPartyId(String ownerPartyId) {
		List<Facility> facilityList = new ArrayList<Facility>();
		try {
			facilityList = shipmentClientBuilder.facilityResource().getFacilityList(ownerPartyId);
			return facilityList;
		} catch (Exception e) {
			logger.error("根据供应商ID查找对应的仓库信息异常：{}",e);
		}
		return facilityList;
		
	}
	
	/**
	 * 根据partyID删除供应商的仓库
	 * @author 张伟
	 * @param ownerPartyId
	 * @return
	 */
	public void delFacilityByPartyId(String ownerPartyId) {
		try {
			shipmentClientBuilder.facilityResource().delFacilityByPartyId(ownerPartyId, authorizationUtil.getLoginAuthorization());
		} catch (Exception e) {
			logger.error("根据partyID删除供应商的仓库异常：{}",e);
		}
	}
	
	/**
	 * 根据仓库id删除仓库
	 * @param Id
	 * @return
	 */
	public void delFacilityById(String id) {
		shipmentClientBuilder.facilityResource().delFacilityById(id, authorizationUtil.getLoginAuthorization());
	}
	
	
	/**
	 * 查询供应商是否存在关联的未完成订单
	 * @author 张伟
	 * @param vendorId
	 * @return
	 */
	public String getVendorHasUncompletedOrder(String vendorId) {
		try {
			ResponseEntity<String> response = restTemplate.exchange(transactionServerUrlPrefix + "/v1/orders/vendorHasUncompletedOrder?vendor="+vendorId,
					HttpMethod.GET, null, new ParameterizedTypeReference<String>() {
					});
			return response.getBody();
		} catch (Exception e) {
			logger.info("关联的未完成订单异常：{}",e);
			return "error";
		}
		
	}
	/**
	 * 保存分享关系
	 * @param id
	 * @param userIds
	 * @since 2017年3月21日
	 * @author tb.yumu@yikuyi.com
	 */
//	@Audit(action = "Vendor Modifyqqq;;;'#id'qqq;;;授权'#userVo.name'供应商'#userVo.companyName'权限", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public MsgResultVo saveSupplierShare(@Param(value="id")String id,@Param(value="userVo")UserVo userVo){
		MsgResultVo vo = new MsgResultVo();
			try {
				//先过期掉之前的分配
				PartyRelationship relationship = new PartyRelationship();
				relationship.setPartyIdTo(id);
				relationship.setPartyRelationshipTypeId(PartyRelationshipType.AGENT);
				relationship.setRelationshipName("代理");
				relationship.setThruDate(new Date());
				partyRelationshipDao.updateRelationShip(relationship);	
				//重新进行分配
				
				
				if (!StringUtils.isEmpty(userVo.getId())) {
					String[] ids = userVo.getId().split(",");
					PartyRelationship record;
					for (String strId : ids) {
						record = new PartyRelationship();
						record.setPartyIdFrom(strId);
						record.setPartyIdTo(id);
						record.setRoleTypeIdFrom(RoleTypeEnum.OPERATION_REP.toString());
						record.setRoleTypeIdTo(RoleTypeEnum.SUPPLIER.toString());
						record.setFromDate(new Date());
						record.setPartyRelationshipTypeId(PartyRelationshipType.AGENT);
						record.setRelationshipName("代理");
						String userId = RequestHelper.getLoginUserId();
						record.setCreator(userId);
						record.setLastUpdateUser(userId);
						record.setCreatedDate(new Date());
						record.setLastUpdateDate(new Date());
						partyRelationshipDao.insert(record);
					}
				}
				vo.setCode(Constants.SUCCESS);
				
			} catch (Exception e) {
				logger.error("新增分配异常：{}",e);
				vo.setCode(Constants.FAILED);
			}
			return vo;
	}
	
	/**
	 * 查询供应商待分配关系
	 * @return
	 * @since 2017年3月21日
	 * @author tb.yumu@yikuyi.com
	 */
	public List<PartyRelationship> findSupplierShare(String id){
		return partyRelationshipDao.getAgentByPartyfromTo(id, PartyRelationshipType.AGENT.toString());
	}
	
	/**
	 * 获取供应商列表
	 * @param partyId
	 * @param page
	 * @param size
	 * @return
	 * @since 2017年3月30日
	 * @author tb.yumu@yikuyi.com
	 */
	public PageInfo<SupplierVo> getVendorList(String partyId ,int page,int size){
		RowBounds rowBounds = new RowBounds((page-1)*size, size);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getUserRelationship(partyId);
		List<SupplierVo> vendorVoList;
		//如果是部门主管，则查询个人创建，代理，及下属创建的供应商，否则，则只查询自己创建，代理的供应商
		if (!relationshipList.isEmpty()&& relationshipList.get(0).getPartyRelationshipTypeId()==PartyRelationshipType.EXECUTIVE_DEPT_REL) {
			vendorVoList = partyGroupDao.getVendorList(partyId, rowBounds);
		}else {
			vendorVoList = partyGroupDao.getMyVendorList(partyId, rowBounds);
		}
		for (SupplierVo supplierVo : vendorVoList) {
			String id = supplierVo.getId();
			//查询是否显示name
			List<PartyAttribute> partyAttributelist =partyAttributeManager.getPartyAttributelist(id, IS_SHOW_NAME);
			if (null != partyAttributelist && !partyAttributelist.isEmpty()) {
				supplierVo.setIsShowName(partyAttributelist.get(0).getValue());
			}
			
			//是否支持价格策略 
			List<PartyAttribute> partyAttributelist1 =partyAttributeManager.getPartyAttributelist(id, IS_SUP_PRICE);
			if (null != partyAttributelist1 && !partyAttributelist1.isEmpty()) {
				supplierVo.setIsSupPrice(partyAttributelist1.get(0).getValue());
			}
			//获取供应商对应的仓库
			List<Facility> facilitylist= this.getFacilityByPartyId(id);
			if(CollectionUtils.isNotEmpty(facilitylist)){
				supplierVo.setVendorWarehouseList(facilitylist.stream().map(Facility::getFacilityName).collect(Collectors.toList()));
			}
		}
		PageInfo<SupplierVo> infoList = new PageInfo<>(vendorVoList);
		infoList.setPageSize(size);
		infoList.setPageNum(page);
		return infoList;
	}
	
	
	/**
	 * 查找供应商是否有商品
	 * @author 张伟
	 * @param partNum
	 * @return
	 */
	public String isHasProduct(String vendorId) {
		try {
			boolean boolProduct = productClientBuilder.productResource().isHasProduct(vendorId, authorizationUtil.getLoginAuthorization());
			if(boolProduct){
				return "true";
			}else{
				return "error";
			}
		} catch (Exception e) {
			logger.info("查找供应商是否有商品异常：{}",e);
			return "error";
		}
		
	}
	
	/**
	 * 获取HttpHeaders
	 * @return
	 * @since 2016年12月18日
	 * @author tb.yumu@yikuyi.com
	 */
	private HttpHeaders getHttpHeaders(){
		HttpHeaders headers = new HttpHeaders();
		MediaType type = MediaType.parseMediaType("application/json; charset=UTF-8");
		headers.setContentType(type);
		headers.add("Accept", MediaType.APPLICATION_JSON.toString());
		return headers ;
	}
	

}
