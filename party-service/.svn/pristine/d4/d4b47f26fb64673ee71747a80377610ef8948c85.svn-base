package com.yikuyi.party.userlogin.api.impl;

import java.io.IOException;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.util.Base64Utils;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.yikuyi.party.PartyApplication;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.login.model.UserLogin;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT, classes = { PartyApplication.class })
public class UserLoginResourceTest {
	
	@Autowired
	private TestRestTemplate restTemplate; // = new TestRestTemplate();	
	
	@LocalServerPort
	private int port;
	
	private String host;
	
	
	@Before
	public void setUpBefore() throws Exception {
		this.host = "http://localhost" + ":" + this.port;
		
		RestTemplate rt = this.restTemplate.getRestTemplate();
		MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
		ObjectMapper om = new ObjectMapper();
		om.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
		converter.setObjectMapper(om);
		rt.setMessageConverters(Arrays.asList(new HttpMessageConverter[]{converter}));
		rt.setRequestFactory(new SimpleClientHttpRequestFactory() {
			@Override
        	public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {
        		ClientHttpRequest request = super.createRequest(uri, httpMethod);
        		HttpHeaders header = request.getHeaders();
        		header.add("Authorization", "Basic " + Base64Utils.encodeToString(("admin"+":"+"9999999901").getBytes()));
        		return request;
        	}
		});
	}
	
	@Test
	public void isExistTest(){
		String url = host+"/v1/account/bWFsYW4=";
		ResponseEntity<Boolean> r = restTemplate.exchange(url, HttpMethod.GET, null, Boolean.class);
		System.out.println(r.getBody());
	}
	
	@Test
	public void getAccountTest(){
		String url = host+"/v1/account/mail?account=10000@qq.com";
		restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<Boolean>(){});
	}
	
	@Test
	public void initPassWordTest(){
		String url = host+"v1/account/malan";
		UserVo userVo = new UserVo();
		userVo.setMail("malan");
		userVo.setPassword("123456");
		HttpEntity<UserVo> entity = new HttpEntity<UserVo>(userVo);
		restTemplate.exchange(url, HttpMethod.PUT, entity, new ParameterizedTypeReference<UserVo>(){});
	}
	
	@Test
	public void getAccountByIdTest(){
		String url = host+"v1/account/id?account=malan";
		restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<UserLogin>(){});
	}
	
	@Test
	public void getAccountByIdAndTypeTest(){
		String url = host+"v1/account/user?id='709035037445586944'&type='LOGIN_NAME'";
		restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<String>(){});
	}

}
