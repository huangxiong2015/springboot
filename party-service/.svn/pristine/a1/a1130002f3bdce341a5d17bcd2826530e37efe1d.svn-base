/*
 * Created: 2017年1月12日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.customer.bll;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSONObject;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.ictrade.tools.export.ExportFactory;
import com.ictrade.tools.export.ExportProcesser;
import com.yikuyi.message.mail.vo.MailInfoVo;
import com.yikuyi.party.contact.model.ContactMech;
import com.yikuyi.party.contact.model.PostalAddress;
import com.yikuyi.party.contact.model.TelecomNumber;
import com.yikuyi.party.contact.model.TelecomNumber.MobileTelecomNumber;
import com.yikuyi.party.contact.model.TelecomNumber.PhoneTelecomNumber;
import com.yikuyi.party.contact.vo.EnterpriseParamVo;
import com.yikuyi.party.contact.vo.EnterpriseVo;
import com.yikuyi.party.contact.vo.UserExtendVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.login.model.UserLogin;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyContactMech;
import com.yikuyi.party.model.PartyContactMech.PurposeType;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.paymentInvoice.PartyInvoiceSettings;
import com.yikuyi.party.person.model.Person;
import com.yikuyi.party.person.model.Person.RelationSratus;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.shipAddress.bll.PartyContactMechManager;
import com.yikuyi.party.shipAddress.dao.PartyContactMechDao;
import com.yikuyi.party.userLogin.dao.UserLoginDao;
import com.ykyframework.exception.SystemException;
import com.ykyframework.mqservice.sender.MsgSender;

@Service
@Transactional
public class CustomerManager {
	private static final Logger logger = LoggerFactory.getLogger(CustomerManager.class);
	@Autowired
	private PartyContactMechManager partyContactMechManager;
	
	@Autowired
	private PersonDao personDao;
	
	@Autowired
	private UserLoginDao userLoginDao;
	
	@Autowired
	private PartyRoleDao partyRoleDao;
	@Autowired
	private PartyContactMechDao partyContactMechDao;
	
	@Autowired
	private PartyRelationshipDao partyRelationshipDao;
	@Autowired
	private PartyAttributeDao partyAttributeDao;
	@Autowired
	private PartyDao partyDao;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Value("${api.pay.serverUrlPrefix}")
	private String serverUrl;
	@Autowired
	private MsgSender msgSender;

	@Value("${mqConsumeConfig.sendMsgAndEmail.topicName}")
	private String sendMsgAndEmailTopicName;
	@Autowired
	private PartyGroupDao partyGroupDao;
	
	private static final String EXPORT_TEMPLATE = "注册手机,邮箱,联系人,会员状态,详细地址";
	
	/**
	 * 获取个人基本信息详情
	 * @param id
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public UserExtendVo getBaseInfoDetail(String id , String loginId) {
		UserExtendVo user = new UserExtendVo();
		String partyId = id;
	    //判断是企业还是个人 //如果userType为1为个人，否则为企业
		Integer userType = partyRoleDao.findRoleByIdCount(partyId);
		user.setUserType(userType);
		if (userType==0) {
			user.setMail(RequestHelper.getLoginUser().getUsername());
		}else if(userType==1){
			user.setMobile(RequestHelper.getLoginUser().getUsername());
		}
		
		//调用服务获取个人信息
		List<PartyContactMech> partyContactMechList =	partyContactMechManager.selectPartyContactMechByType(PurposeType.REGISTER_LOCATION,partyId,null);
		PartyContactMech partyContactMech;
		if(null !=partyContactMechList && !partyContactMechList.isEmpty()){
			partyContactMech =  partyContactMechList.get(0);
			//获取基本信息
			user = getContactMech(partyId, user, partyContactMech);
		}
		//获取登录信息
		if (!StringUtils.isEmpty(loginId)) {
			UserLogin login = userLoginDao.findEntityById(loginId);
			Party party = partyDao.getPartyDetail(partyId, null);
			user.setRegTime(login.getCreatedDate());
			user.setMobile(login.getId());
			user.setPartyId(partyId);
			user.setStatus(party.getPartyStatus());
			user.setLastLoginTime(login.getLastUpdateDate());
			user.setLoginCount(login.getSucceedLogins()==null?0:login.getSucceedLogins());
		}
		return user;
	}

	/**
	 * 获取个人基本信息抽取方法
	 * @param id
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private UserExtendVo getContactMech(String partyId, UserExtendVo user, PartyContactMech partyContactMech) {
		if (null == partyContactMech || null == partyContactMech.getContactMech()
				|| null == partyContactMech.getContactMech().getId()) {
			return user;
		}
		// 邮箱
		user.setMail(partyContactMech.getContactMech().getEmail());

		// 地址信息
		PostalAddress postalAddress = partyContactMech.getContactMech().getPostalAddress();
		if (null != postalAddress) {
			user.setAddress(postalAddress.getAddress1());
			user.setProvince(postalAddress.getProvinceGeoId());
			user.setProvinceName(postalAddress.getProvinceGeoName());
			user.setCity(postalAddress.getCityGeoId());
			user.setCityName(postalAddress.getCityGeoName());
			user.setCountry(postalAddress.getCountyGeoId());
			user.setCountryName(postalAddress.getCountyGeoName());
			user.setPostcode(postalAddress.getPostalCode());
		}

		// 电话信息
		TelecomNumber telecomNumber = partyContactMech.getContactMech().getTelecomNumber();
		if (null != telecomNumber) {
			// 获取固定手机号码
			PhoneTelecomNumber tel = telecomNumber.getPhoneTelecomNumber();
			if (null != tel) {
				user.setTelNumber(tel.getContactNumber());
			}
		}

		// 获取个人基本信息的姓名，性别
		Party party = personDao.findPersonById(partyId);
		if (null != party && null != party.getPerson()) {
			// 设置姓名、性别的值
			user.setSex(String.valueOf(party.getPerson().getGender()));
			user.setName(party.getPerson().getLastNameLocal());
		}
		return user;
	}
	
	
	/**
	 * 保存个人基本信息
	 * @param UserExtendVo
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void save(UserExtendVo userInfoVo) {
	    if(null !=userInfoVo){
			PartyContactMech partyContactMech = new PartyContactMech();
			partyContactMech.setPurposeType(PurposeType.REGISTER_LOCATION);
			ContactMech contactMech = new ContactMech();
			PostalAddress postalAddress = new PostalAddress();
			postalAddress.setAddress1(userInfoVo.getAddress());
			postalAddress.setPostalCode(userInfoVo.getPostcode());
			postalAddress.setCountryGeoName("中国");
			postalAddress.setCountryGeoId("china");
			
			postalAddress.setProvinceGeoName(userInfoVo.getProvinceName());
			postalAddress.setProvinceGeoId(userInfoVo.getProvince());
			
			postalAddress.setCountyGeoName(userInfoVo.getCountryName());
			postalAddress.setCountyGeoId(userInfoVo.getCountry());
			
			postalAddress.setCityGeoName(userInfoVo.getCityName());
			postalAddress.setCityGeoId(userInfoVo.getCity());
			
			contactMech.setPostalAddress(postalAddress);
			
			//企业
			contactMech.setEmail(userInfoVo.getMail());
			//电话信息
			TelecomNumber telecomNumber = new TelecomNumber();
			//设置手机信息
			MobileTelecomNumber mobile = new MobileTelecomNumber();
			mobile.setContactNumber(userInfoVo.getMobile());
			mobile.setAskForName(userInfoVo.getName());
			telecomNumber.setMobileTelecomNumber(mobile);
		
			//设置固定电话
			PhoneTelecomNumber tel = new PhoneTelecomNumber();
			tel.setContactNumber(userInfoVo.getTelNumber());
			tel.setAskForName(userInfoVo.getName());
			telecomNumber.setPhoneTelecomNumber(tel);
			contactMech.setTelecomNumber(telecomNumber);
			 // 当前登录用户
		    String partyId = RequestHelper.getLoginUserId();
		    if (!StringUtils.isEmpty(userInfoVo.getPartyId())) {
		    	partyId = userInfoVo.getPartyId();
		    	partyContactMech.setPartyId(userInfoVo.getPartyId());
			}
			partyContactMech.setContactMech(contactMech);
			partyContactMechManager.insert(partyContactMech);
			
			Party party =personDao.findPersonById(partyId);
			//因为在数据查询不能穿vo需传实体，所以重新给party设置值
			Party partyNew = new Party();
			Person person = new Person();
			if(!StringUtils.isEmpty(userInfoVo.getSex())&&!"null".equals(userInfoVo.getSex())){
				person.setGender(Integer.valueOf(userInfoVo.getSex()));
			}
			person.setLastNameLocal(userInfoVo.getName());
		
			//修改或者插入到个人表中
			if(null != party){
				partyNew.setId(partyId);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(partyId);
				person.setMail(userInfoVo.getMail());
				partyNew.setPerson(person);
				personDao.editPerson(partyNew);
			}
			if (userInfoVo.getStatus()!=null) {
				Party party2 = new Party();
				party2.setPartyStatus(userInfoVo.getStatus());
				party2.setId(partyId);
				party2.setLastUpdateDate(new Date());
				party2.setLastUpdateUser(RequestHelper.getLoginUserId());
				partyDao.updateParty(party2);
			}
	    }
	}

	/**
	 * 获取登陆人资料完整度信息
	 * @return
	 * @since 2017年2月9日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserExtendVo getInfoLevel(String partyId) {
		UserExtendVo userExtendVo = new UserExtendVo();
		//地址
		Map<String, String> param = new HashMap<>();

		param.put("partyId", partyId);
		param.put("addressType", PurposeType.SHIPPING_LOCATION.toString());
		List<PartyContactMech> addrList = partyContactMechDao.selectPartyContactMechByType(param);

		if(CollectionUtils.isNotEmpty(addrList)){
			userExtendVo.setAddressLevel("Y");
		}else{
			userExtendVo.setAddressLevel("N");
		}
		//发票
		String url = serverUrl + "/v1/invoices?partyId="+partyId;
		ResponseEntity<PartyInvoiceSettings> response;
		try{
			response = restTemplate.exchange(url, HttpMethod.GET, null, PartyInvoiceSettings.class);
			PartyInvoiceSettings partyInvoiceSettings = response.getBody();
			if(partyInvoiceSettings == null){
				userExtendVo.setInvoiceLevel("N");
			}else{
				userExtendVo.setInvoiceLevel("Y");
			}
		}catch(Exception e){
			userExtendVo.setInvoiceLevel("N");
			logger.error("调用查询发票失败:{}",e);
		}
		//企业信息
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(partyId);
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if(CollectionUtils.isNotEmpty(relationshipList)){
			partyRelationship = relationshipList.get(0);
			//企业id
			String entId = partyRelationship.getPartyIdTo();
			List<PartyAttribute> attrList = partyAttributeDao.getPartAttribute(entId);
			if (CollectionUtils.isNotEmpty(attrList)) {
				String isComplete = "NOT-COMPLETE";
				for (int i = 0; i < attrList.size(); i++) {
					PartyAttribute partyAttribute = attrList.get(i);
					// 公司信息完善度
					if ("INFO_LEVEL".equals(partyAttribute.getKey())) {
						isComplete = partyAttribute.getValue();
						break;
					}
				}
				if("COMPLETE".equals(isComplete)){
					userExtendVo.setInfoLevel("Y");
				}else{
					userExtendVo.setInfoLevel("N");
				}
			}
		}else{
			userExtendVo.setInfoLevel("N");
		}
		
		return userExtendVo;
	}
	
	
	/**
	 * 
	 * @param phone
	 * @param mail
	 * @param name
	 * @param status
	 * @param registerStart
	 * @param registerEnd
	 * @param lastLoginStart
	 * @param lastLoginEnd
	 * @param page
	 * @param size
	 * @param rowBounds
	 * @return
	 * @since 2017年3月4日
	 * @author guowenyao@yikuyi.com
	 */
	@Cacheable(value="allUserInfoCache",key="'adminFindCustomerUser.Page[phone:' + #phone+ ', mail:' + #mail +'name:' + #name+'status:'+#status+'registerStart:'+#registerStart+'registerEnd:'+#registerEnd+'lastLoginStart:'+#lastLoginStart+'lastLoginEnd:'+#lastLoginEnd+'page:'+#page+'size:'+#size")
	public PageInfo<UserExtendVo> findCustomerUser(String phone,String mail,String name,String status,String registerStart,String registerEnd,String lastLoginStart,String lastLoginEnd,int page,int size){
		RowBounds rowBouds = new RowBounds((page-1)*size, size);
		List<UserLogin> userLoginList = userLoginDao.findCustomerUser(phone, mail, name, status, registerStart, registerEnd, lastLoginStart, lastLoginEnd,rowBouds);
		PageInfo<UserLogin> userLoginPageInfo =  new PageInfo<>(userLoginList);
		List<UserExtendVo> userExtendVoList = new ArrayList<>();
		PageInfo<UserExtendVo> userExtendVopageInfo = new PageInfo<>();
		for (UserLogin login : userLoginPageInfo.getList()) {
			UserExtendVo vo = new UserExtendVo();
			vo.setId(login.getId());
			vo.setRegTime(login.getCreatedDate());
			vo.setLastLoginTime(login.getLastUpdateDate());
			Party party = login.getParty();
			//姓名
			if (party != null) {
				setUserExtendFromPary(vo,party);
			}
			userExtendVoList.add(vo);
		}
		userExtendVopageInfo.setPageSize(size);
		userExtendVopageInfo.setPageNum(page);
		userExtendVopageInfo.setTotal(userLoginPageInfo.getTotal());
		userExtendVopageInfo.setList(userExtendVoList);
		return userExtendVopageInfo;
	}
	
	/**
	 * 将party的值复制给UserExtendVO前端扁平化处理
	 * @param userExtendVo
	 * @param party
	 * @return
	 * @since 2017年3月4日
	 * @author guowenyao@yikuyi.com
	 */
	public UserExtendVo setUserExtendFromPary(UserExtendVo vo,Party party){
		vo.setPartyId(party.getId());
		vo.setStatus(party.getPartyStatus());
		List<PartyContactMech> contactMechList = party.getPartyContactMechs();
		Person person = party.getPerson();
		if (person!=null) {
			vo.setName(person.getLastNameLocal());
		}
		if (!CollectionUtils.isEmpty(contactMechList)) {
			ContactMech contactMech = contactMechList.get(0).getContactMech();
			if (contactMech != null) {
				vo.setMail(contactMech.getEmail());
				PostalAddress postalAddress = contactMech.getPostalAddress();
				if (postalAddress != null) {
					vo.setPostcode(postalAddress.getPostalCode());
				}
				TelecomNumber	telecomNumber = contactMech.getTelecomNumber();
				//固定电话
				if (telecomNumber != null) {
					PhoneTelecomNumber phoneTelecomNumber = telecomNumber.getPhoneTelecomNumber();
					vo.setTelNumber(phoneTelecomNumber.getContactNumber());
					
				}
			}
		}
		return vo;
	}

	/**
	 * 更新用户信息
	 * @param userInfoVo
	 * @since 2017年2月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public void update(UserExtendVo userInfoVo) {
		String partyId = userInfoVo.getId();
		Party party = new Party();
		party.setId(partyId);
		Person person = new Person();
		person.setLogoImageUrl(userInfoVo.getLogoUrl());
		person.setLogoImageUrlSmall(userInfoVo.getLogoUrl());
		person.setLastUpdateDate(new Date());
		person.setLastUpdateUser(partyId);
		party.setPerson(person);
		personDao.editPerson(party);
	}
	/**
	 * 根据状态查询用户
	 * @param relationSratus
	 * @return
	 * @since 2017年2月15日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public List<UserVo> getPersons(RelationSratus relationSratus,String partyId) {
		List<UserVo> list = new ArrayList<>();
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(partyId);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> shipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if(CollectionUtils.isNotEmpty(shipList)){
			partyRelationship = shipList.get(0);
			Party party = new Party();
			party.setId(partyId);
			party.setCorporationId(partyRelationship.getPartyIdTo());
			Person person = new Person();
			person.setRelationSratus(relationSratus);
			party.setPerson(person);
			list = personDao.getPersons(party);
		}
		return list;
	}

	/**
	 * 根据用户Id更新用户状态信息
	 * @param id
	 * @since 2017年2月15日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public void updateById(String id, RelationSratus relationSratus,String login) {
		Party party = new Party();
		party.setId(id);
		Person person = new Person();
		person.setRelationSratus(relationSratus);
		person.setLastUpdateDate(new Date());
		person.setLastUpdateUser(login);
		party.setPerson(person);
		personDao.editPerson(party);
		if((RelationSratus.NOT_RELATED).equals(relationSratus)){
			party.setPartyStatus(PartyStatus.PARTY_DISABLED);
			partyDao.updateParty(party);
			//发送邮件
			sendMail(id,login);
		}
		if((RelationSratus.RELATED).equals(relationSratus)){
			party.setPartyStatus(PartyStatus.PARTY_ENABLED);
			partyDao.updateParty(party);
		}
	}

	public void sendMail(String id, String login) {
		//查询邮箱
		String email = userLoginDao.findUserLogin(id,"EMAIL");
		String loginEmail = userLoginDao.findUserLogin(login,"EMAIL");
		//查询关联企业
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(login);
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		String entName ="";
		if(CollectionUtils.isNotEmpty(relationshipList)){
			partyRelationship = relationshipList.get(0);
			//企业id
			String entId = partyRelationship.getPartyIdTo();
			
			if(!StringUtils.isEmpty(entId)){
				Party party = partyGroupDao.findPartyGroupByPartyId(entId);
				if(party != null && party.getPartyGroup() != null){
					entName = party.getPartyGroup().getGroupName();
				}
			}
			
		}
		 MailInfoVo mailInfoVo = new MailInfoVo();
		  mailInfoVo.setTemplateId(MailInfoVo.TemplateId.RELIEVE_RELEVANCY.toString());
		  mailInfoVo.setType(MailInfoVo.Type.EMAIL.toString());
		  mailInfoVo.setTo(email);
		  mailInfoVo.setOperateUser(loginEmail);
		  JSONObject content = new JSONObject();
		  content.put("companyName", entName);
		  content.put("operateUser", loginEmail);
		  mailInfoVo.setContent(content);

		  msgSender.sendMsg(sendMsgAndEmailTopicName,mailInfoVo, null);
	}

	/**
	 * 根据用户名称查询用户列表
	 * @param username
	 * @return
	 * @since 2017年2月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public List<UserVo> getUserByName(String username) {
		Party party = new Party();
		Person person = new Person();
		person.setLastNameLocal(username);
		party.setPerson(person);
		return personDao.getUser(party);
	}

	/**
	 * 根据用户名称精确查询用户列表
	 * @param username
	 * @return
	 * @since 2017年2月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getUsersByName(String name) {
		Party party = new Party();
		Person person = new Person();
		person.setLastNameLocal(name);
		party.setPerson(person);
		return personDao.getUsers(party);
	}
	
	public Person findPersonInfoByPartyId(String userId){
		Party party = personDao.getPersonByUserId(userId);
		if (party!=null) {
			return party.getPerson();
		}
		return new Person();
	}
	
	public UserLogin getUserLoginByPartyid(String partyId){
		List<UserLogin> loginList = userLoginDao.findUserPassword(partyId);
		if (CollectionUtils.isNotEmpty(loginList)) {
			return loginList.get(0);
		}
		return new UserLogin();
	}
	/**
	 * 导出个人会员列表
	 * @param vo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 * @throws IOException 
	 */
	public void exportUser(EnterpriseParamVo vo, HttpServletResponse response) throws IOException {
		// 查询数据
		List<UserVo> list = personDao.getUserList(vo);
		response.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");  
   	    response.addHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", "UserList.xls"));  
 		response.addHeader("Pragma", "no-cache");  
 		response.addHeader("Expires", "0"); 
 		this.exportExcelXls(list, response.getOutputStream());
		
	}
	/**
	 * 导出企业会员数据
	 * @param list
	 * @param os
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private void exportExcelXls(List<UserVo> list, OutputStream os) {
		ExportProcesser  processer = null;
		try{
        	processer = ExportFactory.getProcesser(ExportFactory.TYPE_XLS, os);
        	//标题
            processer.writeLine("Sheet1", EXPORT_TEMPLATE.split(","));
            List<List<String>> rowDataList;
        	rowDataList = this.userDataList(list);
        	for(List<String> rowData:rowDataList){
            	processer.writeLine("Sheet1", rowData);
        	}
        	processer.output();
		} catch (Exception e) {
			logger.error("Exception",e);
			throw new SystemException("exportExcelXls Exception",e);
		} finally {
			if(null!=processer){
				processer.close();
			}
		}
		
	}
	/**
	 * 重构数据
	 * @param UserVo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private List<List<String>> userDataList(List<UserVo> list) {
		List<List<String>> rowDataList = Lists.newArrayList();
		if(list == null || list.size()==0){
			return rowDataList;
		}
		List<String> rowData = null;
		for(UserVo userVo:list){
			rowData = Lists.newArrayList();
			//注册手机
			rowData.add(userVo.getMobile());
			//邮箱
			rowData.add(userVo.getMail());
			//联系人
			rowData.add(userVo.getName());
			//会员状态
			rowData.add(userVo.getStatusId());
			//详细地址
			rowData.add(userVo.getAddress());
			rowDataList.add(rowData);
			
		}
		return rowDataList;
	}
}