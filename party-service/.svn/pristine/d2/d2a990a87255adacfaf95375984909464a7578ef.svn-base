/*
 * Created: 2017年1月19日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.enterprise.bll;

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ibatis.session.RowBounds;
import org.jasig.inspektr.audit.annotation.Audit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.framework.springboot.audit.Param;
import com.framework.springboot.utils.AuthorizationUtil;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.ictrade.tools.export.ExportFactory;
import com.ictrade.tools.export.ExportProcesser;
import com.yikuyi.basedata.ShipmentClientBuilder;
import com.yikuyi.basedata.category.model.Category;
import com.yikuyi.message.mail.vo.MailInfoVo;
import com.yikuyi.party.common.utils.PartyAttributeConstants;
import com.yikuyi.party.contact.model.ContactMech;
import com.yikuyi.party.contact.model.ContactMech.MechType;
import com.yikuyi.party.contact.model.PostalAddress;
import com.yikuyi.party.contact.model.TelecomNumber;
import com.yikuyi.party.contact.model.TelecomNumber.QqTelecomNumber;
import com.yikuyi.party.contact.vo.EnterpriseParamVo;
import com.yikuyi.party.contact.vo.EnterpriseVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.group.model.PartyGroup;
import com.yikuyi.party.group.model.PartyGroup.AccountStatus;
import com.yikuyi.party.group.model.PartyGroup.ActiveStatus;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.model.PartyContactMech;
import com.yikuyi.party.model.PartyContactMech.PurposeType;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.person.model.Person;
import com.yikuyi.party.person.model.Person.PersonTypeStatus;
import com.yikuyi.party.role.model.RoleTypeEnum;
import com.yikuyi.party.shipAddress.bll.PartyContactMechManager;
import com.yikuyi.party.userLogin.dao.UserLoginDao;
import com.yikuyi.party.vo.EnterpriseExpiredVo;
import com.yikuyi.workflow.Apply;
import com.yikuyi.workflow.Apply.ApplyStatus;
import com.yikuyi.workflow.WorkflowClient;
import com.ykyframework.exception.SystemException;
import com.ykyframework.model.IdGen;
import com.ykyframework.mqservice.sender.MsgSender;
import com.ykyframework.oss.AliyunOSSAccount;
import com.ykyframework.oss.AliyunOSSHelper;

@Service
@Transactional
public class EnterpriseManager {
	private static final Logger logger = LoggerFactory.getLogger(EnterpriseManager.class);
	@Autowired
	private PartyDao partyDao;

	@Autowired
	private PartyAttributeDao partyAttributeDao;

	@Autowired
	private PartyContactMechManager partyContactMechManager;

	@Autowired
	private PartyGroupDao partyGroupDao;

	@Autowired
	private PartyRoleDao partyRoleDao;

	@Autowired
	private PersonDao personDao;

	@Autowired
	private UserLoginDao userLoginDao;

	private static final String STATUS_ID = "ENABLE";
	
	public static final String YKY_ENTERPRISE_ID = "99999999";//YKY 企业ID

	private static final String TD_END_STR = "</td>";// td结束符号
	private static final String TD_START_STR = "<td>";// td开始符号



	private static final String NOTACTIVE = "notActive";// 申请账户未激活或者关联

	private static final String RELATING = "relating";// 申请账户关联审核中或者驳回中
	private static final String ACTIVING = "activing";// 申请账户激活审核中或者驳回中

	private static final String RELATED = "related";// 申请账户关联审核通过
	private static final String ACTIVED = "actived";// 申请账户激活审核通过

	private static final String EMAIL = "EMAIL";// 邮件类型
	private static final String INNERMAIL = "INNERMAIL";// 站内信

	private static final String COMPANYNAME = "companyName";// 公司名称

	private static final String APPLYREASON = "applyReason";// 驳回原因

	private static final String EXPORT_TEMPLATE = "公司名称,公司类型,所属行业,公司官网,公司简介,公司注册地,联系人,联系电话,电子传真,QQ,详细地址";
	@Autowired
	private PartyRelationshipDao relationshipDao;

	private static final String VERIFYURL = "/verify.htm";//发送邮件链接
	
	// workflow 27090 前缀
	@Value("${api.workflow.serverUrlPrefix}")
	private String workflowUrlPrefix;

	// party 前缀
	@Value("${api.party.serverUrlPrefix}")
	private String partyServerUrlPrefix;

	// customer
	@Value("${customer.serverUrlPrefix}")
	private String customerServerUrlPrefix;

	public static final ObjectMapper mapper = new ObjectMapper();

	@Autowired
	private MsgSender msgSender;

	@Value("${mqConsumeConfig.sendMsgAndEmail.topicName}")
	private String sendMsgAndEmailTopicName;

	// 项目前缀
	@Value("${operation.serverUrlPrefix}")
	private String operationUrl;

	@Autowired
	@Qualifier(value = "aliyun.oss.account")
	private AliyunOSSAccount aliyunOSSAccount;

	// portal
	@Value("${portal.serverUrlPrefix}")
	private String portalServerUrlPrefix;

	@Value("${api.basedata.serverUrlPrefix}")
	private String serverUrl;

	@Autowired
	private AuthorizationUtil authorizationUtil;
	
	@Autowired
	private WorkflowClient workflowClient;
	
	@Autowired
	private ShipmentClientBuilder shipmentClientBuilder;

	/**
	 * 根据保存的Url获取原图、缩略图
	 * 
	 * @param imgUrl
	 * @return
	 * @since 2016年6月15日
	 * @author zr.xuheng@yikuyi.com
	 */
	public Map<String, String> getImgUrlMap(String imgUrl) {
		Map<String, String> map = new HashMap<>();
		if (!StringUtils.isEmpty(imgUrl)) {
			map = AliyunOSSHelper.getImageUrl(aliyunOSSAccount, imgUrl, 1000L, "UTF-8");
			if (imgUrl.toLowerCase().contains(".pdf")) {
				map.put("type", "1");
			} else {
				map.put("type", "0");
			}
		}
		return map;
	}

	/**
	 * 根据保存的Url获取原图、缩略图
	 * 
	 * @param imgUrl
	 * @return
	 * @since 2016年6月15日
	 * @author zr.xuheng@yikuyi.com
	 */
	public String getImagUrl(String url) {
		Map<String, String> map = getImgUrlMap(url);
		return map.get("image");

	}

	/**
	 * 账户认证申请保存信息
	 * 
	 * @param apply
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void activeAccountSave(Apply apply) {
		if(null == apply){
			return;
		}
		// 获取内容
		String applyContent = apply.getApplyContent();
		// 把获取的内容转化为json格式
		JSONObject json = JSON.parseObject(applyContent);
		String userId = RequestHelper.getLoginUserId();
		// 把jsonObject转化成对应的实体
		EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
		if (null == enterpriseVo) {
			return;
		}
		try {
			// 判断是企业还是个人 ,如果userType等于1为个人，否则为企业
			Integer userType = partyRoleDao.isPersonal(userId);
			String id;
			//usertype 等于1 为个人升级企业认证，否则为企业申请认证
			if (userType == 1) {
				// 先创建企业
				id = String.valueOf(IdGen.getInstance().nextId());
				enterpriseVo.setId(id);
				// 生成企业信息
				createEnt(userId, enterpriseVo, 0);
				// 修改个人信息
				createPerson(enterpriseVo, userId);
				// 修改个人注册地址
				saveBaseInfo(enterpriseVo, userId);
				// 插入企业与账户的关联
				saveRelationShip(userId, id, 1);

			} else {
				//根据当前登录id获取企业id
				Party p = partyDao.getPartyPersonDetail(userId);
				id = p.getCorporationId();
				// 判断是否有企业id，如果没有则创建
				if (StringUtils.isEmpty(id)) {
					// 先创建企业
					id = String.valueOf(IdGen.getInstance().nextId());
					enterpriseVo.setId(id);
					// 生成企业信息
					createEnt(userId, enterpriseVo, 0);
					// 插入企业与账户的关联
					saveRelationShip(apply.getApplyUserId(), id, 1);
				}
				enterpriseVo.setId(id);
				Party party = new Party();
				party.setId(id);// 设置企业id
				party.setLastUpdateDate(new Date());
				party.setLastUpdateUser(userId);
				partyDao.updateParty(party);
				// 修改partyGroup表设置为待审核状态
				updatePartyGroup(party, ActiveStatus.WAIT_APPROVE, null, null, userId, enterpriseVo.getName(),
						enterpriseVo.getLogo(), new Date(), null);
				// 修改属性
				updatePartyAttr(enterpriseVo, party);
				// 修改公司注册地址
				saveBaseInfo(enterpriseVo, id);

				// 修改账号信息person信息
				Party party1 = new Party();
				party1.setId(apply.getApplyUserId());// 设置企业id
				Person person = new Person();
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				person.setTel(enterpriseVo.getContactUserTel());
				person.setMail(enterpriseVo.getMail());
				person.setPersonalTitle(enterpriseVo.getPersonalTitle());
				party1.setPerson(person);
				personDao.editPerson(party1);

			}
			apply.setApplyOrgId(id);
			// 调用workFlow服务
			workflowClient.applyResource().createApply(apply, authorizationUtil.getLoginAuthorization());
			
			// 给认证部发送邮件
			String urlMail = operationUrl + VERIFYURL;
			sendCerMail(urlMail, enterpriseVo.getName(), "资质", "APPLY_ACTIVE");

		} catch (Exception e) {
			logger.error("调用workflow服务异常：{}", e.getMessage(), e);
		}

	}

	/**
	 * 个人升级企业创建一个企业
	 * 
	 * @param entUserId 企业用户id,enterpriseVo,isOldData是否是老数据
	 * @return EnterpriseVo
	 * @since 2017年5月10日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void createEnt(String entUserId, EnterpriseVo enterpriseVo, int isOldData) {
		String userId = RequestHelper.getLoginUserId();// 当前申请修改的人
		//生成一条party企业数据
		Party party = new Party();
		party.setId(enterpriseVo.getId());
		party.setPartyType(PartyType.CORPORATION);
		party.setPartyStatus(PartyStatus.PARTY_NOT_VERIFIED);
		party.setCreator(userId);
		party.setCreatedDate(new Date());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		partyDao.insert(party);
		// 修改把当前个人用户变为企业用户即给corporationId设置id(企业id)
		Party partyNew = new Party();
		partyNew.setId(entUserId);
		partyNew.setCorporationId(enterpriseVo.getId());
		partyDao.updateParty(partyNew);
		// 新增partyGroup
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setGroupName(enterpriseVo.getName());
		partyGroup.setCreator(userId);
		partyGroup.setCreatedDate(new Date());
		partyGroup.setComments(enterpriseVo.getComments());
		partyGroup.setLastUpdateUser(userId);
		partyGroup.setLastUpdateDate(new Date());
		partyGroup.setApplyDate(new Date());
		if (isOldData == 0) {
			partyGroup.setActiveStatus(ActiveStatus.WAIT_APPROVE);
		}
		partyGroup.setAccountStatus(AccountStatus.ACCOUNT_NOT_VERIFIED);
		party.setPartyGroup(partyGroup);
		partyGroupDao.insert(party);
		// 插入公司官网
		insertCer(PartyAttributeConstants.WEBSITE_URL, enterpriseVo.getWebSite(), party, userId);
		// 公司类型
		insertCer(PartyAttributeConstants.CORPORATION_CATEGORY_ID, enterpriseVo.getCorCategory(), party, userId);
		// 所属行业
		insertCer(PartyAttributeConstants.INDUSTRY_CATEGORY_ID, enterpriseVo.getIndustryCategory(), party, userId);
		// 邓氏编码
		insertCer(PartyAttributeConstants.D_CODE, enterpriseVo.getdCode(), party, userId);
		// 修改公司注册地址
		saveBaseInfo(enterpriseVo, enterpriseVo.getId());
		// 设置other值
		List<Map<String, String>> otherAttrs = enterpriseVo.getOtherAttrs();
		// 如果为空则不执行后面的操作
		if (!CollectionUtils.isNotEmpty(otherAttrs)) {
			return;
		}
		// 循环插入值有公司类型其他和所属行业其他
		for (Map<String, String> map : otherAttrs) {
			Iterator<String> iterator = map.keySet().iterator();
			while (iterator.hasNext()) {
				String mapKey = iterator.next();
				if (!StringUtils.isEmpty(mapKey)) {
					insertCer(mapKey, map.get(mapKey), party, userId);
				}
			}

		}

	}

	/**
	 * 保存账号信息
	 * 
	 * @param entVo
	 * @param accountId 企业中的个人账户id
	 * @return
	 * @since 2017年4月28日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private void createPerson(EnterpriseVo entVo, String accountId) {

		// PERSON 表生成记录 PARTY_ID 和 PARTY表一致。
		Party party = new Party();
		party.setId(accountId);
		Person person = new Person();
		person.setLastNameLocal(entVo.getContactUserName());
		person.setMail(entVo.getMail());
		person.setPersonalTitle(entVo.getPersonalTitle());
		person.setTel(entVo.getContactUserTel());
		person.setTelStatus("Y");
		person.setMailStatus("N");
		person.setCreator(accountId);
		person.setCreatedDate(new Date());
		person.setLastUpdateDate(new Date());
		person.setLastUpdateUser(accountId);
		person.setPersonTypeStatus(PersonTypeStatus.COMMON);
		person.setFixedTel(entVo.getFixedTel());
		party.setPerson(person);
		personDao.editPerson(party);

		// 删除个人用户原有的角色
		List<String> list = new ArrayList<>();
		list.add(RoleTypeEnum.CUSTOMER.toString());
		list.add(RoleTypeEnum.INDIVIDUAL_CUST.toString());
		partyRoleDao.deletePartyRoleByType(accountId, list);

		// d.生成 PARTY_ROLE 数据 ROLE_TYPE_ID 为：ENTERPRISE_CUST
		partyRoleDao.insert(accountId, RoleTypeEnum.ENTERPRISE_CUST.toString(), accountId, new Date(), accountId,
				new Date());
	
	}

	/**
	 * 账户激活审核成功保存数据
	 * 
	 * @param jsonObject
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void save(Apply apply) {
		String userId = RequestHelper.getLoginUserId();
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(applyContent, EnterpriseVo.class);
			//根据申请用户id查询用户名和邮箱
			Party p = personDao.findPersonById(apply.getApplyUserId());
			String cerName = "";
			String mail = "";
			if (null != p && !StringUtils.isEmpty(p.getPerson())) {
				cerName = p.getPerson().getLastNameLocal();
				mail = p.getPerson().getMail();
			}
			// 驳回
			if (apply.getStatus() == ApplyStatus.REJECT) {
				Party party = new Party();
				party.setId(apply.getApplyOrgId());
				// 修改partyGrop的状态为驳回
				updatePartyGroup(party, ActiveStatus.REJECTED, null, null, userId, null, null, null, new Date());
				// 给申请人发送驳回邮件
				String urlMail = customerServerUrlPrefix + "/enterprise/enterpriseInfo.htm";
				commonMsg(MailInfoVo.TemplateId.ACTIVE_REJECT.toString(), mail, urlMail, enterpriseVo.getName(),
						apply.getReason(), cerName, null);
				sendInnerMail("ACTIVE_REJECT", urlMail, enterpriseVo);
			} else {
				// 审核成功
				if (null != enterpriseVo) {
					saveApply(enterpriseVo);
					// 发送邮件
					commonMsg(MailInfoVo.TemplateId.ACTIVE_PASS.toString(), mail, null, enterpriseVo.getName(), null,
							cerName, null);
					sendInnerMail("ACTIVE_PASS", null, enterpriseVo);
				}
			}
		}
	}

	/**
	 * 抽取激活账户审核成功信息
	 * 
	 * @param enterpriseVo
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void saveApply(EnterpriseVo entVo) {
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(entVo.getId());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		partyDao.updateParty(party);
		// 修改partygroup状态为已审核
		updatePartyGroup(party, ActiveStatus.PARTY_VERIFIED, null, null, userId, entVo.getName(), entVo.getLogo(), null,
				new Date());

		// 插入资质信息
		insertCertificate(entVo, userId, party);
		// 根据企业id判断当前企业是否有生成过组织代码 ,一个企业只能插入一条数据
		// 如果没有组织机构代码则根据公司名称查询 用户名，组织机构代码，key
		createVipEnt(entVo);

	}

	private void createVipEnt(EnterpriseVo entVo) {
		if (!StringUtils.isEmpty(entVo.getOccCode())) {
			// 如果有组织机构代码则按照名称和组织机构代码去查询
			List<EnterpriseVo> entList = partyAttributeDao.findPartyCodeList(null, entVo.getOccCode(), PartyAttributeConstants.ORG_CODE);
			if (!CollectionUtils.isNotEmpty(entList)) {
				// 新增一个vip企业
				newEnt(entVo);
			} else {
				// 先失效原有的关联关系，重新生成新的关联关系
				createNewEntRelation(entVo, entList);
			}
		} else {
			List<EnterpriseVo> entList = partyAttributeDao.findPartyCodeList(entVo.getName(), null, PartyAttributeConstants.ORG_CODE);
			if (!CollectionUtils.isNotEmpty(entList)) {
				// 新增一个vip企业
				newEnt(entVo);
			} else {
				createNewEntRelation(entVo, entList);
			}
		}
	}

	// 新建关联关系
	private void createNewEntRelation(EnterpriseVo entVo, List<EnterpriseVo> entList) {
		// 失效被审核企业与原有VIP企业的关联关系
		String oldId = entVo.getId();
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(oldId);// 生成新的企业id
		relationShip.setThruDate(new Date());
		relationShip.setStatusId("DISABLED");
		relationShip.setRoleTypeIdFrom(RoleTypeEnum.CORPORATION.toString());
		relationShip.setRoleTypeIdTo(RoleTypeEnum.VIP_CORPORATION.toString());
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
		relationshipDao.updateRelationShip(relationShip);

		// 建立被审核通过的企业与已经存在的VIP企业关系
		saveRelationShip(entVo.getId(), entList.get(0).getId(), 2);

		// 把原有的编码
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(entVo.getId());
		party.setLastUpdateDate(new Date());
		party.setPartyCode(entList.get(0).getPartyCode());
		party.setLastUpdateUser(userId);
		partyDao.updateParty(party);
	}

	// 新增一个vip企业
	void newEnt(EnterpriseVo entVo) {
		String userId = RequestHelper.getLoginUserId(); // 重新备份一份数据到party表中
		// 插入到party表
		Party partyNew = new Party();
		String id = String.valueOf(IdGen.getInstance().nextId());
		partyNew.setId(id);
		partyNew.setPartyType(PartyType.VIP_CORPORATION);
		partyNew.setPartyStatus(PartyStatus.PARTY_ENABLED);
		partyNew.setCreatedDate(new Date());
		partyNew.setCreator(userId);
		partyDao.insert(partyNew);

		// 插入group表
		PartyGroup partyGroupNew = new PartyGroup();
		partyGroupNew.setGroupName(entVo.getName());
		partyGroupNew.setCreator(userId);
		partyGroupNew.setCreatedDate(new Date());
		partyGroupNew.setApplyDate(new Date());
		partyGroupNew.setApprovedDate(new Date());
		partyGroupNew.setActiveStatus(ActiveStatus.PARTY_VERIFIED);
		partyGroupNew.setAccountStatus(AccountStatus.ACCOUNT_NOT_VERIFIED);
		partyNew.setPartyGroup(partyGroupNew);
		partyGroupDao.insert(partyNew);

		// 失效审核的企业与老的VIsP企业关系
		String oldId = entVo.getId();
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(oldId);// 生成新的企业id
		relationShip.setThruDate(new Date());
		relationShip.setStatusId("DISABLED");
		relationShip.setRoleTypeIdFrom(RoleTypeEnum.CORPORATION.toString());
		relationShip.setRoleTypeIdTo(RoleTypeEnum.VIP_CORPORATION.toString());
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
		relationshipDao.updateRelationShip(relationShip);

		// 插入新企业与老企业的关系
		saveRelationShip(entVo.getId(), id, 2);
        //给属性设置值
		setEntAttr(entVo, partyNew);
		// 调用服务获取企业联系信息
		List<PartyContactMech> partyContactMechList = partyContactMechManager
				.selectPartyContactMechByType(PurposeType.REGISTER_LOCATION, entVo.getId(), null);
		if (null != partyContactMechList && !partyContactMechList.isEmpty()) {
			PartyContactMech partyContactMech = partyContactMechList.get(0);
			// 获取基本信息
			getContactMech(entVo, partyContactMech);
		}
		// 修改注册地
		saveBaseInfo(entVo, id);
		// 插入组织机构代码信息和注册地
		insertCertificate(entVo, userId, partyNew);

	}

	private void setEntAttr(EnterpriseVo entVo, Party partyNew) {
		List<PartyAttribute> attrList = partyAttributeDao.getPartAttribute(entVo.getId());
		if (null != attrList && CollectionUtils.isNotEmpty(attrList)) {
			List<Map<String, String>> otherAttrs = new ArrayList<>();
			for (PartyAttribute attr : attrList) {
				if (attr.getKey().equals(PartyAttributeConstants.CORPORATION_CATEGORY_ID)) {
					entVo.setCorCategory(attr.getValue());
				}
				if (attr.getKey().equals(PartyAttributeConstants.INDUSTRY_CATEGORY_ID)) {
					entVo.setIndustryCategory(attr.getValue());
				}
				if (attr.getKey().equals(PartyAttributeConstants.WEBSITE_URL)) {
					entVo.setWebSite(attr.getValue());
				}
				if (attr.getKey().equals(PartyAttributeConstants.D_CODE)) {
					entVo.setdCode(attr.getValue());
				}
				if (attr.getKey().equals(PartyAttributeConstants.INDUSTRY_CATEGORY_ID_OTHER) || attr.getKey().equals(PartyAttributeConstants.CORPORATION_CATEGORY_ID_OTHER)) {
					Map<String, String> otherMap = new HashMap<>();
					otherMap.put(attr.getKey(), attr.getValue());
					otherAttrs.add(otherMap);
					entVo.setOtherAttrs(otherAttrs);
				}

			}
			// 新增或修改属性
			updatePartyAttr(entVo, partyNew);

		}
	}

	/**
	 * 获取公司信息抽取方法
	 * 
	 * @param entVo
	 * @param partyContactMech
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void getContactMech(EnterpriseVo entVo, PartyContactMech partyContactMech) {
		if (null != partyContactMech) {
			ContactMech contactMech = partyContactMech.getContactMech();
			if (null != contactMech.getId()) {
				// 地址信息
				PostalAddress postalAddress = contactMech.getPostalAddress();
				if (null != postalAddress) {
					entVo.setAddress(postalAddress.getAddress1());
					entVo.setProvince(postalAddress.getProvinceGeoId());
					entVo.setProvinceName(postalAddress.getProvinceGeoName());
					entVo.setCity(postalAddress.getCityGeoId());
					entVo.setCityName(postalAddress.getCityGeoName());
					entVo.setCountry(postalAddress.getCountyGeoId());
					entVo.setCountryName(postalAddress.getCountyGeoName());
				}
			}
		}
	}

	void insertCertificate(EnterpriseVo entVo, String userId, Party party) {
		// 删除资质
		Map<String, String> map = entVo.getMap();
		if (null == map) {
			return;
		}
		List<String> delKeyList = new ArrayList<>();
		PartyAttributes attrList = new PartyAttributes();
		for (Object map1 : map.entrySet()) {
			delKeyList.add(((Map.Entry) map1).getKey().toString());
		}
		attrList.setKeyList(delKeyList);
		party.setPartyAttributes(attrList);
		// 先删除资质信息
		partyAttributeDao.deleteByIdOrKey(party);

		PartyAttributes cerAttr;
		PartyAttribute cer;
		for (Object map1 : map.entrySet()) {
			cerAttr = new PartyAttributes();
			cer = new PartyAttribute();
			if (null != ((Map.Entry) map1).getValue() && "" != ((Map.Entry) map1).getValue()) {
				cer.setKey(((Map.Entry) map1).getKey().toString());// 将map的key设置给partyAttribute的key
				cer.setValue(((Map.Entry) map1).getValue().toString());// 将map的value设置给partyAttribute的value
				cer.setCreator(userId);
				cer.setCreatedDate(new Date());
				cerAttr.setCertificateAttrs(cer);
				party.setPartyAttributes(cerAttr);
				partyAttributeDao.insertCerAttrs(party);
			}
		}

	}

	void sendCerMail(String urlMail, String name, String type, String template) {
		// 查询认证部邮件
		List<String> list = new ArrayList<>();
		list.add(RoleTypeEnum.CUST_CERT_SPECIALIST.toString());
		List<Party> cerPartyList = personDao.findDataByRole(list);
		if (null != cerPartyList && !cerPartyList.isEmpty()) {
			for (int i = 0; i < cerPartyList.size(); i++) {
				Party partyMail = cerPartyList.get(i);
				if (null != partyMail && null != partyMail.getPerson()) {
					// 获取认证部的名字
					String cerName = partyMail.getPerson().getLastNameLocal();
					// 要发送的邮件
					String email = partyMail.getPerson().getMail();
					commonMsg(template, email, urlMail, name, null, cerName, type);
				}
			}
		}
	}

	public void commonMsg(String templateId, String toMail, String herfUrl, String companyName, String reson,
			String cerName, String type) {
		MailInfoVo mailInfoVo = new MailInfoVo();
		mailInfoVo.setTemplateId(templateId);
		mailInfoVo.setType(MailInfoVo.Type.EMAIL.toString());
		mailInfoVo.setTo(toMail);
		JSONObject object = new JSONObject();
		object.put("cerName", cerName);// 用户名
		object.put("urlMail", herfUrl);// 链接地址
		object.put(COMPANYNAME, companyName);// 公司名称
		object.put(APPLYREASON, reson);// 驳回原因
		object.put("type", type);// 判断是资质还是子账号
		String logoPrefix = portalServerUrlPrefix;// portal项目前缀
		object.put("portalUrl", logoPrefix);// 公司logoUrl
		mailInfoVo.setContent(object);
		logger.info("激活账户邮件参数：{}", JSONObject.toJSON(mailInfoVo).toString());
		msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
	}

	/**
	 * 发送站内信
	 * 
	 * @param emplateId
	 * @param url
	 * @param vo
	 * @since 2017年2月21日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void sendInnerMail(String emplateId, String url, EnterpriseVo vo) {
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(emplateId);
			mailInfoVo.setType(INNERMAIL);
			mailInfoVo.setTo(vo.getId());
			JSONObject content = new JSONObject();
			content.put("url", url);
			mailInfoVo.setTo(vo.getId());
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("站内信邮件发送失败：{}", e);
		}
	}

	/**
	 * 保存地址信息
	 * 
	 * @param UserExtendVo
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	void saveBaseInfo(EnterpriseVo entVo, String partyId) {
		if (null != entVo) {
			PartyContactMech partyContactMech = new PartyContactMech();
			partyContactMech.setPurposeType(PurposeType.REGISTER_LOCATION);
			ContactMech contactMech = new ContactMech();
			PostalAddress postalAddress = new PostalAddress();
			postalAddress.setAddress1(entVo.getAddress());
			postalAddress.setCountryGeoName("中国");
			postalAddress.setCountryGeoId("china");

			postalAddress.setProvinceGeoName(entVo.getProvinceName());
			postalAddress.setProvinceGeoId(entVo.getProvince());

			postalAddress.setCountyGeoName(entVo.getCountryName());
			postalAddress.setCountyGeoId(entVo.getCountry());

			postalAddress.setCityGeoName(entVo.getCityName());
			postalAddress.setCityGeoId(entVo.getCity());
			//电话信息
			TelecomNumber telecomNumber = new TelecomNumber();
			//qq
			QqTelecomNumber qqTelecomNumber = new QqTelecomNumber();
			qqTelecomNumber.setContactNumber(entVo.getContactUserQQ());
			qqTelecomNumber.setMechType(MechType.QQ);
			telecomNumber.setQqTelecomNumber(qqTelecomNumber);
			contactMech.setTelecomNumber(telecomNumber);
			contactMech.setPostalAddress(postalAddress);

			partyContactMech.setContactMech(contactMech);
			partyContactMech.setPartyId(partyId);
			partyContactMechManager.insert(partyContactMech);

		}
	}

	/**
	 * 修改公司信息
	 * 
	 * @param enterpriseVo
	 * @return
	 * @since 2017年2月7日
	 * @author zr.helinmei@yikuyi.com
	 */
	@Audit(action = "Enterprise Modifyqqq;;;'#enterpriseVo.id'qqq;;;'#enterpriseVo.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void editCompany(@Param("enterpriseVo") EnterpriseVo enterpriseVo) {
		if (null != enterpriseVo) {
			updateParty(enterpriseVo, 0);
		}
	}
	/**
	 * 修改公司信息不加日志
	 * 
	 * @param enterpriseVo
	 * @return void
	 * @since 2017年2月7日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void editMemberCompany(EnterpriseVo enterpriseVo) {
		if (null != enterpriseVo) {
			updateParty(enterpriseVo, 0);
		}
	}
	/**
	 * 修改公司信息抽取方法
	 * 
	 * @param entVo
	 * @param isOldData 老数据
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void updateParty(EnterpriseVo entVo, int isOldData) {
		String userId = RequestHelper.getLoginUserId();
		// 兼容老数据
		Party p = partyDao.getPartyPersonDetail(entVo.getId());// 根据提交的企业用户id查找企业id
		String corporationId = p.getCorporationId();// 企业id
		String partyType = p.getPartyType().toString();
		// 认证企业也没有企业id所以区分。
		if (StringUtils.isEmpty(p.getCorporationId()) && partyType != PartyType.VIP_CORPORATION.toString()) {
			// 老数据,重新生成一个企业账户
			String id = String.valueOf(IdGen.getInstance().nextId());
			// 插入企业与账户的关联地一个为企业用户id,第二个为企业id
			saveRelationShip(entVo.getId(), id, 1);
			entVo.setId(id);// 因为后面调用的方法entVo里面的id都为企业id,所以把entVo的id设置为企业id
			// 生成企业信息
			createEnt(userId, entVo, 1);
		} else {
			// 认证页面的修改
			if (isOldData != 1) {
				entVo.setId(corporationId);
			}
			Party party = new Party();
			party.setId(entVo.getId());
			party.setLastUpdateDate(new Date());
			party.setLastUpdateUser(userId);
			party.setPartyCode(entVo.getPartyCode());// yky编码
			partyDao.updateParty(party);

			// 修改企业名和logo
			updatePartyGroup(party, null, null, entVo.getComments(), userId, entVo.getName(), entVo.getLogo(), null,
					null);

			// 修改企業屬性
			updatePartyAttr(entVo, party);

			// 修改公司注册信息
			saveBaseInfo(entVo, entVo.getId());
		}

	}

	/**
	 * 抽取方法修改企业属性信息
	 * 
	 * @param entVo,party
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void updatePartyAttr(EnterpriseVo entVo, Party party) {
		// 修改企业属性
		// 公司类型
		if (!StringUtils.isEmpty(entVo.getCorCategory())) {
			partyAttributeDao.save(party.getId(), PartyAttributeConstants.CORPORATION_CATEGORY_ID, entVo.getCorCategory());
		}
		// 所属行业
		if (!StringUtils.isEmpty(entVo.getIndustryCategory())) {
			partyAttributeDao.save(party.getId(), PartyAttributeConstants.INDUSTRY_CATEGORY_ID, entVo.getIndustryCategory());
		}
		// 判断公司官网是否有插入值如果没插入就插入，插入了就修改
		if (!StringUtils.isEmpty(entVo.getWebSite())) {
			partyAttributeDao.save(party.getId(), PartyAttributeConstants.WEBSITE_URL, entVo.getWebSite());
		}
		// 判断邓氏编码是否有插入值如果没插入就插入，插入了就修改
		if (!StringUtils.isEmpty(entVo.getdCode())) {
			partyAttributeDao.save(party.getId(), PartyAttributeConstants.D_CODE, entVo.getdCode());
		}

		// 如果原本是图片后来修改成pdf则需要新增pdf名字，否则修改pdf名字
		// 设置other值
		List<Map<String, String>> otherAttrs = entVo.getOtherAttrs();
		if (!CollectionUtils.isNotEmpty(otherAttrs)) {
			return;
		}
		PartyAttributes otherAttr;
		PartyAttribute other;
		// 先删除other,然后新增
		List<String> delKeyList = new ArrayList<>();
		PartyAttributes attrList = new PartyAttributes();
		delKeyList.add(PartyAttributeConstants.INDUSTRY_CATEGORY_ID_OTHER);
		delKeyList.add(PartyAttributeConstants.CORPORATION_CATEGORY_ID_OTHER);
		attrList.setKeyList(delKeyList);
		party.setPartyAttributes(attrList);
		partyAttributeDao.deleteByIdOrKey(party);
		// 循环得到key
		for (Map<String, String> map : otherAttrs) {
			Iterator<String> iterator = map.keySet().iterator();
			while (iterator.hasNext()) {
				// 插入其他值
				String mapKey = iterator.next();
				otherAttr = new PartyAttributes();
				other = new PartyAttribute();
				other.setKey(mapKey);// 将map的key设置给partyAttribute的key
				other.setValue(map.get(mapKey));// 将map的value设置给partyAttribute的value
				otherAttr.setOtherAttrs(other);
				party.setPartyAttributes(otherAttr);
				partyAttributeDao.insertOtherAttrs(party);

			}
		}
	}

	void updateAttr(String key, String value, Party party) {
		party.setExternalId(key);
		party.setDescription(value);
		partyAttributeDao.updateEnterpriseAttribute(party);
	}

	/**
	 * 修改认证会员企业信息
	 * 
	 * @param entVo
	 * @return void
	 * @since 2017年5月3日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	@Audit(action = "EntQualifications Modifyqqq;;;'#entVo.id'qqq;;;'#entVo.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void updateQualifications(@Param("entVo") EnterpriseVo entVo) {
		updateParty(entVo, 1);// 用来区分新老数据和认证企业信息
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(entVo.getId());
		// 新增资质
		insertCertificate(entVo, userId, party);

	}

	/**
	 * 根据账号查询管理员信息
	 * 
	 * @param id
	 * @param role
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getAdmin(String id, String role) {
		UserVo userVo = new UserVo();
		if (!"admin".equals(role)) {
			return userVo;
		}
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleTypeEnum.EMPLOYEE.toString());
		partyRelationship.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList == null || relationshipList.isEmpty()) {
			return userVo;
		}
		partyRelationship = relationshipList.get(0);
		// 企业id
		String entId = partyRelationship.getPartyIdTo();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// 根据企业id查询企业名称
		Party party = partyDao.getPartyDetail(entId, PartyType.CORPORATION);
		if (party != null && party.getPartyGroup() != null) {
			String companyName = party.getPartyGroup().getGroupName();
			userVo.setCompanyName(companyName);
		}
		// 关联时间
		String relationDate = formatter.format(partyRelationship.getFromDate());
		userVo.setRelationDate(relationDate);
		// 根据企业id查询管理员id
		PartyRelationship partyRelationship1 = new PartyRelationship();
		partyRelationship1.setPartyIdTo(entId);
		partyRelationship1.setRoleTypeIdFrom(RoleTypeEnum.MAIN_ROLE.toString());
		partyRelationship1.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		relationshipList = relationshipDao.getPartyRelationship(partyRelationship1);
		if (relationshipList == null || relationshipList.isEmpty()) {
			return userVo;
		}
		String adminId = relationshipList.get(0).getPartyIdFrom();

		// 根据管理员id查询邮箱地址,名称
		Party party1 = partyDao.getPartyPersonDetail(adminId);

		if (party1 != null && party1.getPerson() != null) {
			userVo.setName(party1.getPerson().getLastNameLocal());
		}

		// 获取企业联系信息
		String email = userLoginDao.findUserLogin(adminId, EMAIL);
		userVo.setMail(email);

		return userVo;
	}

	
	/**
	 * 根据id更新状态
	 * 
	 * @param id
	 * @param status
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Audit(action = "User Modifyqqq;;;修改'#party.person.mail'账号状态为'#party.partyStatus'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void updateStatus(@Param("party") Party party) {
		partyDao.updateParty(party);
	}

	/**
	 * 根据用户的id判断是否为管理员
	 * 
	 * @param id
	 * @return
	 * @since 2017年2月7日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isAdmin(String id) {
		Boolean falg = false;
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleTypeEnum.MAIN_ROLE.toString());
		partyRelationship.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			partyRelationship = relationshipList.get(0);
			String entId = partyRelationship.getPartyIdTo();
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if (party == null) {
				return falg;
			}
			if (party.getPartyGroup().getActiveStatus() != null && ActiveStatus.PARTY_VERIFIED.toString()
					.equals(party.getPartyGroup().getActiveStatus().toString())) {
				falg = true;
			} else {
				falg = false;
			}

		}
		return falg;
	}

	/**
	 * 根据用户ID获取企业ID
	 * @param employeeId
	 * @return
	 * @since 2017年6月16日
	 * @author jik.shu@yikuyi.com
	 */
	public String getEnterpriseIdByPartyId(String partyId) {
		PartyRelationship pr = new PartyRelationship();
		pr.setPartyIdFrom(partyId);
		pr.setRoleTypeIdFrom(RoleTypeEnum.EMPLOYEE.toString());
		pr.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		pr.setRelationshipName(PartyRelationship.PartyRelationshipType.EMPLOYMENT.name());
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(pr);
		// 这里排除一个员工受雇于多家公司的情况
		return CollectionUtils.isNotEmpty(relationshipList) ? relationshipList.get(0).getPartyIdTo() : null;
	}

	/**
	 * 获取后台企业管理员列表
	 * 
	 * @param param
	 * @param rowBounds
	 * @return
	 * @since 2017年2月13日
	 * @author gongtianyu@yikuyi.com
	 */

	public PageInfo<EnterpriseVo> getEnterpriseList(EnterpriseParamVo param, RowBounds rowBounds) {
		return new PageInfo<>(partyDao.getEnterpriseList(param, rowBounds));
	}

	/**
	 * 根据用户的id判断是否为激活或者关联，返回true：已经激活或者关联，fail：未激活或者未关联
	 * 
	 * @param id
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String isActivedOrRelationed(String id) {
		// 没有激活
		String falg = NOTACTIVE;
		// 判断关联
		Party p = personDao.findPersonById(id);
		if (p != null && p.getPerson() != null && p.getPerson().getRelationSratus() != null
				&& Person.RelationSratus.RELATED.toString().equals(p.getPerson().getRelationSratus().toString())) {
			// 已关联
			falg = RELATED;
			return falg;
		}
		if (p != null && p.getPerson() != null && p.getPerson().getRelationSratus() != null) {
			// 关联中
			falg = RELATING;
			// 判断激活
			PartyRelationship partyRelationship = new PartyRelationship();
			partyRelationship.setPartyIdFrom(id);
			partyRelationship.setRoleTypeIdFrom(RoleTypeEnum.MAIN_ROLE.toString());
			partyRelationship.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
			List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
			if (relationshipList != null && !relationshipList.isEmpty()) {
				// 激活中
				falg = ACTIVING;
				partyRelationship = relationshipList.get(0);
				String entId = partyRelationship.getPartyIdTo();
				Party party = partyGroupDao.findPartyGroupByPartyId(entId);
				if (party != null && party.getPartyGroup().getActiveStatus() != null && ActiveStatus.PARTY_VERIFIED
						.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
					// 已激活
					falg = ACTIVED;
					return falg;
				}
			}
			return falg;
		}
		// 判断激活
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleTypeEnum.MAIN_ROLE.toString());
		partyRelationship.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			// 激活中
			falg = ACTIVING;
			partyRelationship = relationshipList.get(0);
			String entId = partyRelationship.getPartyIdTo();
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if (party != null && party.getPartyGroup().getActiveStatus() != null && ActiveStatus.PARTY_VERIFIED
					.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
				// 已激活
				falg = ACTIVED;
				return falg;
			}
		}
		Party party1 = partyDao.getPartyPersonDetail(id);
		if (null != party1) {
			String entId = party1.getCorporationId();// 获取企业Id
			if (!StringUtils.isEmpty(entId)) {
				Party party2 = partyDao.getPartyDetail(entId, PartyType.CORPORATION);
				if (null != party2 && null != party2.getPartyGroup() && null != party2.getPartyGroup().getActiveStatus()
						&& party2.getPartyGroup().getActiveStatus() == PartyGroup.ActiveStatus.REJECTED) {
					// 激活中
					falg = ACTIVING;
				}
			}

		}

		return falg;
	}

	/**
	 * 根据用户的id判断是否为首次激活或者关联
	 * 
	 * @return
	 * @since 2017年2月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isFristActive(String id) {
		Boolean falg = false;
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleTypeEnum.EMPLOYEE.toString());
		partyRelationship.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		List<PartyRelationship> relationshipList = relationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			return falg;
		}
		Party party = personDao.findPersonById(id);
		if (party != null && party.getPerson() != null && party.getPerson().getRelationSratus() != null) {
			return falg;
		}
		party = partyDao.getPartyPersonDetail(id);
		if (party != null && !StringUtils.isEmpty(party.getCorporationId())) {
			return falg;
		}
		falg = true;
		return falg;
	}

	/**
	 * 获取用户信息
	 * 
	 * @param id
	 * @return
	 * @since 2017年3月28日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getUser(String id) {
		return userLoginDao.getPerson(id);
	}

	/**
	 * 导出企业会员列表
	 * 
	 * @param vo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public void exportEnt(EnterpriseParamVo vo, HttpServletResponse response) throws IOException {
		// 查询数据
		List<EnterpriseVo> list = partyDao.getEntList(vo);
		response.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		response.addHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", "EnterpriseList.xls"));
		response.addHeader("Pragma", "no-cache");
		response.addHeader("Expires", "0");
		this.exportExcelXls(list, response.getOutputStream());
	}

	/**
	 * 导出企业会员数据
	 * 
	 * @param list
	 * @param os
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	 void exportExcelXls(List<EnterpriseVo> list, OutputStream os) {
		ExportProcesser processer = null;
		try {
			processer = ExportFactory.getProcesser(ExportFactory.TYPE_XLS, os);
			// 标题
			processer.writeLine("Sheet1", EXPORT_TEMPLATE.split(","));
			List<List<String>> rowDataList;
			rowDataList = this.enterpriseDataList(list);
			for (List<String> rowData : rowDataList) {
				processer.writeLine("Sheet1", rowData);
			}
			processer.output();
		} catch (Exception e) {
			logger.error("Exception", e);
			throw new SystemException("exportExcelXls Exception", e);
		} finally {
			if (null != processer) {
				processer.close();
			}
		}

	}

	/**
	 * 重构数据
	 * 
	 * @param enterpriseVo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private List<List<String>> enterpriseDataList(List<EnterpriseVo> list) {
		List<List<String>> rowDataList = Lists.newArrayList();
		if (!CollectionUtils.isNotEmpty(list)) {
			return rowDataList;
		}
		List<String> rowData;
		List<Category> corCategoryList = this.getCategorys("CORPORATION_CATEGORY");
		Map<String, String> corMap = categoryToMap(corCategoryList);
		List<Category> industryCategoryList = this.getCategorys("INDUSTRY_CATEGORY");
		Map<String, String> industryMap = categoryToMap(industryCategoryList);
		for (EnterpriseVo enterpriseVo : list) {
			rowData = Lists.newArrayList();
			// 公司名称
			rowData.add(enterpriseVo.getName());
			// 公司类型
			String corCategory = getCategory(corMap, enterpriseVo.getCorCategory());
			rowData.add(corCategory);
			// 所属行业
			String industryCategory = getCategory(industryMap, enterpriseVo.getIndustryCategory());
			if (!StringUtils.isEmpty(enterpriseVo.getOtherAttr())) {
				industryCategory = industryCategory + "(" + enterpriseVo.getOtherAttr() + ")";
			}
			rowData.add(industryCategory);
			// 公司官网
			rowData.add(enterpriseVo.getWebSite());
			// 公司简介
			rowData.add(enterpriseVo.getDescription());
			// 公司注册地
			rowData.add(enterpriseVo.getRegisteAddr());
			// 联系人
			rowData.add(enterpriseVo.getContactUserName());
			// 联系电话
			rowData.add(enterpriseVo.getContactUserTel());
			// 电子传真
			rowData.add(enterpriseVo.getFax());
			// QQ
			rowData.add(enterpriseVo.getContactUserQQ());
			// 详细地址
			rowData.add(enterpriseVo.getAddress());
			rowDataList.add(rowData);

		}
		return rowDataList;
	}

	/**
	 * 
	 * @param categoryStr
	 * @param category
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String getCategory(Map<String, String> map, String categoryStr) {
		String cateStr = "";
		StringBuilder strBuffer = new StringBuilder();
		Map<String, String> newMap = map;
		if (StringUtils.isEmpty(categoryStr)) {
			return strBuffer.toString();
		}
		if (newMap == null) {
			newMap = new HashMap<>();
		}
		String[] arrStr = categoryStr.split(",");
		for (String str : arrStr) {
			if (StringUtils.isEmpty(str)) {
				continue;
			}
			String value = newMap.get(str);
			if (StringUtils.isEmpty(value)) {
				strBuffer.append(","+str);
			} else {
				strBuffer.append(","+value);
			}

		}
		if (!StringUtils.isEmpty(strBuffer)) {
			cateStr = strBuffer.toString();
			cateStr = cateStr.substring(1);
		}
		return cateStr;
	}

	/**
	 * 根据业务类型获取维度数据
	 * 
	 * @param category
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public List<Category> getCategorys(String category) {
		List<Category> list = null;
		try {
			return shipmentClientBuilder.categoryResource().categoryList(category);
		} catch (Exception e) {
			logger.error("调用查询业务类型失败:{}", e);
		}
		return list;
	}

	/**
	 * 业务类型转换map
	 * 
	 * @param list
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Map<String, String> categoryToMap(List<Category> list) {
		Map<String, String> map = new HashMap<>();
		if (!CollectionUtils.isNotEmpty(list)) {
			return null;
		}
		for (Category category : list) {
			if (!StringUtils.isEmpty(category.getCategoryId())) {
				map.put(category.getCategoryId(), category.getCategoryName());
			}
		}
		return map;
	}

	/**
	 * 账户激活后企业修改审核成功保存数据
	 * 
	 * @param JSONObject
	 * @return void
	 * @since 2017年4月13日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void editEntApplySave(Apply apply) {
		String userId = RequestHelper.getLoginUserId();// 当前申请修改的人
		if (null == apply) {
			return;
		}
		
		// 获取内容
		String applyContent = apply.getApplyContent();
		// 把jsonObject转化成对应的实体
		EnterpriseVo enterpriseVo = JSONObject.parseObject(applyContent, EnterpriseVo.class);
        if (null == enterpriseVo) {
        	return;
		}
		String email = "";
		Party partyData = personDao.findPersonById(apply.getApplyUserId());
		if (null != partyData && null != partyData.getPerson()
				&& !StringUtils.isEmpty(partyData.getPerson().getMail())) {
			email = partyData.getPerson().getMail();
		}
		Party p = personDao.findPersonById(apply.getApplyUserId());
		String cerName = "";
		String mail = "";
		if (null != p && null != p.getPerson() && !StringUtils.isEmpty(p.getPerson())) {
			cerName = p.getPerson().getLastNameLocal();
			mail = p.getPerson().getMail();
		}
		// 驳回
		if (apply.getStatus() == ApplyStatus.REJECT) {
			Party partys = new Party();
			partys.setId(apply.getApplyOrgId());
			// 修改partyGrop的状态
			updatePartyGroup(partys, ActiveStatus.REJECTED, null, null, userId, null, null, null, new Date());
			String urlMail = operationUrl + "/enterprise.htm";

			// 驳回发送邮件
			commonMsg(MailInfoVo.TemplateId.ACTIVE_REJECT.toString(), mail, urlMail, enterpriseVo.getName(),
					apply.getReason(), cerName, null);

			return;
		}
		// 审核成功
		// 修改partyGroup状态为审核通过
		Party partyObj = new Party();
		partyObj.setId(enterpriseVo.getId());
		updatePartyGroup(partyObj, ActiveStatus.PARTY_VERIFIED, null, null, userId, null, null, null, new Date());

		// 新增资质
		insertCertificate(enterpriseVo, userId, partyObj);
		// 新增企业
		// 根据企业id判断当前企业是否有生成过组织代码 ,一个企业只能插入一条数据
		// 如果没有组织机构代码则根据公司名称查询 用户名，组织机构代码，key
		createVipEnt(enterpriseVo);
		// 发送审核通过邮件
		commonMsg(MailInfoVo.TemplateId.ACTIVE_PASS.toString(), email, null, enterpriseVo.getName(), null, cerName,
				null);
		sendInnerMail("ACTIVE_PASS", null, enterpriseVo);
	

	}

	/**
	 * 后台企业用户会员管理3证修改审核
	 * 
	 * @param apply
	 * @return void
	 * @since 2017年4月13日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	@Audit(action = "Enterprise Modifyqqq;;;'#apply.applyOrgId'qqq;;;'#apply.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void editEntApply(@Param("apply") Apply apply) {
		if (null != apply) {
			String reason = apply.getReason();
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null == enterpriseVo) {
				return;
			}
			
			try {
				String userId = RequestHelper.getLoginUserId();// 当前申请修改的人
				// 判断是企业还是个人 //如果userType为1为个人，否则为企业
				Integer userType = partyRoleDao.isPersonal(enterpriseVo.getEntUserId());
				String id;
				if (userType == 1) {
					// 先创建企业
					id = String.valueOf(IdGen.getInstance().nextId());
					enterpriseVo.setId(id);
					// 生成企业信息
					createEnt(enterpriseVo.getEntUserId(), enterpriseVo, 0);
					// 修改个人信息
					createPerson(enterpriseVo, enterpriseVo.getEntUserId());
					
					// 修改个人注册地址
					enterpriseVo.setProvince(enterpriseVo.getPersonProvince());
					enterpriseVo.setProvinceName(enterpriseVo.getPersonProvinceName());
					enterpriseVo.setCity(enterpriseVo.getPersonCity());
					enterpriseVo.setCityName(enterpriseVo.getPersonCityName());
					enterpriseVo.setCountry(enterpriseVo.getPersonCountry());
					enterpriseVo.setCountryName(enterpriseVo.getCountryName());
					enterpriseVo.setAddress(enterpriseVo.getPersonAddress());
					saveBaseInfo(enterpriseVo, enterpriseVo.getEntUserId());
					
					// 插入企业与账户的关联
					saveRelationShip(enterpriseVo.getEntUserId(), id, 1);
					apply.setApplyOrgId(id);//因个人用户没有企业id，所以需重新设置个
					apply.setReason(null);//个人升级企业，取消reason字段传递
				} else{
					// 修改企业信息
					Party party = new Party();
					party.setId(apply.getApplyOrgId());
					// 修改partyGroup状态
					updatePartyGroup(party, ActiveStatus.WAIT_APPROVE, null, null, userId, null, null, new Date(),
							null);
				}
				
				// 调用workFlow服务
				logger.info("激活账户邮件参数：{}", new ObjectMapper().writeValueAsString(apply));
				workflowClient.applyResource().createApply(apply, authorizationUtil.getLoginAuthorization());
				apply.setReason(reason);
				
				String urlMail = operationUrl + VERIFYURL;
				// 给认证部发送邮件
				sendCerMail(urlMail, enterpriseVo.getName(), "资质", "APPLY_ACTIVE");


			} catch (Exception e) {
				logger.error("后台企业会员管理修改审核调用workflow服务异常：{}", e.getMessage(), e);
			}

		}

	}

	void updatePartyGroup(Party party, ActiveStatus status, AccountStatus accountStatus, String comments, String userId,
			String name, String logo, Date applyDate, Date approvedDate) {
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setActiveStatus(status);
		partyGroup.setAccountStatus(accountStatus);
		partyGroup.setLastUpdateUser(userId);
		partyGroup.setLastUpdateDate(new Date());
		partyGroup.setComments(comments);// 备注
		partyGroup.setGroupName(name);
		partyGroup.setLogoImageUrl(logo);
		partyGroup.setApplyDate(applyDate);
		partyGroup.setApprovedDate(approvedDate);
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);
	}

	/**
	 * 获取企业基本信息
	 * 
	 * @param partyId
	 * @return
	 * @since 2017年5月3日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public PartyGroup getEntBaseInfo(String partyId) {
		PartyGroup partyGroup = null;
		// 获取企业id
		String entId = partyDao.getPartyPersonDetail(partyId).getCorporationId();
		Party enterprise = partyDao.getPartyDetail(entId, PartyType.CORPORATION);
		if (null != enterprise) {
			partyGroup = enterprise.getPartyGroup();
		}
		return partyGroup;
	}

	/**
	 * 企业授权委托书审核接口
	 * 
	 * @param jsonObject
	 * @return void
	 * @since 2017年5月2日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void entAuthorize(Apply apply) {
		String userId = RequestHelper.getLoginUserId();
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(applyContent, EnterpriseVo.class);
			if (null == enterpriseVo) {
				return;
			}
			Party party;
			// 路径链接
			String urlMail = operationUrl + "/enterprise.htm";
			// 驳回
			if (apply.getStatus() == ApplyStatus.REJECT) {
				party = new Party();
				party.setId(enterpriseVo.getId());
				// 修改party_group状态
				updatePartyGroup(party, null, AccountStatus.ACCOUNT_REJECTED, null, userId, null, null, null, null);
				// 同时修改认证企业的认证状态
				updateCerAccountStatus(apply.getApplyOrgId(), null, AccountStatus.ACCOUNT_REJECTED);

				// 获取申请的用户名
				Party p = personDao.findPersonById(apply.getApplyUserId());
				String userName = "";
				String mail = "";
				if (null != p && null != p.getPerson()) {
					userName = p.getPerson().getLastNameLocal();
					mail = p.getPerson().getMail();
				}
				commonMsg("LICENSE_REJECT", mail, urlMail, enterpriseVo.getName(), null, userName, null);
			} else {
				// 审核成功
				party = new Party();
				party.setId(enterpriseVo.getId());
				// 修改partyGroup状态
				updatePartyGroup(party, null, AccountStatus.ACCOUNT_VERIFIED, null, userId, null, null, null,
						new Date());

				// 新增资质
				insertCertificate(enterpriseVo, userId, party);

				// 插入关系表生成主账号
				saveRelationShip(enterpriseVo.getEntUserId(), enterpriseVo.getId(), 0);

				// 先删除角色表
				List<String> list = new ArrayList<>();
				list.add(RoleTypeEnum.MAIN_ROLE.toString());
				partyRoleDao.deletePartyRoleByType(enterpriseVo.getEntUserId(), list);
				// 插入角色表
				partyRoleDao.insert(enterpriseVo.getEntUserId(), RoleTypeEnum.MAIN_ROLE.toString(), userId, new Date(),
						userId, new Date());
				// 修改person表状态

				Party partyNew = new Party();
				Person person = new Person();
				partyNew.setId(enterpriseVo.getEntUserId());
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(userId);
				person.setPersonTypeStatus(PersonTypeStatus.MAIN);// 生成主账号
				partyNew.setPerson(person);
				personDao.editPerson(partyNew);

				// 同时修改认证企业的认证状态
				updateCerAccountStatus(apply.getApplyOrgId(), null, AccountStatus.ACCOUNT_VERIFIED);

				// 获取申请的用户名
				Party p = personDao.findPersonById(apply.getApplyUserId());
				String userName = "";
				String mail = "";
				if (null != p && null != p.getPerson() && !StringUtils.isEmpty(p.getPerson())) {
					userName = p.getPerson().getLastNameLocal();
					mail = p.getPerson().getMail();
				}
				// 发送邮件
				commonMsg("LICENSE_PASS", mail, urlMail, enterpriseVo.getName(), null, userName, null);
			}
		}
	}

	void updateCerAccountStatus(String id, String comments, AccountStatus status) {
		String userId = RequestHelper.getLoginUserId();
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(id);// 生成新的企业id
		relationShip.setRoleTypeIdFrom(RoleTypeEnum.CORPORATION.toString());
		relationShip.setRoleTypeIdTo(RoleTypeEnum.VIP_CORPORATION.toString());
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
		List<PartyRelationship> relationList = relationshipDao.getPartyRelationship(relationShip);
		PartyRelationship partyRelationship;
		if (CollectionUtils.isNotEmpty(relationList)) {
			partyRelationship = relationList.get(0);
			// 企业id
			String entId = partyRelationship.getPartyIdTo();
			if (!StringUtils.isEmpty(entId)) {
				Party partyCer = new Party();
				partyCer.setId(entId);
				// 修改认证后的子账号审核通过状态
				updatePartyGroup(partyCer, null, status, comments, userId, null, null, null, null);
			}
		}
	}

	void insertCer(String key, String value, Party party, String userId) {
		PartyAttributes loaAttrs = new PartyAttributes();
		PartyAttribute loaAttr = new PartyAttribute();
		loaAttr.setKey(key);
		loaAttr.setValue(value);
		loaAttr.setCreator(userId);
		loaAttr.setCreatedDate(new Date());
		loaAttrs.setLoa(loaAttr);
		party.setPartyAttributes(loaAttrs);
		partyAttributeDao.insertLoa(party);
	}

	/**
	 * 生成关联关系
	 * 
	 * @param userId
	 * @param id(剛生成party的企業id)
	 * @param type  1.有普通的认证会员 2.vip会员 3.生成主账号
	 * @return void
	 * @since 2017年5月3日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	void saveRelationShip(String userId, String id, int type) {
		// 插入企业与注册用户的关联关系 主账号
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(userId);// 当前的登录用户partyId
		if (type == 1) {
			// 说明是申请企业
			relationShip.setRelationshipName("雇佣");
			relationShip.setRoleTypeIdFrom(RoleTypeEnum.EMPLOYEE.toString());
			relationShip.setPartyRelationshipTypeId(PartyRelationshipType.EMPLOYMENT);
			relationShip.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		} else if (type == 2 || type == 3) {
			// vip企业
			relationShip.setRoleTypeIdFrom(RoleTypeEnum.CORPORATION.toString());
			relationShip.setRoleTypeIdTo(RoleTypeEnum.VIP_CORPORATION.toString());
			relationShip.setPartyRelationshipTypeId(PartyRelationshipType.ENTERPRISE_CERTIFIED);
			relationShip.setRelationshipName("认证企业");

		} else {
			relationShip.setRoleTypeIdFrom(RoleTypeEnum.MAIN_ROLE.toString());
			relationShip.setPartyRelationshipTypeId(PartyRelationshipType.COS_PLAY);
			relationShip.setRelationshipName("职位代表");
			relationShip.setRoleTypeIdTo(RoleTypeEnum.CORPORATION.toString());
		}

		relationShip.setPartyIdTo(id);// 企业partyId
		relationShip.setStatusId(STATUS_ID);
		relationShip.setFromDate(new Date());
		if (type == 3) {
			relationShip.setThruDate(new Date());// 如果为3先失效调企业关系
		} else {
			relationShip.setThruDate(null);
		}

		relationShip.setCreator(userId);
		relationShip.setCreatedDate(new Date());
		relationShip.setLastUpdateUser(userId);
		relationShip.setLastUpdateDate(new Date());
		// 主账号和员工关系 子账号
		relationshipDao.insert(relationShip);
	}

	/**
	 * 企业授权委托书审核申请
	 * 
	 * @param apply
	 * @return void
	 * @since 2017年5月2日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void entApplyAuthorize(Apply apply) {
		// 主账号申请走审批流程
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(applyContent, EnterpriseVo.class);
			if (null != enterpriseVo) {
				try {
					String userId = RequestHelper.getLoginUserId();
					Party party = new Party();
					party.setId(enterpriseVo.getId());// 设置企业id
					// 修改partyGroup表设置为子账号状态为待审核状态
					updatePartyGroup(party, null, AccountStatus.ACCOUNT_WAIT_APPROVE, null, userId, null, null,
							new Date(), null);

					// 回调workFlow服务
					workflowClient.applyResource().createApply(apply, authorizationUtil.getLoginAuthorization());
					//给认证部发送邮件
					String urlMail = operationUrl + VERIFYURL;
					sendCerMail(urlMail, enterpriseVo.getName(), "子账号管理功能", "APPLY_LICENSE");

				} catch (Exception e) {
					logger.error("调用workflow服务异常：{}", e.getMessage(), e);
				}
			}

		}
	}

	/**
	 * 失效账号
	 * 
	 * @param id
	 * @param reason
	 * @return
	 * @since 2017年5月10日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void invalidAccount(String id, String reason) {
		// 自己失效
		Party party = new Party();
		party.setId(id);
		// 修改状态为失效
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setActiveStatus(ActiveStatus.INVALID);
		partyGroup.setComments(reason);
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);
		//失效原始企业
		partyGroupDao.invalidAccount(id,reason,ActiveStatus.INVALID);
	}

	/**
	 * 查询失效的企业,并且发送邮件给认证员和客服
	 * 
	 * @since 2017年5月11日
	 * @author zr.shuzuo@yikuyi.com
	 */
	public void enterpriseDocumentsExpiredJob() {
		List<EnterpriseExpiredVo> list = partyDao.getEnterpriseDocumentsExpiredList();
		if (CollectionUtils.isEmpty(list)) {
			return;
		}
		List<Party> partyList = personDao.findDataByRole(Arrays.asList("CUST_CERT_SPECIALIST", "CUSTOMER_SERVICE"));
		if (CollectionUtils.isEmpty(partyList)) {
			logger.error("认证和客户没有维护人员,请注意!");
			return;
		}
		StringBuilder tableStr = new StringBuilder();
		for (EnterpriseExpiredVo temp : list) {
			tableStr.append("<tr>").append("<td class='no_br'>").append(temp.getPartyCode()).append(TD_END_STR)
					.append(TD_START_STR).append(temp.getName()).append(TD_END_STR).append(TD_START_STR)
					.append(org.apache.commons.lang.StringUtils.isEmpty(temp.getOrgLimit()) ? temp.getHkEffectiveDate()
							: temp.getOrgLimit())
					.append(TD_END_STR).append("</tr>");
		}
		for (Party tempVo : partyList) {
			if (null == tempVo.getPerson()
					|| org.apache.commons.lang.StringUtils.isEmpty(tempVo.getPerson().getMail())) {
				continue;
			}
			MailInfoVo mailInfoVo = new MailInfoVo();
			JSONObject object = new JSONObject();
			object.put("tableValue", tableStr.toString());// 公司名称
			object.put("taskUrl", operationUrl + "/enterprise.htm?action=certificationEnt");// 链接
			object.put("toMail", tempVo.getPerson().getMail());
			object.put("portalUrl", portalServerUrlPrefix);// 公司logoUrl
			mailInfoVo.setTemplateId("DOCUMENT_EXPIRED");
			mailInfoVo.setContent(object);
			mailInfoVo.setTo(tempVo.getPerson().getMail());
			mailInfoVo.setType(EMAIL);
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		}
	}
	

	
}