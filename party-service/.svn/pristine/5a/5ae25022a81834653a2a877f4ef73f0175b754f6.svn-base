/*
 * Created: 2017年1月19日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.enterprise.bll;

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ibatis.session.RowBounds;
import org.jasig.inspektr.audit.annotation.Audit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.framework.springboot.audit.Param;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.ictrade.tools.export.ExportFactory;
import com.ictrade.tools.export.ExportProcesser;
import com.yikuyi.basedata.category.model.Category;
import com.yikuyi.message.mail.vo.MailInfoVo;
import com.yikuyi.party.common.utils.Constants;
import com.yikuyi.party.contact.model.ContactMech;
import com.yikuyi.party.contact.model.PostalAddress;
import com.yikuyi.party.contact.model.TelecomNumber;
import com.yikuyi.party.contact.model.TelecomNumber.FaxTelecomNumber;
import com.yikuyi.party.contact.model.TelecomNumber.PhoneTelecomNumber;
import com.yikuyi.party.contact.model.TelecomNumber.QqTelecomNumber;
import com.yikuyi.party.contact.vo.EnterpriseParamVo;
import com.yikuyi.party.contact.vo.EnterpriseVo;
import com.yikuyi.party.contact.vo.MsgResultVo;
import com.yikuyi.party.contact.vo.UserExtendVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.group.model.PartyGroup;
import com.yikuyi.party.group.model.PartyGroup.ActiveStatus;
import com.yikuyi.party.login.model.UserLogin;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyAttribute;
import com.yikuyi.party.model.PartyAttributes;
import com.yikuyi.party.model.PartyContactMech;
import com.yikuyi.party.model.PartyContactMech.PurposeType;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.dao.PartyAttributeDao;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.bll.PartyGroupManager;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.person.model.Person;
import com.yikuyi.party.person.model.Person.RelationSratus;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.shipAddress.bll.PartyContactMechManager;
import com.yikuyi.party.userLogin.dao.UserLoginDao;
import com.yikuyi.workflow.Apply;
import com.yikuyi.workflow.Apply.ApplyStatus;
import com.yikuyi.workflow.vo.ApplyVo;
import com.ykyframework.exception.SystemException;
import com.ykyframework.model.IdGen;
import com.ykyframework.mqservice.sender.MsgSender;
import com.ykyframework.oss.AliyunOSSAccount;
import com.ykyframework.oss.AliyunOSSHelper;


@Service
@Transactional
public class EnterpriseManager {
	private static final Logger logger = LoggerFactory.getLogger(EnterpriseManager.class);
	@Autowired
	private PartyDao partyDao;

	@Autowired
	private PartyAttributeDao partyAttributeDao;

	@Autowired
	private PartyContactMechManager partyContactMechManager;

	@Autowired
	private PartyGroupManager partyGroupManager;

	@Autowired
	private PartyGroupDao partyGroupDao;

	@Autowired
	private PartyRoleDao partyRoleDao;

	@Autowired
	private PersonDao personDao;
	
	@Autowired
	private UserLoginDao userLoginDao;
	
	@Autowired
	private PartyRelationshipDao partyRelationshipDao;


	private static final String STATUS_ID = "ENABLE";

	private static final int PAGE = 0;
	private static final int SIZE = 5;

	private static final String PARTY_BRIEF = "PARTY_BRIEF";//公司官网
	private static final String WEBSITE_URL = "WEBSITE_URL";//公司官网
	private static final String CORPORATION_CATEGORY_ID = "CORPORATION_CATEGORY_ID";//公司类型
	private static final String INDUSTRY_CATEGORY_ID = "INDUSTRY_CATEGORY_ID";//所属行业
	private static final String INDUSTRY_CATEGORY_ID_OTHER = "INDUSTRY_CATEGORY_ID_OTHER";//所属行业其它属性拓展属性
	private static final String D_CODE = "D_CODE";//邓氏编码
	private static final String BUSI_LIC_PIC = "BUSI_LIC_PIC";//营业执照图片key
	private static final String TAX_REG_PIC = "TAX_REG_PIC";//税务登记key
	private static final String OCC_PIC = "OCC_PIC";//组织机构
	private static final String LOA = "LOA";//企业委托
	private static final String INFO_LEVEL = "INFO_LEVEL";//个人信息完善度
	private static final String REG_ADDR = "REG_ADDR";//注册地
	private static final String BUSI_LIS_TYPE = "BUSI_LIS_TYPE";//执照类型
	private static final String LOA_PDF_NAME = "LOA_PDF_NAME";//企业授权pdf名字
	
	private static final String BUSI_PDF_NAME = "BUSI_PDF_NAME";//营业执照pdf名字
	private static final String TAX_PDF_NAME = "TAX_PDF_NAME";//税务登记pdf名字
	private static final String OCC_PDF_NAME = "OCC_PDF_NAME";//组织机构pdf名字
	private static final String NOTACTIVE = "notActive";//申请账户未激活或者关联
	
	private static final String RELATING = "relating";//申请账户关联审核中或者驳回中
	private static final String ACTIVING = "activing";//申请账户激活审核中或者驳回中
	private static final String ORG_REGISTER_FLOW = "ORG_REGISTER_FLOW";//申请激活流程
	
	private static final String RELATED = "related";//申请账户关联审核通过
	private static final String ACTIVED = "actived";//申请账户激活审核通过
	
	private static final String EMAIL = "EMAIL";//邮件类型
	private static final String INNERMAIL = "INNERMAIL";//站内信
	
	private static final String COMPANYNAME = "companyName";//公司名称
	
	private static final String EXPORT_TEMPLATE = "公司名称,公司类型,所属行业,公司官网,公司简介,公司注册地,联系人,联系电话,电子传真,QQ,详细地址";
	
	@Autowired
	private PartyRelationshipDao relationshipDao;

	// workflow 27090 前缀
	@Value("${api.workflow.serverUrlPrefix}")
	private String workflowUrlPrefix;
	
	// party  前缀
	@Value("${api.party.serverUrlPrefix}")
	private String partyServerUrlPrefix;
	
	//customer
	@Value("${customer.serverUrlPrefix}")
	private String customerServerUrlPrefix;
	
	@Autowired
	private RestTemplate restTemplate;

	public static final ObjectMapper mapper = new ObjectMapper();

	@Autowired
	private MsgSender msgSender;

	@Value("${mqConsumeConfig.sendMsgAndEmail.topicName}")
	private String sendMsgAndEmailTopicName;

	//项目前缀
	@Value("${operation.serverUrlPrefix}")
	private String operationUrl;
	
	@Autowired
	@Qualifier(value="aliyun.oss.account")
	private AliyunOSSAccount aliyunOSSAccount;
	
	
	//portal
	@Value("${portal.serverUrlPrefix}")
	private String portalServerUrlPrefix;
	
	@Value("${api.basedata.serverUrlPrefix}")
	private String serverUrl;
	/**
	 * 根据保存的Url获取原图、缩略图
	 * @param imgUrl 
	 * @return
	 * @since 2016年6月15日
	 * @author zr.xuheng@yikuyi.com
	 */
	public Map<String,String> getImgUrlMap(String imgUrl){
		Map<String,String> map = new HashMap<>();
		if(!StringUtils.isEmpty(imgUrl)){
			map = AliyunOSSHelper.getImageUrl(aliyunOSSAccount, imgUrl, 1000L, "UTF-8");
			if(imgUrl.toLowerCase().contains(".pdf")){
				map.put("type", "1");
			}else{
				map.put("type", "0");
			}
		}
		return map;
	}
	/**
	 * 根据保存的Url获取原图、缩略图
	 * @param imgUrl 
	 * @return
	 * @since 2016年6月15日
	 * @author zr.xuheng@yikuyi.com
	 */
	public String getImagUrl(String url){
		Map<String,String> map = getImgUrlMap(url);
		 return map.get("image");
		
	}

	/**
	 * 获取公司信息详情
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public EnterpriseVo getPartyDetail(String id) throws SystemException {
		EnterpriseVo entVo = new EnterpriseVo();
		String userId = RequestHelper.getLoginUserId();
		if (!StringUtils.isEmpty(id)) {
			userId = id;
		}
		// 是否是主账号 用来判断是否可编辑的权限
		Boolean isAdmin = isAdmin(userId);
		entVo.setIsAdmin(isAdmin);
		// 判断当前登录用户的状态
		String flag = isActivedOrRelationed(userId);
		// 根据当前登录id,查询企业的partyId
		PageInfo<Apply> pageinfo;
		// 没激活也没关联初始状态
		if (flag == NOTACTIVE) {
			// 主要用来控制当前企业账户是刚注册什么都没申请，显示缺省页的
			entVo.setIsActive(false);
			return entVo;
		} else if (flag == RELATING || flag == ACTIVING) {
			String url = workflowUrlPrefix + "/v1/apply/USER/" + userId;
			ApplyVo applyVo = new ApplyVo();
			applyVo.setPage(1);
			applyVo.setPageSize(1);
			HttpEntity<JSONObject> entity;
			try {
				entity = new HttpEntity<>(
						JSONObject.parseObject(new ObjectMapper().writeValueAsString(applyVo)));
			} catch (JsonProcessingException e) {
				throw new SystemException(e.getMessage(),e);
			}

			ParameterizedTypeReference<PageInfo<Apply>> responseEntity = new ParameterizedTypeReference<PageInfo<Apply>>() {
			};
			ResponseEntity<PageInfo<Apply>> response = restTemplate.exchange(url, HttpMethod.POST, entity,
					responseEntity);
			pageinfo = response.getBody();
			if (null == pageinfo || null == pageinfo.getList() || pageinfo.getList().isEmpty()) {
				entVo.setIsAdmin(false);
				entVo.setIsActive(false);
				return entVo;
			}
			Apply apply = pageinfo.getList().get(0);
			if (null == apply || StringUtils.isEmpty(apply.getApplyContent())) {
				entVo.setIsAdmin(false);
				entVo.setIsActive(false);
				return entVo;
			}

			String processId = apply.getProcessId();
			if (StringUtils.isEmpty(processId)) {
				entVo.setIsAdmin(false);
				entVo.setIsActive(false);
				return entVo;
			}
			if (processId.equals(ORG_REGISTER_FLOW)) {
				// 把jsonObject转化成对应的实体
				EnterpriseVo enterpriseVo = JSONObject.parseObject(apply.getApplyContent(), EnterpriseVo.class);
				// 激活中
				enterpriseVo.setIsActive(true);
				// 只能查看
				enterpriseVo.setIsAdmin(false);
				return enterpriseVo;
			} else {
				// 关联驳回
				entVo.setIsActive(false);
				entVo.setIsAdmin(false);
				return entVo;
			}
		}else if (flag == RELATED || flag == ACTIVED) {
			entVo.setIsActive(true);
			
		}
		String partyId;// 企业的partyId
		// 如果关联中第一次申请一直处于驳回状态直接缺省页
		Party p = partyDao.getPartyPersonDetail(userId);
		if (p != null && p.getCorporationId() != null) {
			partyId = p.getCorporationId();
		} else {
			// 针对刚注册的账号没有值插入到关联关系表中的情况
			entVo.setIsActive(false);
			return entVo;
		}
		return getPartyDetailByEntId(partyId, entVo, userId);
	}

	/**
	 * 根据企业ID获取企业相关信息
	 * 
	 * @param entId
	 * @param entVo
	 * @return
	 * @since 2017年2月16日
	 * @author gongtianyu@yikuyi.com
	 * @throws IOException
	 */
	public EnterpriseVo getPartyDetailByEntId(String entId, EnterpriseVo entVo,String userId){
		Party party = partyDao.getPartyDetail(entId, "");// 获取状态，公司名，图片
		if (null != party) {
			entVo.setId(party.getId());
			entVo.setVerifyStatus(party.getPartyStatus());
			entVo.setName(party.getPartyGroup().getGroupName());
			entVo.setLogo(party.getPartyGroup().getLogoImageUrl());
			
			// 获取属性
			getAttr(entVo, entId);
			// 调用服务获取企业联系信息
			List<PartyContactMech> partyContactMechList = partyContactMechManager
					.selectPartyContactMechByType(PurposeType.REGISTER_LOCATION, entId, null);
			if (null != partyContactMechList && !partyContactMechList.isEmpty()) {
				PartyContactMech partyContactMech = partyContactMechList.get(0);
				// 获取基本信息
				getContactMech(entVo, partyContactMech);
			}
		}
		return entVo;
	}

	private void getAttr(EnterpriseVo entVo, String partyId) {
		List<PartyAttribute> attrList = partyAttributeDao.getPartAttribute(partyId);
		List<Map<String, String>> maps = new ArrayList<>();
		if (null != attrList && !attrList.isEmpty()) {
			for (int i = 0; i < attrList.size(); i++) {
				PartyAttribute partyAttribute = attrList.get(i);
				// 公司简介
				if (partyAttribute.getKey().equals(PARTY_BRIEF)) {
					entVo.setDescription(partyAttribute.getValue());
				}

				// 公司官网
				if (partyAttribute.getKey().equals(WEBSITE_URL)) {
					entVo.setWebSite(partyAttribute.getValue());
				}
				// 公司类型
				if (partyAttribute.getKey().equals(CORPORATION_CATEGORY_ID)) {
					entVo.setCorCategory(partyAttribute.getValue());
				}
				// 所属行业
				if (partyAttribute.getKey().equals(INDUSTRY_CATEGORY_ID)) {
					entVo.setIndustryCategory(partyAttribute.getValue());
				}
				
				//所属行业其它属性拓展属性
				if (partyAttribute.getKey().equals(INDUSTRY_CATEGORY_ID_OTHER)) {
					Map<String, String> map = new HashMap<>();
					map.put(partyAttribute.getKey(), partyAttribute.getValue());
					maps.add(map);
				}
				
				//企业授权委托书pdf名
				if (partyAttribute.getKey().equals(LOA_PDF_NAME)) {
					Map<String, String> map = new HashMap<>();
					map.put(partyAttribute.getKey(), partyAttribute.getValue());
					maps.add(map);
				}
				//营业执照pdf名字
				if (partyAttribute.getKey().equals(BUSI_PDF_NAME)) {
					Map<String, String> map = new HashMap<>();
					map.put(partyAttribute.getKey(), partyAttribute.getValue());
					maps.add(map);
				}
				
				//税务登记pdf名字
				if (partyAttribute.getKey().equals(TAX_PDF_NAME)) {
					Map<String, String> map = new HashMap<>();
					map.put(partyAttribute.getKey(), partyAttribute.getValue());
					maps.add(map);
				}
				
				//组织机构pdf名字
				if (partyAttribute.getKey().equals(OCC_PDF_NAME)) {
					Map<String, String> map = new HashMap<>();
					map.put(partyAttribute.getKey(), partyAttribute.getValue());
					maps.add(map);
				}
				
				entVo.setOtherAttrs(maps);
				// 所属邓氏编码
				if (partyAttribute.getKey().equals(D_CODE)) {
					entVo.setdCode(partyAttribute.getValue());
				}
				
				// 营业执照
				if (partyAttribute.getKey().equals(BUSI_LIC_PIC) && !StringUtils.isEmpty(partyAttribute.getValue())) {
			    	entVo.setBusiLicPic(partyAttribute.getValue());
				}

				// 税务登记
				if (partyAttribute.getKey().equals(TAX_REG_PIC) && !StringUtils.isEmpty(partyAttribute.getValue())) {
			    		entVo.setTaxRegPic(partyAttribute.getValue());
				}

				// 组织机构
				if (partyAttribute.getKey().equals(OCC_PIC) && !StringUtils.isEmpty(partyAttribute.getValue())) {
			    		entVo.setOccPic(partyAttribute.getValue());
				}

				// 企业授权委托书
				if (partyAttribute.getKey().equals(LOA) && !StringUtils.isEmpty(partyAttribute.getValue())) {
			    		entVo.setLoaPic(partyAttribute.getValue());
					}
				// 资料是否完善
				if (partyAttribute.getKey().equals(INFO_LEVEL)) {
					entVo.setInfoLevel(partyAttribute.getValue());
				}
				
				// 注册地
				if (partyAttribute.getKey().equals(REG_ADDR)) {
					entVo.setRegisteAddr(partyAttribute.getValue());
				}
				
				// 营业执照类型
				if (partyAttribute.getKey().equals(BUSI_LIS_TYPE)) {
					entVo.setBusiLisType(partyAttribute.getValue());
				}

			}
		}
	}

	/**
	 * 获取公司信息抽取方法
	 * 
	 * @param id
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void getContactMech(EnterpriseVo entVo, PartyContactMech partyContactMech) {
		if (null != partyContactMech) {
			ContactMech contactMech = partyContactMech.getContactMech();
			if (null != contactMech.getId()) {
				// 地址信息
				PostalAddress postalAddress = contactMech.getPostalAddress();
				if (null != postalAddress) {
					entVo.setAddress(postalAddress.getAddress1());
					entVo.setProvince(postalAddress.getProvinceGeoId());
					entVo.setProvinceName(postalAddress.getProvinceGeoName());
					entVo.setCity(postalAddress.getCityGeoId());
					entVo.setCityName(postalAddress.getCityGeoName());
					entVo.setCountry(postalAddress.getCountyGeoId());
					entVo.setCountryName(postalAddress.getCountyGeoName());
				}
				entVo.setMail(contactMech.getEmail());
				// 电话信息
				TelecomNumber telecomNumber = contactMech.getTelecomNumber();
				getTeleInfo(entVo, telecomNumber);
			}
		}
	}
	private void getTeleInfo(EnterpriseVo entVo, TelecomNumber telecomNumber) {
		if (null != telecomNumber) {
			// 获取固定手机号码
			PhoneTelecomNumber tel = telecomNumber.getPhoneTelecomNumber();
			if (null != tel) {
				entVo.setContactUserTel(tel.getContactNumber());
				entVo.setContactUserName(tel.getAskForName());
			}
			// 获取QQ
			QqTelecomNumber qq = telecomNumber.getQqTelecomNumber();
			if (null != qq) {
				entVo.setContactUserQQ(qq.getContactNumber());
			}

			// 电子传真
			FaxTelecomNumber fax = telecomNumber.getFaxTelecomNumber();
			if (null != fax) {
				entVo.setFax(fax.getContactNumber());
			}

		}
	}

	/**
	 * 修改公司信息
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void updateParty(EnterpriseVo entVo) throws IOException {
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(entVo.getId());
		party.setPartyType(PartyType.PARTY_GROUP);
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		partyDao.updateParty(party);

		// 修改企业名和logo
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setGroupName(entVo.getName());
		partyGroup.setLastUpdateUser(userId);
		partyGroup.setLastUpdateDate(new Date());
		partyGroup.setLogoImageUrl(entVo.getLogo());
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);
		// 修改企業屬性
		updatePartyAttr(entVo, party);

		// 修改公司注册信息
		saveBaseInfo(entVo, entVo.getId());

	}

	/**
	 * 抽取方法修改企业属性信息
	 * 
	 * @param id
	 * @return EnterpriseVo,party
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void updatePartyAttr(EnterpriseVo entVo, Party party) {
		// 修改企业属性
		// 邓氏编码
		// 为了不多写方法所以用ExternalId代替attr_name,Description代替attr_value
		updateAttr(D_CODE, entVo.getdCode(), party);
		// 公司类型
		updateAttr(CORPORATION_CATEGORY_ID, entVo.getCorCategory(), party);

		// 所属行业
		updateAttr(INDUSTRY_CATEGORY_ID, entVo.getIndustryCategory(), party);
		// 公司官网
		updateAttr(WEBSITE_URL, entVo.getWebSite(), party);

		// 公司简介
		updateAttr(PARTY_BRIEF, entVo.getDescription(), party);
		// 修改营业执照1111 BUSI_LIC_PIC
		updateAttr(BUSI_LIC_PIC, entVo.getBusiLicPic(), party);
		// 税务机构TAX_REG_PIC
		updateAttr(TAX_REG_PIC, entVo.getTaxRegPic(), party);
		// 机构管理OCC_PIC
		updateAttr(OCC_PIC, entVo.getOccPic(), party);
		// 授权委托书LOA
		updateAttr(LOA, entVo.getLoaPic(), party);

		// 如果原本是图片后来修改成pdf则需要新增pdf名字，否则修改pdf名字
		// 设置other值
		List<Map<String, String>> otherAttrs = entVo.getOtherAttrs();
		if (otherAttrs == null || otherAttrs.isEmpty()) {
			return;
		}
		PartyAttributes otherAttr;
		PartyAttribute other;
		String mapKey;
		// 循环得到key
		for (Map<String, String> map : otherAttrs) {
			Iterator<String> iterator = map.keySet().iterator();
			while (iterator.hasNext()) {
				mapKey = iterator.next();
				PartyAttribute attrBusi = partyAttributeDao.getAttrByKey(party.getId(), mapKey);
				otherAttr = new PartyAttributes();
				other = new PartyAttribute();
				if (null != attrBusi) {
					party.setDescription(map.get(mapKey));
					party.setExternalId(mapKey);
					partyAttributeDao.updateEnterpriseAttribute(party);
				} else {
					other.setKey(mapKey);// 将map的key设置给partyAttribute的key
					other.setValue(map.get(mapKey));// 将map的value设置给partyAttribute的value
					otherAttr.setOtherAttrs(other);
					party.setPartyAttributes(otherAttr);
					partyAttributeDao.insertOtherAttrs(party);
				}
			}

		}

	}

	
	void updateAttr(String key,String value,Party party){
		party.setExternalId(key);
		party.setDescription(value);
		partyAttributeDao.updateEnterpriseAttribute(party);
	}
	/**
	 * 账户激活审核成功保存数据
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void save(JSONObject jsonObject) {
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		String userId = RequestHelper.getLoginUserId();
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			// 驳回
			if (apply.getStatus() == ApplyStatus.REJECT) {
				Party party = new Party();
				party.setId(apply.getApplyOrgId());
				// 修改partyGrop的状态
				PartyGroup partyGroup = new PartyGroup();
				partyGroup.setLastUpdateUser(userId);
				partyGroup.setActiveStatus(ActiveStatus.REJECTED);
				partyGroup.setLastUpdateDate(new Date());
				party.setPartyGroup(partyGroup);
				partyGroupDao.updatePartyGroup(party);
				//修改关联关系变为失效
				PartyRelationship relation = new PartyRelationship();
				relation.setPartyIdFrom(apply.getApplyUserId());
				relation.setPartyIdTo(apply.getApplyOrgId());// 企业partyId
				relation.setRoleTypeIdTo(RoleType.CORPORATION);
				relation.setThruDate(new Date());
				relation.setLastUpdateDate(new Date());
				relationshipDao.updateRelationShip(relation);
				String urlMail=customerServerUrlPrefix+"/enterprise.htm";
				  //查询认证部邮件
				commonMsg(MailInfoVo.TemplateId.ACTIVE_REJECT.toString(),MailInfoVo.Type.EMAIL.toString(),enterpriseVo.getMail(),urlMail,enterpriseVo.getName(),apply.getReason());
				sendInnerMail("ACTIVE_REJECT", urlMail, enterpriseVo);
			} else {
				// 审核成功
				if (null != enterpriseVo) {
					saveApply(enterpriseVo, apply.getApplyOrgId(), apply.getApplyUserId());
					commonMsg(MailInfoVo.TemplateId.ACTIVE_PASS.toString(),MailInfoVo.Type.EMAIL.toString(),enterpriseVo.getMail(),null,null,null);
					sendInnerMail("ACTIVE_PASS", null, enterpriseVo);
				}
			}
		}
	}

	/**
	 * 抽取激活账户审核成功信息
	 * 
	 * @param enterpriseVo，id为企业id,applyId申请的会员id,
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void saveApply(EnterpriseVo entVo, String id, String applyId) {
		String userId = RequestHelper.getLoginUserId();
		Party party = new Party();
		party.setId(id);
		party.setPartyStatus(PartyStatus.PARTY_ENABLED);
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userId);
		partyDao.updateParty(party);

		// 修改企业名和logo
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setGroupName(entVo.getName());
		partyGroup.setLastUpdateUser(userId);
		partyGroup.setLastUpdateDate(new Date());
		partyGroup.setLogoImageUrl(entVo.getLogo());
		partyGroup.setActiveStatus(ActiveStatus.PARTY_VERIFIED);// 审核成功为激活
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);

		// 插入属性表,公司类型
		PartyAttributes corCategoryAttrs = new PartyAttributes();
		PartyAttribute corCategoryAttr = new PartyAttribute();
		corCategoryAttr.setKey(CORPORATION_CATEGORY_ID);
		corCategoryAttr.setValue(entVo.getCorCategory());
		corCategoryAttrs.setCorporationCategory(corCategoryAttr);
		party.setPartyAttributes(corCategoryAttrs);
		partyAttributeDao.insertCorporationCategory(party);

		// 插入属性表,所属行业
		PartyAttributes industryAttrs = new PartyAttributes();
		PartyAttribute industryAttr = new PartyAttribute();
		industryAttr.setKey(INDUSTRY_CATEGORY_ID);
		industryAttr.setValue(entVo.getIndustryCategory());
		industryAttrs.setIndustryCategory(industryAttr);
		party.setPartyAttributes(industryAttrs);
		partyAttributeDao.insertIndustryCategory(party);
		//设置other值  
		List<Map<String, String>> otherAttrs = entVo.getOtherAttrs();
		if (otherAttrs!=null && !otherAttrs.isEmpty()) {
			PartyAttributes otherAttr ;
			PartyAttribute other;
			//循环得到key
			for (Map<String, String> map : otherAttrs) {
				Iterator<String> iterator = map.keySet().iterator();
				while (iterator.hasNext()) {
					String mapKey = iterator.next();
					otherAttr = new PartyAttributes();
					other = new PartyAttribute();
					other.setKey(mapKey);//将map的key设置给partyAttribute的key
					other.setValue(map.get(mapKey));//将map的value设置给partyAttribute的value
					otherAttr.setOtherAttrs(other);
					party.setPartyAttributes(otherAttr);
					partyAttributeDao.insertOtherAttrs(party);
				}
			}
		}

		// 插入公司官网
		PartyAttributes webSiteAttrs = new PartyAttributes();
		PartyAttribute webSiteAttr = new PartyAttribute();
		webSiteAttr.setKey(WEBSITE_URL);
		webSiteAttr.setValue(entVo.getWebSite());
		webSiteAttrs.setWebSite(webSiteAttr);
		party.setPartyAttributes(webSiteAttrs);
		partyAttributeDao.insertWebSite(party);

		// 插入公司简介
		PartyAttributes corDescriptionAttrs = new PartyAttributes();
		PartyAttribute corDescriptionAttr = new PartyAttribute();
		corDescriptionAttr.setKey(PARTY_BRIEF);
		corDescriptionAttr.setValue(entVo.getDescription());
		corDescriptionAttrs.setCorDescription(corDescriptionAttr);
		party.setPartyAttributes(corDescriptionAttrs);
		partyAttributeDao.insertCorDescription(party);

		// 公司资质营业执照
		PartyAttributes picAttrs = new PartyAttributes();
		String attrId = String.valueOf(IdGen.getInstance().nextId());
		
		List<PartyAttribute> corporationQualData = new ArrayList<>();
		// 营业执照
		PartyAttribute busiLicPicAttr = new PartyAttribute();
		busiLicPicAttr.setKey(BUSI_LIC_PIC);
		busiLicPicAttr.setValue(entVo.getBusiLicPic());
		busiLicPicAttr.setAttrId(attrId);
		corporationQualData.add(busiLicPicAttr);

		// 税务登记
		PartyAttribute taxRegPicAttr = new PartyAttribute();
		taxRegPicAttr.setKey(TAX_REG_PIC);
		taxRegPicAttr.setValue(entVo.getTaxRegPic());
		String attrIdTax = String.valueOf(IdGen.getInstance().nextId());
		taxRegPicAttr.setAttrId(attrIdTax);
		corporationQualData.add(taxRegPicAttr);

		// 组织机构代码
		PartyAttribute occPicAttr = new PartyAttribute();
		occPicAttr.setKey(OCC_PIC);
		occPicAttr.setValue(entVo.getOccPic());
		String attrIdOcc = String.valueOf(IdGen.getInstance().nextId());
		occPicAttr.setAttrId(attrIdOcc);
		corporationQualData.add(occPicAttr);

		// 企业授权委托书
		PartyAttribute loaPicAttr = new PartyAttribute();
		loaPicAttr.setKey(LOA);
		loaPicAttr.setValue(entVo.getLoaPic());
		String attrIdLoa = String.valueOf(IdGen.getInstance().nextId());
		loaPicAttr.setAttrId(attrIdLoa);
		corporationQualData.add(loaPicAttr);
		// 把值插入到资质图片列表中
		picAttrs.setCorporationQualData(corporationQualData);
		party.setPartyAttributes(picAttrs);
		partyAttributeDao.insertCorporationQualData(party);

		// 邓氏编码
		PartyAttributes dCodeAttrs = new PartyAttributes();
		PartyAttribute dCodeAttr = new PartyAttribute();
		dCodeAttr.setKey(D_CODE);
		dCodeAttr.setValue(entVo.getdCode());
		dCodeAttrs.setdCode(dCodeAttr);
		party.setPartyAttributes(dCodeAttrs);
		partyAttributeDao.insertDCode(party);

		// 资料完善度
		PartyAttributes infoLevels = new PartyAttributes();
		PartyAttribute infoLevel = new PartyAttribute();
		infoLevel.setKey(INFO_LEVEL);
		infoLevel.setValue(entVo.getInfoLevel());
		infoLevels.setInfoLevel(infoLevel);
		party.setPartyAttributes(infoLevels);
		partyAttributeDao.insertInfoLevel(party);
		
		//插入注册地0大陆1香港registeAddr、REG_ADDR
		PartyAttributes registeAddrs = new PartyAttributes();
		PartyAttribute registeAddr = new PartyAttribute();
		registeAddr.setKey(REG_ADDR);
		registeAddr.setValue(entVo.getRegisteAddr());
		registeAddrs.setRegisteAddr(registeAddr);
		party.setPartyAttributes(registeAddrs);
		partyAttributeDao.insertRegAddr(party);
		
		//插入资质类型
		PartyAttributes busiLisTypes = new PartyAttributes();
		PartyAttribute busiLisType = new PartyAttribute();
		busiLisType.setKey(BUSI_LIS_TYPE);
		busiLisType.setValue(entVo.getBusiLisType());
		busiLisTypes.setBusiLisType(busiLisType);
		party.setPartyAttributes(busiLisTypes);
		partyAttributeDao.insertBusiLisType(party);
		

		// 插入角色表
		partyRoleDao.insert(id, RoleType.MAIN_ROLE.toString(), userId, new Date(), userId, new Date());
		// 插入企业与注册用户的关联关系 主账号
		updateRelationShip(entVo, userId, id);
		// 插入地址信息
		saveBaseInfo(entVo, id);

	}

	/**
	 * 修改关联关系
	 * 
	 * @param userId,id(剛生成party的企業id)
	 * @return String
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void updateRelationShip(EnterpriseVo entVo, String userId, String id) {
		PartyRelationship relation = new PartyRelationship();
		relation.setPartyIdTo(id);// 企业partyId
		relation.setPartyIdFrom(entVo.getId());
		relation.setRoleTypeIdTo(RoleType.CORPORATION);
		relation.setThruDate(new Date());
		relation.setLastUpdateUser(userId);
		relation.setLastUpdateDate(new Date());
		relationshipDao.updateRelationShip(relation);
		//又重新插入一条
		saveRelationShip(entVo.getId(),id);

	}

	/**
	 * 账户激活保存信息
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void activeAccountSave(Apply apply) {
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null != enterpriseVo) {
				String url = "";
				try {
					// 插入到party表
					Party party = new Party();
					String userId = RequestHelper.getLoginUserId();
					String id = String.valueOf(IdGen.getInstance().nextId());
					party.setId(id);
					party.setPartyType(PartyType.PARTY_GROUP);
					// 待审核
					party.setPartyStatus(PartyStatus.PARTY_ENABLED);
					party.setCreatedDate(new Date());
					party.setCreator(userId);
					partyDao.insert(party);

					// 修改给当前登录用户corporationId插入企业id,用来判断是企业还是个人用户
					Party party1 = new Party();
					party1.setId(userId);
					party1.setCorporationId(id);
					party1.setLastUpdateDate(new Date());
					party1.setLastUpdateUser(userId);
					partyDao.updateParty(party1);

					// 插入group表
					PartyGroup partyGroup = new PartyGroup();
					partyGroup.setGroupName(enterpriseVo.getName());
					partyGroup.setCreator(userId);
					partyGroup.setCreatedDate(new Date());
					partyGroup.setActiveStatus(ActiveStatus.WAIT_APPROVE);// 待审核
					party.setPartyGroup(partyGroup);
					partyGroupDao.insert(party);

					// 插入企业与注册用户的关联关系 主账号
					saveRelationShip(userId, id);

					apply.setApplyOrgId(id);// 企业id
					apply.setApplyUserId(userId);

					// 调用workFlow服务
					url = workflowUrlPrefix + "/v1/apply";
					HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
					ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
					};
					restTemplate.exchange(url, HttpMethod.POST, requestEntity,responseEntity);
					try {
						String urlMail = operationUrl + "/verify.htm";
						// 获取申请的用户名
						Party p = personDao.findPersonById(userId);
						String applyName = "";
						if (null != p && null != p.getPerson()
								&& !StringUtils.isEmpty(p.getPerson().getLastNameLocal())) {
							applyName = p.getPerson().getLastNameLocal();
						}
						sendCerMail(urlMail, applyName);
					} catch (Exception e) {
						logger.error("发送激活邮件MQ出错:{}", e);
					}

				} catch (Exception e) {
					logger.error("调用workflow服务异常：{}", e.getMessage(),e);
				}
			}

		}

	}
	private void sendCerMail(String urlMail, String applyName) {
		// 查询认证部邮件
		List<Party> cerPartyList = personDao.findSpecialist();
		if (null != cerPartyList && !cerPartyList.isEmpty()) {
			for (int i = 0; i < cerPartyList.size(); i++) {
				Party partyMail = cerPartyList.get(i);
				if (null != partyMail) {
					//获取认证部的名字
					String cerName = "";
					if (null != partyMail.getPerson()
							&& !StringUtils.isEmpty(partyMail.getPerson().getLastNameLocal())) {
						cerName = partyMail.getPerson().getLastNameLocal();
					}
					//要发送的邮件
					String email = userLoginDao.findUserLogin(partyMail.getId(), EMAIL);

					MailInfoVo mailInfoVo = new MailInfoVo();
					JSONObject object = new JSONObject();
					object.put("cerName", cerName);// 认证部名称
					SimpleDateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					object.put("applyDate", dfDate.format(new Date()));// 申请时间
					
					object.put("applyName", applyName);// 申请用户
					object.put("urlMail", urlMail);// 链接
					String logoPrefix = portalServerUrlPrefix;//portal项目前缀
					object.put("portalUrl", logoPrefix);//公司logoUrl
					mailInfoVo.setTemplateId("APPLY_ACTIVE");
					mailInfoVo.setContent(object);
					mailInfoVo.setTo(email);
					mailInfoVo.setType(EMAIL);
					msgSender.sendMsg(sendMsgAndEmailTopicName,mailInfoVo, null);
				}
			}
		}
	}
	public void commonMsg(String templateId,String type,String toAddress,String url,String companyName,String reson){
		 MailInfoVo mailInfoVo = new MailInfoVo();
		  mailInfoVo.setTemplateId(templateId);
		  mailInfoVo.setType(type);
		  mailInfoVo.setTo(toAddress);
		  JSONObject object = new JSONObject();
		  object.put("url", url);// 认证部名称
		  object.put(COMPANYNAME, companyName);// 认证部名称
		  object.put("applyReason", reson);// 认证部名称
		  mailInfoVo.setContent(object);
		  logger.info("激活账户邮件参数：{}",JSONObject.toJSON(mailInfoVo).toString());
		  msgSender.sendMsg(sendMsgAndEmailTopicName,mailInfoVo, null);
	}
	
	/**
	 * 发送站内信
	 * @param emplateId
	 * @param url
	 * @param vo
	 * @since 2017年2月21日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void sendInnerMail(String emplateId,String url,EnterpriseVo vo){
		try{
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(emplateId);
			mailInfoVo.setType(INNERMAIL);
			mailInfoVo.setTo(vo.getId());
			JSONObject content = new JSONObject();
			content.put("url", url);
			mailInfoVo.setTo(vo.getId());
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("站内信邮件发送失败：{}",e);
		}
	}

	/**
	 * 企业与注册用户的关联关系 主账号
	 * 
	 * @param userId,id(剛生成party的企業id)
	 * @return String
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void saveRelationShip(String userId, String id) {
		// 插入企业与注册用户的关联关系 主账号
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(userId);// 当前的登录用户partyId
		relationShip.setPartyIdTo(id);// 企业partyId
		relationShip.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		relationShip.setRoleTypeIdTo(RoleType.CORPORATION);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.COS_PLAY);
		relationShip.setRelationshipName("职位代表");
		relationShip.setStatusId(STATUS_ID);
		relationShip.setFromDate(new Date());
		relationShip.setThruDate(null);
		relationShip.setCreator(userId);
		relationShip.setCreatedDate(new Date());
		relationShip.setLastUpdateUser(userId);
		relationShip.setLastUpdateDate(new Date());
		// 主账号和员工关系 子账号
		relationshipDao.insert(relationShip);
		relationShip.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.EMPLOYMENT);
		relationShip.setRelationshipName("雇佣");
		relationshipDao.insert(relationShip);
	}

	/**
	 * 保存地址信息
	 * 
	 * @param UserExtendVo
	 * @return UserExtendVo
	 * @since 2016年1月12日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	private void saveBaseInfo(EnterpriseVo entVo, String partyId) {
		if (null != entVo) {
			PartyContactMech partyContactMech = new PartyContactMech();
			partyContactMech.setPurposeType(PurposeType.REGISTER_LOCATION);
			ContactMech contactMech = new ContactMech();
			PostalAddress postalAddress = new PostalAddress();
			postalAddress.setAddress1(entVo.getAddress());
			postalAddress.setCountryGeoName("中国");
			postalAddress.setCountryGeoId("china");

			postalAddress.setProvinceGeoName(entVo.getProvinceName());
			postalAddress.setProvinceGeoId(entVo.getProvince());

			postalAddress.setCountyGeoName(entVo.getCountryName());
			postalAddress.setCountyGeoId(entVo.getCountry());

			postalAddress.setCityGeoName(entVo.getCityName());
			postalAddress.setCityGeoId(entVo.getCity());

			contactMech.setPostalAddress(postalAddress);

			// 企业
			contactMech.setEmail(entVo.getMail());
			// 电话信息
			TelecomNumber telecomNumber = new TelecomNumber();
			// 设置固定电话
			PhoneTelecomNumber tel = new PhoneTelecomNumber();
			tel.setContactNumber(entVo.getContactUserTel());
			tel.setAskForName(entVo.getContactUserName());
			telecomNumber.setPhoneTelecomNumber(tel);
			// 设置qq
			QqTelecomNumber qq = new QqTelecomNumber();
			qq.setContactNumber(entVo.getContactUserQQ());
			telecomNumber.setQqTelecomNumber(qq);

			// 传真
			FaxTelecomNumber fax = new FaxTelecomNumber();
			fax.setContactNumber(entVo.getFax());
			telecomNumber.setFaxTelecomNumber(fax);

			contactMech.setTelecomNumber(telecomNumber);
			partyContactMech.setContactMech(contactMech);
			partyContactMech.setPartyId(partyId);
			partyContactMechManager.insert(partyContactMech);
			
			//更新person表
			Party partyNew = new Party();
			Person person = new Person();
			partyNew.setId(partyId);
			person.setTel(entVo.getContactUserTel());
			person.setLastUpdateDate(new Date());
			person.setLastUpdateUser(partyId);
			partyNew.setPerson(person);
			personDao.editPerson(partyNew);

		}
	}

	/**
	 * 根据账号查询管理员信息
	 * 
	 * @param id
	 * @param role
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getAdmin(String id, String role) {
		UserVo userVo = new UserVo();
		if (!"admin".equals(role)) {
			return userVo;
		}
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList == null || relationshipList.isEmpty()) {
			return userVo;
		}
		partyRelationship = relationshipList.get(0);
		// 企业id
		String entId = partyRelationship.getPartyIdTo();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// 根据企业id查询企业名称
		Party party = partyDao.getPartyDetail(entId, null);
		if (party != null && party.getPartyGroup() != null) {
			String companyName = party.getPartyGroup().getGroupName();
			userVo.setCompanyName(companyName);
		}
		// 关联时间
		String relationDate = formatter.format(partyRelationship.getFromDate());
		userVo.setRelationDate(relationDate);
		// 根据企业id查询管理员id
		PartyRelationship partyRelationship1 = new PartyRelationship();
		partyRelationship1.setPartyIdTo(entId);
		partyRelationship1.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship1.setRoleTypeIdTo(RoleType.CORPORATION);
		relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship1);
		if (relationshipList == null || relationshipList.isEmpty()) {
			return userVo;
		}
		String adminId = relationshipList.get(0).getPartyIdFrom();

		// 根据管理员id查询邮箱地址,名称
		Party party1 = partyDao.getPartyPersonDetail(adminId);

		if (party1 != null && party1.getPerson() != null) {
			userVo.setName(party1.getPerson().getLastNameLocal());
		}

		// 获取企业联系信息
		String email = userLoginDao.findUserLogin(adminId, EMAIL);
		userVo.setMail(email);

		return userVo;
	}
	/**
	 * 关联成功之后的回调函数
	 * 添加企业账号与子账户的关联关系
	 * 
	 * @param jsonObject
	 * @return
	 * @since 2017年1月22日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo addEnterPriserelation(JSONObject jsonObject) {
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		MsgResultVo vo = new MsgResultVo();
		vo.setCode(Constants.FAILED);
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			List<String> ids = new ArrayList<>();
			ids.add(enterpriseVo.getId());
			String mailAddr = "";
			List<UserLogin> logins = userLoginDao.findUserBypartyid(ids);
			if (logins!=null && !logins.isEmpty()) {
				mailAddr = logins.get(0).getId();
			}
			Party party = new Party();
			if (apply.getStatus() == ApplyStatus.REJECT) {
				// 驳回 修改状态为关联失败
				Person person = new Person();
				person.setRelationSratus(RelationSratus.REJECTED);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(enterpriseVo.getId());
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				party.setId(enterpriseVo.getId());
				party.setPerson(person);
				personDao.editPerson(party);
				//发送邮件和站内信
				relactionFailedSendMailAndMessage(mailAddr,enterpriseVo,apply.getReason());
				vo.setCode(Constants.SUCCESS);
				return vo;
			} else if (apply.getStatus() == ApplyStatus.WAIT_APPROVE) {
				// 审核中 修改对应状态为审核中
				Person person = new Person();
				person.setRelationSratus(RelationSratus.WAIT_APPROVE);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(enterpriseVo.getId());
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				party.setId(enterpriseVo.getId());
				party.setPerson(person);
				personDao.editPerson(party);
				vo.setCode(Constants.SUCCESS);
				return vo;

			} else if (apply.getStatus() == ApplyStatus.APPROVED) {
				// 成功 修改状态为已关联且生成关联关系
				Person person = new Person();
				person.setRelationSratus(RelationSratus.RELATED);
				person.setLastUpdateDate(new Date());
				person.setLastUpdateUser(enterpriseVo.getId());
				person.setLastNameLocal(enterpriseVo.getContactUserName());
				party.setId(enterpriseVo.getId());
				party.setPerson(person);
				personDao.editPerson(party);
				vo = this.savePartyRelationship(enterpriseVo);
				saveBaseInfo(enterpriseVo,enterpriseVo.getId());
				//更新企业id
				Party party1 = new Party();
				party1.setId(enterpriseVo.getId());
				party1.setCorporationId(enterpriseVo.getRelationEnterpriseId());
				party1.setLastUpdateDate(new Date());
				party1.setLastUpdateUser(enterpriseVo.getId());
				partyDao.updateParty(party1);
				//发送邮件和站内信
				relactionSuccessSendMailAndMessage(mailAddr,enterpriseVo);
				return vo;
			}
		}
		return vo;
	}
	
	/**
	 * 请求关联
	 * @param id
	 * @param apply
	 * @return
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo editRelationStatus(String id, Apply apply) {
		String url = workflowUrlPrefix + "/v1/apply";
		String userId = RequestHelper.getLoginUserId();
		apply.setApplyOrgId(id);// 被关联的企业id
		apply.setApplyUserId(userId);
		apply.setCallBackUrl(partyServerUrlPrefix+"/v1/enterprises/relation");
		MsgResultVo vo = new MsgResultVo();
		try {
			HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
			ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
			};
			restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseEntity);
			
			Party party = new Party();
			Person person = new Person();
			person.setRelationSratus(RelationSratus.WAIT_APPROVE);
			person.setLastUpdateDate(new Date());
			person.setLastUpdateUser(userId);
			party.setId(userId);
			party.setPerson(person);
			personDao.editPerson(party);
			//发送邮件和站内信
			requestTrlationsendMailAndMessage(id,apply);
			vo.setCode(Constants.SUCCESS);
			return vo;
		} catch (Exception e) {
			logger.error("调用workflow服务异常：{},服务地址：{}", e, url);
			vo.setCode(Constants.FAILED);
		}
		return  vo;
		
	}
	
	/**
	 * 关联成功发送站内信和邮件
	 * @param mailAddr
	 * @param companyName
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public void relactionSuccessSendMailAndMessage(String mailAddr ,EnterpriseVo vo){
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId("RELEVANCY_PASS");
			mailInfoVo.setType(EMAIL);
			mailInfoVo.setTo(mailAddr);
			JSONObject content = new JSONObject();
			content.put(COMPANYNAME, vo.getName());
			mailInfoVo.setContent(content);
			logger.error("关联成功发送邮件");
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
			PartyRelationship relationship = partyRelationshipDao.findpartyIdByEnterpriseId(vo.getRelationEnterpriseId());
			if (relationship!=null) {
				mailInfoVo.setFrom(relationship.getPartyIdFrom());
			}
			mailInfoVo.setType(INNERMAIL);
			mailInfoVo.setTo(vo.getId());
			 logger.info("账户关联邮件参数：{}",JSONObject.toJSON(mailInfoVo).toString());
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("关联成功发送邮件异常：{}",e);
		}
	}
	
	
	/**
	 * 关联驳回发送邮件和站内信
	 * @param mailAddr
	 * @param companyName
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public void relactionFailedSendMailAndMessage(String mailAddr ,EnterpriseVo vo,String reson){
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId("RELEVANCY_REJECT");
			mailInfoVo.setType(EMAIL);
			mailInfoVo.setTo(mailAddr);
			JSONObject content = new JSONObject();  
			content.put(COMPANYNAME, vo.getName());
			String callbackUrl = customerServerUrlPrefix+"/enterprise.htm";
			content.put("url", callbackUrl);
			content.put("applyReason", reson);
			mailInfoVo.setContent(content);
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
			PartyRelationship relationship = partyRelationshipDao.findpartyIdByEnterpriseId(vo.getRelationEnterpriseId());
			if (relationship!=null) {
				mailInfoVo.setFrom(relationship.getPartyIdFrom());
			}
			mailInfoVo.setType(INNERMAIL);

			mailInfoVo.setTo(vo.getId());
			
			msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
		} catch (Exception e) {
			logger.error("关联失败发送邮件异常：{}",e);
		}
		
	}
	/**
	 * 申请关联发送邮件和站内信
	 * @param id
	 * @param apply
	 * @since 2017年2月18日
	 * @author tb.yumu@yikuyi.com
	 */
	public void requestTrlationsendMailAndMessage(String id , Apply apply){
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdTo(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		//查询要关联的企业的登录partyid
		List<PartyRelationship>  partyRelationships = partyRelationshipDao.getPartyRelationship(partyRelationship);
		List<String> ids = new ArrayList<>();
		ids.add(partyRelationships.get(0).getPartyIdFrom());
		List<UserLogin> logins = userLoginDao.findUserBypartyid(ids);
		if (logins!=null&& !logins.isEmpty()) {
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			try {
				//调用发送邮件
				String partyId = RequestHelper.getLoginUserId();
				MailInfoVo mailInfoVo = new MailInfoVo();
										
				mailInfoVo.setTemplateId("JOIN_ACCOUNT");
				mailInfoVo.setType(EMAIL);
				mailInfoVo.setTo(logins.get(0).getId());
				mailInfoVo.setOperateUser(RequestHelper.getLoginUser().getUsername());
				mailInfoVo.setOperatorName(enterpriseVo.getContactUserName());
				JSONObject content = new JSONObject();  
				content.put("operateUser", RequestHelper.getLoginUser().getUsername());
				content.put("operatorName", enterpriseVo.getContactUserName());
				content.put(COMPANYNAME, enterpriseVo.getName());
				content.put("applyReason", enterpriseVo.getReason());
				String callbackUrl = customerServerUrlPrefix+"/enterprise.htm";
				content.put("url", callbackUrl);
				mailInfoVo.setContent(content);
				logger.info("申请关联发送邮件，邮件参数：{}",JSONObject.toJSON(mailInfoVo));
				msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				//发送站内信
				PartyRelationship relationship = partyRelationshipDao.findpartyIdByEnterpriseId(enterpriseVo.getRelationEnterpriseId());
				if (relationship!=null) {
					mailInfoVo.setTo(relationship.getPartyIdFrom());
				}
				mailInfoVo.setTemplateId("RELEVANCY_APPLY");
				mailInfoVo.setCc(RequestHelper.getLoginUser().getUsername());//用抄送地址封装邮箱给消息使用
				mailInfoVo.setType(INNERMAIL);

				mailInfoVo.setFrom(partyId);
				msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
			} catch (Exception e) {
				logger.error("申请关联成功发送邮件异常：{}",e);
			}
			
		}
		
	}

	/**
	 * 保存企业关联关系
	 * 
	 * @param enterpriseVo
	 * @return
	 * @since 2017年2月13日
	 * @author tb.yumu@yikuyi.com
	 */
	public MsgResultVo savePartyRelationship(EnterpriseVo enterpriseVo) {
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(enterpriseVo.getId());
		partyRelationship.setPartyIdTo(enterpriseVo.getRelationEnterpriseId());
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		partyRelationship.setPartyRelationshipTypeId(PartyRelationshipType.EMPLOYMENT);
		partyRelationship.setStatusId(STATUS_ID);
		partyRelationship.setCreator(enterpriseVo.getRelationEnterpriseId());
		partyRelationship.setLastUpdateUser(enterpriseVo.getId());
		Date date = new Date();
		partyRelationship.setFromDate(date);
		partyRelationship.setCreatedDate(date);
		partyRelationship.setLastUpdateDate(date);
		int num = partyRelationshipDao.insert(partyRelationship);
		MsgResultVo vo = new MsgResultVo();
		if (num > 0) {
			vo.setCode(Constants.SUCCESS);
		} else {
			vo.setCode(Constants.FAILED);
		}
		return vo;
	}

	/**
	 * 根据输入名字联想出公司名称
	 * 
	 * @param name
	 * @return
	 * @since 2017年1月23日
	 * @author tb.yumu@yikuyi.com
	 */
	public List<EnterpriseVo> associateEnterpriseList(String name) {
		EnterpriseVo enterpriseVo;
		List<Party> parties = partyGroupDao.associateEnterpriseList(name, PAGE, SIZE);
		List<EnterpriseVo> enterpriseVos = new ArrayList<>();
		for (Party party : parties) {
			enterpriseVo = new EnterpriseVo();
			enterpriseVo.setId(party.getId());
			enterpriseVo.setName(party.getPartyGroup().getGroupName());
			enterpriseVo.setLogo(party.getPartyGroup().getLogoImageUrl());
			enterpriseVos.add(enterpriseVo);
		}
		return enterpriseVos;
	}

	/**
	 * 根据id更新状态
	 * 
	 * @param id
	 * @param status
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Audit(action = "User Modifyqqq;;;修改'#party.person.mail'账号状态为'#party.partyStatus'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void updateStatus(@Param("party")Party party) {
		partyDao.updateParty(party);
	}

	/**
	 * 根据用户的id判断是否为管理员
	 * 
	 * @param id
	 * @return
	 * @since 2017年2月7日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isAdmin(String id) {
		Boolean falg = false;
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			partyRelationship = relationshipList.get(0);
			String entId = partyRelationship.getPartyIdTo();
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if (party == null) {
				return falg;
			}
			if (party.getPartyGroup().getActiveStatus() != null
					&& ActiveStatus.PARTY_VERIFIED.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
				falg = true;
			} else {
				falg = false;
			}

		}
		return falg;
	}

	/**
	 * 修改公司信息
	 * 
	 * @param id
	 * @return
	 * @since 2017年2月7日
	 * @author zr.helinmei@yikuyi.com
	 */
	public void editCompany(EnterpriseVo enterpriseVo) {
		if (null != enterpriseVo) {
			try {
				updateParty(enterpriseVo);
			} catch (IOException e) {
				logger.error(e.getMessage(),e);
			}
		}
	}

	public Party getPartyGroupByEmployeeId(String employeeId) {
		PartyRelationship pr = new PartyRelationship();
		pr.setPartyIdFrom(employeeId);
		pr.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		pr.setRoleTypeIdTo(RoleType.CORPORATION);
		pr.setRelationshipName(PartyRelationship.PartyRelationshipType.EMPLOYMENT.name());
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(pr);
		// 这里排除一个员工受雇于多家公司的情况
		if (CollectionUtils.isNotEmpty(relationshipList)) {
			String partyGroupId = relationshipList.get(0).getPartyIdTo();
			return partyGroupManager.getPartyGroupByGroupId(partyGroupId);
		}
		return null;
	}

	/**
	 * 获取后台企业管理员列表
	 * 
	 * @param param
	 * @param rowBounds
	 * @return
	 * @since 2017年2月13日
	 * @author gongtianyu@yikuyi.com
	 */

	public PageInfo<EnterpriseVo> getEnterpriseList(EnterpriseParamVo param, RowBounds rowBounds) {
		return new PageInfo<>(partyDao.getEnterpriseList(param, rowBounds));
	}

	/**
	 * 根据公司名称判断是否激活或者关联
	 * 
	 * @param id
	 * @return EnterpriseVo
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public Party actived(String name) throws IOException {
		Party party = null;
		// 通过公司名称 判断是否有被激活过的企业
		if (!StringUtils.isEmpty(name)) {
			party = partyDao.getPartyDetail(null, name);// 获取状态，公司名，图片
			if (null != party) {
				party.setExternalId("1");
			} else {
				party = new Party();
				party.setExternalId("0");
			}
		}
		return party;
	}

	/**
	 * 根据企业账号获取子账号信息
	 * 
	 * @param entId
	 * @return
	 * @since 2017年2月16日
	 * @author gongtianyu@yikuyi.com
	 */
	public List<UserExtendVo> getEnterpriseAccountsList(String entId) {
		List<UserExtendVo> list = partyDao.getEnterpriseAccountsList(entId);
		if (!CollectionUtils.isEmpty(list)) {
			List<UserExtendVo> result = new ArrayList<>();
			UserExtendVo v = list.get(0);
			result.add(v);
			for (int i = 1; i < list.size(); i++) {
				if (!v.getId().equals(list.get(i).getId())) {
					result.add(list.get(i));
				}
			}
			return result;
		}
		return Collections.emptyList();
	}
	/**
	 * 根据用户的id判断是否为激活或者关联，返回true：已经激活或者关联，fail：未激活或者未关联
	 * 
	 * @param id
	 * @return
	 * @since 2017年1月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String isActivedOrRelationed(String id) {
		//没有激活
		String falg = NOTACTIVE;
		//判断关联
		Party p = personDao.findPersonById(id);
		if(p != null && p.getPerson() != null && p.getPerson().getRelationSratus() != null
				&& Person.RelationSratus.RELATED.toString().equals(p.getPerson().getRelationSratus().toString())){
			//已关联
			falg = RELATED;
			return falg;
		}
		if(p != null && p.getPerson() != null && p.getPerson().getRelationSratus() != null){
			//关联中
			falg = RELATING;
			//判断激活
			PartyRelationship partyRelationship = new PartyRelationship();
			partyRelationship.setPartyIdFrom(id);
			partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
			partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
			List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
			if (relationshipList != null && !relationshipList.isEmpty()) {
				//激活中
				falg = ACTIVING;
				partyRelationship = relationshipList.get(0);
				String entId = partyRelationship.getPartyIdTo();
				Party party = partyGroupDao.findPartyGroupByPartyId(entId);
				if (party != null && party.getPartyGroup().getActiveStatus() != null
						&& ActiveStatus.PARTY_VERIFIED.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
					// 已激活
					falg = ACTIVED;
					return falg;
				}
			}
			return falg;
		}
		//判断激活
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.MAIN_ROLE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			//激活中
			falg = ACTIVING;
			partyRelationship = relationshipList.get(0);
			String entId = partyRelationship.getPartyIdTo();
			Party party = partyGroupDao.findPartyGroupByPartyId(entId);
			if (party != null && party.getPartyGroup().getActiveStatus() != null
					&& ActiveStatus.PARTY_VERIFIED.toString().equals(party.getPartyGroup().getActiveStatus().toString())) {
				// 已激活
				falg = ACTIVED;
				return falg;
			}
		}
		Party party1 = partyDao.getPartyPersonDetail(id);
        if(null !=party1){
        	String entId = party1.getCorporationId();//获取企业Id
        	if(!StringUtils.isEmpty(entId)){
        		Party party2 = partyDao.getPartyDetail(entId,null);
        		if(null !=party2 && null != party2.getPartyGroup() && null != party2.getPartyGroup().getActiveStatus() && party2.getPartyGroup().getActiveStatus()== PartyGroup.ActiveStatus.REJECTED){
        			//激活中
        			falg = ACTIVING;
        		}
        	}
        	
        	
        }
		
        return falg;
	}
	/**
	 * 根据用户的id判断是否为首次激活或者关联
	 * @return
	 * @since 2017年2月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isFristActive(String id) {
		Boolean falg = false;
		// 查询企业id,关联时间
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(id);
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> relationshipList = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if (relationshipList != null && !relationshipList.isEmpty()) {
			return falg;
		}
		Party party = personDao.findPersonById(id);
		if(party != null && party.getPerson() != null && party.getPerson().getRelationSratus() != null){
			return falg;
		}
		party = partyDao.getPartyPersonDetail(id);
		if(party != null && !StringUtils.isEmpty(party.getCorporationId()) ){
			return falg;
		}
		falg = true;
		return falg;
	}
	/**
	 * 获取用户信息
	 * @param id
	 * @return
	 * @since 2017年3月28日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getUser(String id) {
		return userLoginDao.getPerson(id);
	}
	/**
	 * 导出企业会员列表
	 * @param vo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public void exportEnt(EnterpriseParamVo vo,HttpServletResponse response) throws IOException{
		// 查询数据
		List<EnterpriseVo> list = partyDao.getEntList(vo);
		response.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");  
   	    response.addHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", "EnterpriseList.xls"));  
 		response.addHeader("Pragma", "no-cache");  
 		response.addHeader("Expires", "0"); 
 		this.exportExcelXls(list, response.getOutputStream());
	}
	/**
	 * 导出企业会员数据
	 * @param list
	 * @param os
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private void exportExcelXls(List<EnterpriseVo> list, OutputStream os) {
		ExportProcesser  processer = null;
		try{
        	processer = ExportFactory.getProcesser(ExportFactory.TYPE_XLS, os);
        	//标题
            processer.writeLine("Sheet1", EXPORT_TEMPLATE.split(","));
            List<List<String>> rowDataList;
        	rowDataList = this.enterpriseDataList(list);
        	for(List<String> rowData:rowDataList){
            	processer.writeLine("Sheet1", rowData);
        	}
        	processer.output();
		} catch (Exception e) {
			logger.error("Exception",e);
			throw new SystemException("exportExcelXls Exception",e);
		} finally {
			if(null!=processer){
				processer.close();
			}
		}
		
	}
	/**
	 * 重构数据
	 * @param enterpriseVo
	 * @return
	 * @since 2017年4月13日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	private List<List<String>> enterpriseDataList(List<EnterpriseVo> list) {
		List<List<String>> rowDataList = Lists.newArrayList();
		if(list == null || list.size()==0){
			return rowDataList;
		}
		List<String> rowData = null;
		for(EnterpriseVo enterpriseVo:list){
			rowData = Lists.newArrayList();
			//公司名称
			rowData.add(enterpriseVo.getName());
            //公司类型
			String corCategory = getCategory(enterpriseVo.getCorCategory(),"CORPORATION_CATEGORY");
			rowData.add(corCategory);
			//所属行业
			String industryCategory = getCategory(enterpriseVo.getIndustryCategory(),"INDUSTRY_CATEGORY");
			if(!StringUtils.isEmpty(enterpriseVo.getOtherAttr())){
				industryCategory = industryCategory + "("+enterpriseVo.getOtherAttr()+")";
			}
			rowData.add(industryCategory);
			//公司官网
			rowData.add(enterpriseVo.getWebSite());
			//公司简介
			rowData.add(enterpriseVo.getDescription());
			//公司注册地
			rowData.add(enterpriseVo.getRegisteAddr());
			//联系人
			rowData.add(enterpriseVo.getContactUserName());
			//联系电话
			rowData.add(enterpriseVo.getContactUserTel());
			//电子传真
			rowData.add(enterpriseVo.getFax());
			//QQ
			rowData.add(enterpriseVo.getContactUserQQ());
			//详细地址
			rowData.add(enterpriseVo.getAddress());
			rowDataList.add(rowData);
			
		}
		return rowDataList;
	}

	/**
	 * 
	 * @param categoryStr
	 * @param category
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String getCategory(String categoryStr,String category){
		String cateStr = "";
		List<Category> industryCategoryList = this.getCategorys(category);
		Map<String,String> map = categoryToMap(industryCategoryList);
		if(StringUtils.isEmpty(categoryStr)){
			return cateStr;
		}
		String[] arrStr = categoryStr.split(",");
		for(String str : arrStr){
			if(StringUtils.isEmpty(str)){
				continue;
			}
			String value = map.get(str);
			if(StringUtils.isEmpty(value)){
				cateStr = cateStr +"," + str;
			}else{
				cateStr = cateStr +"," + value;
			}
			
		}
		if(!StringUtils.isEmpty(cateStr)){
			cateStr = cateStr.substring(1);
		}
		return cateStr;
	}
	/**
	 * 根据业务类型获取维度数据
	 * @param category
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public List<Category> getCategorys(String category) {
		String url = serverUrl + "/v1/category/companylist?categoryTypeId="+category;
//		String url = "http://192.168.1.110:27081/v1/category/companylist?categoryTypeId="+category;
		ResponseEntity<List<Category>> response;
		List<Category> list = null;
		try{
			response = restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<List<Category>>(){});
			list = response.getBody();
		}catch(Exception e){
			logger.error("调用查询业务类型失败:{}",e);
		}
		return list;
	}

	/**
	 * 业务类型转换map
	 * @param list
	 * @return
	 * @since 2017年4月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Map<String,String> categoryToMap(List<Category> list){
		Map<String,String> map = new HashMap<String,String>();
		if(null == list || list.size()==0){
			return null;
		}
		for(Category category:list){
			if(!StringUtils.isEmpty(category.getCategoryId())){
				map.put(category.getCategoryId(), category.getCategoryName());
			}
		}
		return map;
	}
	/**
	 * 账户激活后企业修改审核成功保存数据
	 * 
	 * @param JSONObject
	 * @return void
	 * @since 2017年4月13日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	public void editEntApplySave(JSONObject jsonObject) {
		Apply apply = JSONObject.parseObject(jsonObject.toString(), Apply.class);
		if(null == apply){
			return;
		}
		// 获取内容
		String applyContent = apply.getApplyContent();
		// 把获取的内容转化为json格式
		JSONObject json = JSON.parseObject(applyContent);
		// 把jsonObject转化成对应的实体
		EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
		// 驳回不做修改
		if (apply.getStatus() == ApplyStatus.REJECT) {
			String urlMail=customerServerUrlPrefix+"/enterprise.htm";
			commonMsg(MailInfoVo.TemplateId.ACTIVE_REJECT.toString(),MailInfoVo.Type.EMAIL.toString(),enterpriseVo.getMail(),urlMail,enterpriseVo.getName(),apply.getReason());
			return;
		}
		// 审核成功
		if (null != enterpriseVo) {
			//修改属性表
			editCompany(enterpriseVo);
			commonMsg(MailInfoVo.TemplateId.ACTIVE_PASS.toString(),MailInfoVo.Type.EMAIL.toString(),enterpriseVo.getMail(),null,null,null);
		}
		
	}
	/**
	 * 后台企业会员管理修改审核
	 * 
	 * @param id
	 * @return Apply
	 * @since 2017年4月13日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	@Audit(action = "Enterprise Modifyqqq;;;'#apply.applyOrgId'qqq;;;'#apply.reason'", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public void editEntApply(@Param("apply")Apply apply) {
		if (null != apply) {
			// 获取内容
			String applyContent = apply.getApplyContent();
			// 把获取的内容转化为json格式
			JSONObject json = JSON.parseObject(applyContent);
			// 把jsonObject转化成对应的实体
			EnterpriseVo enterpriseVo = JSONObject.parseObject(json.toString(), EnterpriseVo.class);
			if (null != enterpriseVo) {
				String url = "";
				try {
					String userId = RequestHelper.getLoginUserId();//当前申请修改的人
					String id = enterpriseVo.getId();//企业id
					apply.setApplyOrgId(id);// 企业id
					apply.setApplyUserId(userId);
					// 调用workFlow服务
					url = workflowUrlPrefix + "/v1/apply";
					HttpEntity<Apply> requestEntity = new HttpEntity<>(apply);
					ParameterizedTypeReference<Apply> responseEntity = new ParameterizedTypeReference<Apply>() {
					};
					restTemplate.exchange(url, HttpMethod.POST, requestEntity,responseEntity);
					try {
						String urlMail = operationUrl + "/verify.htm";
						// 获取申请的用户名
						Party p = personDao.findPersonById(userId);
						String applyName = "";
						if (null != p && null != p.getPerson()
								&& !StringUtils.isEmpty(p.getPerson().getLastNameLocal())) {
							applyName = p.getPerson().getLastNameLocal();
						}
						sendCerMail(urlMail, applyName);
					} catch (Exception e) {
						logger.error("后台企业会员管理修改审核发送激活邮件MQ出错:{}", e);
					}

				} catch (Exception e) {
					logger.error("后台企业会员管理修改审核调用workflow服务异常：{}", e.getMessage(),e);
				}
			}

		}

	}
	
}
