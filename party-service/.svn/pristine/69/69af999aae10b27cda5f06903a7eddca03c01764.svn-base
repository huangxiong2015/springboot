
package com.yikuyi.party.vendors.api;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.framework.springboot.config.ObjectMapperHelper;
import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.LoginUserInjectionInterceptor;
import com.github.pagehelper.PageInfo;
import com.yikuyi.party.PartyApplication;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.group.vo.PartyGroupVo;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipTypeEnum;
import com.yikuyi.party.partygroup.bll.PartyGroupManager;
import com.yikuyi.party.role.model.RoleTypeEnum;
import com.yikuyi.party.vendors.api.impl.VendorsResource;
import com.yikuyi.party.vendors.bll.VendorsManager;
import com.yikuyi.party.vo.FacilityVo;
import com.yikuyi.party.vo.PartyVo;
import com.yikuyi.party.vo.SupplierVo;
import com.yikuyi.party.vo.VendorVo;

/**
 * 
 * @author zr.wuxiansheng@yikuyi.com
 * @version 1.0.0
 */
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT, classes = { PartyApplication.class })
public class VendorsResourceTest {

	
	private ObjectMapper mapper = ObjectMapperHelper.configeObjectMapper(new ObjectMapper());
	
	private MockMvc mockMvc;
	
	LoginUser loginUser = new LoginUser("9999999901", "admin", "9999999901", Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")));
	
	@InjectMocks
	private VendorsResource vendorsResource;
	
	@Mock
	private VendorsManager mockVendorsManager;
	
	@Mock
	private PartyGroupManager mockPartyGroupManager;
	

	
	public VendorsResourceTest() {
		MockitoAnnotations.initMocks(this);
	}

	
	@Before
	public void setUpBefore() throws Exception {
		
		mockMvc = MockMvcBuilders.standaloneSetup(vendorsResource).build();
	}

	@Test
	public void testGetPartyList() throws Exception{		
		
		PageInfo<PartyVo> pageInfo = new PageInfo<>();
		List<PartyVo> list = new ArrayList<>();
		PartyVo party = new PartyVo();
		party.setPartyCode("10000");
		list.add(party);
		pageInfo.setList(list);
		
		PartyGroupVo param = new PartyGroupVo();
		param.setPartyIdFrom("9999999901");
		param.setStatus(PartyStatus.PARTY_ENABLED);//默认启用
		param.setRoleTypeIdTo(RoleTypeEnum.SUPPLIER.toString());
		when(mockVendorsManager.getPartyList(Mockito.any(PartyGroupVo.class),Mockito.any(RowBounds.class) )).thenReturn(pageInfo);
		
		JavaType javaType = mapper.getTypeFactory().constructParametricType(PageInfo.class, PartyVo.class);
		
		pageInfo = mapper.readValue(mockMvc.perform(get("/v1/vendors").requestAttr(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser)).andExpect(status().isOk()).andReturn().getResponse().getContentAsString(), javaType);
		Assert.assertEquals(pageInfo.getList().get(0).getPartyCode(),"10000");
		
	}
	

	@Test
	public void testGetPartyByPartyId() throws Exception{
		Party party = new Party();
		party.setId("digikey");
		when(mockVendorsManager.getPartyByPartyId("digikey", "9999999901")).thenReturn(party);
		
		Party mockParty = mapper.readValue(mockMvc.perform(get("/v1/vendors/digikey").requestAttr(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser)).andExpect(status().isOk()).andReturn().getResponse().getContentAsString(), Party.class);
		Assert.assertEquals(mockParty.getId(),"digikey");
	}


	
	@Test
	public void testSave() throws Exception{
		VendorVo ven = new VendorVo();
		ven.setVendorId("9999999901");
		ven.setCode("10000");
		Party partyVen = new Party();
		when(mockPartyGroupManager.getPartyGroupByGroupId("9999999901")).thenReturn(partyVen);
	    mockMvc.perform(post("/v1/vendors").contentType(MediaType.APPLICATION_JSON_UTF8_VALUE).content(mapper.writeValueAsString(ven)).requestAttr(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser)).andExpect(status().isOk());

		
	    VendorVo venname = new VendorVo();
	    venname.setVendorName("sz_junit_save");
	    venname.setCode("10001");
		Party partyVenname = new Party();
		List<Party> list = new ArrayList<>();
		list.add(partyVenname);
		when(mockPartyGroupManager.findPartyGroupByNameFull("sz_junit_save")).thenReturn(list);
	    mockMvc.perform(post("/v1/vendors").contentType(MediaType.APPLICATION_JSON_UTF8_VALUE).content(mapper.writeValueAsString(venname)).requestAttr(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser)).andExpect(status().isOk());

		
		VendorVo vo = new VendorVo();
		vo.setIsShowName("Y");
		vo.setVendorName("sz_junit_save");
		vo.setLogoUrl("www.test-log.com");
		List<FacilityVo> fList = new ArrayList<>();
		FacilityVo fvo1 = new FacilityVo();
		fvo1.setName("sz_junit_save_ffacility");
		fList.add(fvo1);
		vo.setItem(fList);
		

		Party party = new Party();
		party = mockVendorsManager.save(vo, "9999999901");
		when(mockVendorsManager.save(vo, "9999999901")).thenReturn(party);
		
	    mockMvc.perform(post("/v1/vendors").contentType(MediaType.APPLICATION_JSON_UTF8_VALUE).content(mapper.writeValueAsString(vo)).requestAttr(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser)).andExpect(status().isOk());
	}

	@Test
	public void testUpdate() throws Exception{
		try {
			VendorVo vo = new VendorVo();
			vo.setVendorId("9999999901");
			vo.setIsShowName("Y");
			vo.setVendorName("sz_junit_save");
			vo.setLogoUrl("www.test-log.com");
			List<FacilityVo> fList = new ArrayList<>();
			FacilityVo fvo1 = new FacilityVo();
			fvo1.setName("sz_junit_save_ffacility");
			fList.add(fvo1);
			vo.setItem(fList);
			
			Party party = new Party();
			when(mockVendorsManager.update(vo, "9999999901")).thenReturn(party);
			mockMvc.perform(put("/v1/vendors").contentType(MediaType.APPLICATION_JSON_UTF8_VALUE).content(mapper.writeValueAsString(vo)).requestAttr(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser)).andExpect(status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}



	@Test
	public void testSaveSupplierShare() throws Exception{
		UserVo vo = new UserVo();
		vo.setId("testSharId");
		when(mockVendorsManager.saveSupplierShare("testShar", vo)).thenReturn("success");
		
	    mockMvc.perform(post("/v1/vendors/testShar/save").contentType(MediaType.APPLICATION_JSON_UTF8_VALUE).content(mapper.writeValueAsString(vo))).andExpect(status().isOk());

	}

	@Test
	public void testFindSupplierShare() throws Exception{
		
		List<PartyRelationship> partyRelaList = new ArrayList<PartyRelationship>();
		PartyRelationship relationship = PartyRelationship.build(PartyRelationshipTypeEnum.EMPLOYMENT);
		relationship.setPartyIdFrom("1001");
		partyRelaList.add(relationship);
		when(mockVendorsManager.findSupplierShare("testShar")).thenReturn(partyRelaList);
		JavaType javaType = mapper.getTypeFactory().constructParametricType(List.class, PartyRelationship.class);
		List<PartyRelationship> mockList = mapper.readValue(mockMvc.perform(get("/v1/vendors/testShar/relation"))
						.andExpect(status().isOk()).andReturn().getResponse().getContentAsString(), javaType);
		Assert.assertEquals(mockList.get(0).getPartyIdFrom(), "1001");
		
	}
	
	@Test
	public void testGetVendorList() throws Exception{
		SupplierVo supplierVo = new SupplierVo();
		supplierVo.setVendorName("京东110");;
		PageInfo<SupplierVo> pageInfo = new PageInfo<SupplierVo>();
		List<SupplierVo> supplierVoList = new ArrayList<>();
		supplierVoList.add(supplierVo);
		pageInfo.setList(supplierVoList);
		when(mockVendorsManager.getVendorList("9999999901",null,null, 1, 10)).thenReturn(pageInfo);
		
		JavaType javaType = mapper.getTypeFactory().constructParametricType(PageInfo.class, SupplierVo.class);
		PageInfo<SupplierVo> resultPage = mapper
				.readValue(mockMvc.perform(get("/v1/vendors/list?id=9999999901"))
						.andExpect(status().isOk()).andReturn().getResponse().getContentAsString(), javaType);
		Assert.assertEquals(resultPage.getList().get(0).getVendorName(), "京东110");
		
	}
}