/*
 * Created: 2016年11月28日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2016 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.vendorManage.bll;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.yikuyi.message.mail.vo.MailInfoVo;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.role.model.RoleTypeEnum;
import com.yikuyi.party.vendor.vo.CheckStartOrLose;
import com.yikuyi.party.vendor.vo.CheckVendorInfoVo;
import com.yikuyi.party.vendor.vo.PartyProductLineVo;
import com.yikuyi.party.vendor.vo.Vendor;
import com.yikuyi.party.vendor.vo.Vendor.VendorApplyType;
import com.yikuyi.workflow.Apply;
import com.ykyframework.exception.BusinessException;
import com.ykyframework.mqservice.sender.MsgSender;

@Service
@Transactional
public class SendMail {

	private static final Logger logger = LoggerFactory.getLogger(SendMail.class);
                  
	@Autowired
	private PersonDao personDao;

	@Autowired
	private MsgSender msgSender;

	@Value("${mqConsumeConfig.sendMsgAndEmail.topicName}")
	private String sendMsgAndEmailTopicName;

	private static final String VENDOR_NEW_PASS = "VENDOR_NEW_PASS"; // 建档通过
	private static final String VENDOR_NEW_NOT_PASS = "VENDOR_NEW_NOT_PASS"; // 建档不通过
	private static final String VENDOR_CHANGE_PASS = "VENDOR_CHANGE_PASS"; // 变更通过
	private static final String VENDOR_CHANGE_NOT_PASS = "VENDOR_CHANGE_NOT_PASS"; // 变更不通过
	private static final String VENDOR_START_PASS = "VENDOR_START_PASS"; // 启用通过
	private static final String VENDOR_START_NOT_PASS = "VENDOR_START_NOT_PASS"; // 启用不通过
	private static final String VENDOR_LOSE_PASS = "VENDOR_LOSE_PASS"; // 失效通过
	private static final String VENDOR_LOSE_NOT_PASS = "VENDOR_LOSE_NOT_PASS"; // 失效不通过
	private static final String VENDOR_COMMON_APPLY = "VENDOR_COMMON_APPLY"; // 申请
	
	//发送邮件设置
	private static final String EMAIL = "EMAIL";
	private static final String ACCOUNT = "account";  //用户的邮箱
	private static final String GROUPNAME = "groupName";  //公司名称
	private static final String REASON = "reason";  //原因

	/**
	 * 建档通过
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void newPass(Apply apply) {

		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(VENDOR_NEW_PASS);
			mailInfoVo.setType(EMAIL);
			String applyUserId = apply.getApplyUserId();
			if (StringUtils.isNotBlank(applyUserId)) {
				Party p = personDao.getPersonByUserId(applyUserId);
				if (null != p && null != p.getPerson() && StringUtils.isNotBlank(p.getPerson().getMail())) {
					JSONObject object = new JSONObject();
					object.put(ACCOUNT, p.getPerson().getMail());
					object.put(GROUPNAME, apply.getCompanyName());
					String LgTime ="";
					if(null != apply.getCreatedDate()){
						SimpleDateFormat sdformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//24小时制  
				        LgTime = sdformat.format(apply.getCreatedDate());
					}      					
					// 把获取的内容转化为json格式
					JSONObject json = JSON.parseObject(apply.getApplyContent());
					
					// 把jsonObject转化成对应的实体
					Vendor vendor = JSONObject.parseObject(json.toString(), Vendor.class);
					
					object.put("handleTime",LgTime);
					object.put("handleAccount", p.getPerson().getMail());
					object.put("handleDeclare", vendor.getDescribe());
					mailInfoVo.setContent(object);
					mailInfoVo.setTo(p.getPerson().getMail());
					msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				}
			}
		} catch (Exception e) {
			logger.error("建档通过发送邮件出错：{}", e);
		}
	}

	/**
	 * 建档不通过
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void newNotPass(Apply apply) {

		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(VENDOR_NEW_NOT_PASS);
			mailInfoVo.setType(EMAIL);
			String applyUserId = apply.getApplyUserId();
			if (StringUtils.isNotBlank(applyUserId)) {
				Party p = personDao.getPersonByUserId(applyUserId);
				if (null != p && null != p.getPerson() && StringUtils.isNotBlank(p.getPerson().getMail())) {
					JSONObject object = new JSONObject();
					object.put(ACCOUNT, p.getPerson().getMail());
					object.put(GROUPNAME, apply.getCompanyName());
					object.put(REASON, apply.getReason());
					mailInfoVo.setContent(object);
					mailInfoVo.setTo(p.getPerson().getMail());
					msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				}
			}
		} catch (Exception e) {
			logger.error("建档不通过发送邮件出错：{}", e);
		}
	}

	/**
	 * 变更通过
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void changePass(Apply apply) {

		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(VENDOR_CHANGE_PASS);
			mailInfoVo.setType(EMAIL);
			String applyUserId = apply.getApplyUserId();
			if (StringUtils.isNotBlank(applyUserId)) {
				Party p = personDao.getPersonByUserId(applyUserId);
				if (null != p && null != p.getPerson() && StringUtils.isNotBlank(p.getPerson().getMail())) {
					JSONObject object = new JSONObject();
					object.put(ACCOUNT, p.getPerson().getMail());
					object.put(GROUPNAME, apply.getCompanyName());
					String LgTime ="";
					if(null != apply.getCreatedDate()){
						SimpleDateFormat sdformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//24小时制  
				        LgTime = sdformat.format(apply.getCreatedDate());
					}      
					String reason ="";
					// 把获取的内容转化为json格式
					JSONObject json = JSON.parseObject(apply.getApplyContent());
					if(apply.getProcessId().equals(VendorApplyType.ORG_SUPPLIER_INFO_CHANGE_REVIEW.name())){
						
						// 把jsonObject转化成对应的实体
						CheckVendorInfoVo checkVendorInfoVo = JSONObject.parseObject(json.toString(), CheckVendorInfoVo.class);
						reason=checkVendorInfoVo.getDescribe();
					}else if(apply.getProcessId().equals(VendorApplyType.ORG_SUPPLIER_PRODUCTLINE_CHANGE_REVIEW.name())){
						// 把jsonObject转化成对应的实体
						PartyProductLineVo vo = JSONObject.parseObject(json.toString(), PartyProductLineVo.class);
						reason=vo.getDescribe();
					}
							
					object.put("handleTime",LgTime);
					object.put("handleAccount", p.getPerson().getMail());
					object.put("handleDeclare", reason);
					mailInfoVo.setContent(object);
					mailInfoVo.setTo(p.getPerson().getMail());
					msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				}
			}
		} catch (Exception e) {
			logger.error("变更通过发送邮件出错：{}", e);
		}
	}

	/**
	 * 变更不通过
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void changeNotPass(Apply apply) {
		try {
			MailInfoVo mailInfoVo = new MailInfoVo();
			mailInfoVo.setTemplateId(VENDOR_CHANGE_NOT_PASS);
			mailInfoVo.setType(EMAIL);
			String applyUserId = apply.getApplyUserId();
			if (StringUtils.isNotBlank(applyUserId)) {
				Party p = personDao.getPersonByUserId(applyUserId);
				if (null != p && null != p.getPerson() && StringUtils.isNotBlank(p.getPerson().getMail())) {
					JSONObject object = new JSONObject();
					object.put(ACCOUNT, p.getPerson().getMail());
					object.put(GROUPNAME, apply.getCompanyName());
					object.put(REASON, apply.getReason());
					mailInfoVo.setContent(object);
					mailInfoVo.setTo(p.getPerson().getMail());
					msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
				}
			}
		} catch (Exception e) {
			logger.error("变更不通过发送邮件出错：{}", e);
		}
	}
	
	/**
	 * 启动通过	
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void startPass(Apply apply) {

			try {
				MailInfoVo mailInfoVo = new MailInfoVo();
				mailInfoVo.setTemplateId(VENDOR_START_PASS);
				mailInfoVo.setType(EMAIL);
				String applyUserId = apply.getApplyUserId();
				if (StringUtils.isNotBlank(applyUserId)) {
					Party p = personDao.getPersonByUserId(applyUserId);
					if (null != p && StringUtils.isNotBlank(p.getPerson().getMail())) {
						JSONObject object = new JSONObject();
						object.put(ACCOUNT, p.getPerson().getMail());
						object.put(GROUPNAME, apply.getCompanyName());
						mailInfoVo.setContent(object);
						mailInfoVo.setTo(p.getPerson().getMail());
						msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
					}
				}
			} catch (Exception e) {
				logger.error("启动通过发送邮件出错：{}", e);
			}
	}
		
		
	/**
	 * 启动不通过
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void startNotPass(Apply apply) {
			try {
				MailInfoVo mailInfoVo = new MailInfoVo();
				mailInfoVo.setTemplateId(VENDOR_START_NOT_PASS);
				mailInfoVo.setType(EMAIL);
				String applyUserId = apply.getApplyUserId();
				if (StringUtils.isNotBlank(applyUserId)) {
					Party p = personDao.getPersonByUserId(applyUserId);
					if (null != p && StringUtils.isNotBlank(p.getPerson().getMail())) {
						JSONObject object = new JSONObject();
						object.put(ACCOUNT, p.getPerson().getMail());
						object.put(GROUPNAME, apply.getCompanyName());
						object.put(REASON, apply.getReason());
						mailInfoVo.setContent(object);
						mailInfoVo.setTo(p.getPerson().getMail());
						msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
					}
				}
			} catch (Exception e) {
				logger.error("启动不通过发送邮件出错：{}", e);
			}
	}
		
	/**
	 * 失效通过	
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void losePass(Apply apply) {
	
			try {
				MailInfoVo mailInfoVo = new MailInfoVo();
				mailInfoVo.setTemplateId(VENDOR_LOSE_PASS);
				mailInfoVo.setType(EMAIL);
				String applyUserId = apply.getApplyUserId();
				if (StringUtils.isNotBlank(applyUserId)) {
					Party p = personDao.getPersonByUserId(applyUserId);
					if (null != p && StringUtils.isNotBlank(p.getPerson().getMail())) {
						JSONObject object = new JSONObject();
						object.put(ACCOUNT, p.getPerson().getMail());
						object.put(GROUPNAME, apply.getCompanyName());
						
						// 把获取的内容转化为json格式
						JSONObject json = JSON.parseObject(apply.getApplyContent());
						
						// 把jsonObject转化成对应的实体
						CheckStartOrLose checkStartOrLose = JSONObject.parseObject(json.toString(), CheckStartOrLose.class);
												
						object.put(REASON, checkStartOrLose.getDescribe());
						mailInfoVo.setContent(object);
						mailInfoVo.setTo(p.getPerson().getMail());
						msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
					}
				}
			} catch (Exception e) {
				logger.error("实效通过发送邮件出错：{}", e);
			}
	}
				
				
	/**
	 * 失效不通过
	 * @param apply
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void loseNotPass(Apply apply) {

			try {
				MailInfoVo mailInfoVo = new MailInfoVo();
				mailInfoVo.setTemplateId(VENDOR_LOSE_NOT_PASS);
				mailInfoVo.setType(EMAIL);
				String applyUserId = apply.getApplyUserId();
				if (StringUtils.isNotBlank(applyUserId)) {
					Party p = personDao.getPersonByUserId(applyUserId);
					if (null != p && StringUtils.isNotBlank(p.getPerson().getMail())) {
						JSONObject object = new JSONObject();
						object.put(ACCOUNT, p.getPerson().getMail());
						object.put(GROUPNAME, apply.getCompanyName());
						object.put(REASON, apply.getReason());
						mailInfoVo.setContent(object);
						mailInfoVo.setTo(p.getPerson().getMail());
						msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);
					}
				}
			} catch (Exception e) {
				logger.error("失效不通过发送邮件出错：{}", e);
			}
	}
		
	/**
	 * 审核申请，通用版
	 * @param companyName
	 * @param roleTypeEnum
	 * @param vendorApplyType
	 * @return
	 * @since 2017年9月1日
	 * @author tb.huangqingfeng@yikuyi.com
	 */
	public void checkApply(String companyName,RoleTypeEnum roleTypeEnum,VendorApplyType vendorApplyType,String applyUserId) throws BusinessException {
			
			Party p = personDao.getPersonByUserId(applyUserId);
			String content ="";
			
			if(vendorApplyType.name().equals(VendorApplyType.ORG_SUPPLIER_ARCHIVES_REVIEW.name())){
				content = "申请供应商建档【"+companyName+"】";
			}else if (vendorApplyType.name().equals(VendorApplyType.ORG_SUPPLIER_INFO_CHANGE_REVIEW.name())) {
				content = "申请基本信息变更【"+companyName+"】";
			}else if (vendorApplyType.name().equals(VendorApplyType.ORG_SUPPLIER_PRODUCTLINE_CHANGE_REVIEW.name())) {
				content = "申请产品线信息变更【"+companyName+"】";
			}else if (vendorApplyType.name().equals(VendorApplyType.ORG_SUPPLIER_ENABLED_REVIEW.name())) {
				content = "申请供应商启用【"+companyName+"】";
			}else if (vendorApplyType.name().equals(VendorApplyType.ORG_SUPPLIER_INVALID_REVIEW.name())) {
				content = "申请供应商失效【"+companyName+"】";
			}
			String contentMail=p.getPerson().getMail() + content;
			
			List<Party> partyList = personDao.findDataByRole(Arrays.asList(roleTypeEnum.toString()));			
			if (CollectionUtils.isEmpty(partyList)) {
				logger.error("账期审核申请party数据查询角色为空");
				throw new BusinessException("当前角色没有用户","当前角色没有用户");	
			}
			
			for (int i = 0; i < partyList.size(); i++) {
				Party partyMail = partyList.get(i);
				if (null != partyMail && null != partyMail.getPerson()) {					
					try {
						if(StringUtils.isNotBlank(partyMail.getPerson().getMail())){
																	
							MailInfoVo mailInfoVo = new MailInfoVo();
							mailInfoVo.setTemplateId(VENDOR_COMMON_APPLY);
							mailInfoVo.setType(EMAIL);						
							JSONObject object = new JSONObject();
							object.put(ACCOUNT, partyMail.getPerson().getMail());
							object.put("content", contentMail);
							mailInfoVo.setContent(object);
							mailInfoVo.setTo(partyMail.getPerson().getMail());
							msgSender.sendMsg(sendMsgAndEmailTopicName, mailInfoVo, null);								
						}						
					} catch (Exception e) {						
						logger.error("发送邮件出错：{}", e);							
					}		
				}
			}	
		}

}
