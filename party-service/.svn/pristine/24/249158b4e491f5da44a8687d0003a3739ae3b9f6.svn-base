/*
 * Created: 2017年2月8日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.userlogin.bll;
import static org.junit.Assert.assertEquals;

import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.transaction.annotation.Transactional;

import com.github.pagehelper.PageInfo;
import com.github.springtestdbunit.TransactionDbUnitTestExecutionListener;
import com.github.springtestdbunit.annotation.DatabaseOperation;
import com.github.springtestdbunit.annotation.DatabaseSetup;
import com.github.springtestdbunit.annotation.ExpectedDatabase;
import com.github.springtestdbunit.assertion.DatabaseAssertionMode;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.userLogin.bll.UserLoginManager;
@RunWith(SpringRunner.class)
@SpringBootTest
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class,
		TransactionDbUnitTestExecutionListener.class })
@Transactional
@Rollback
public class UserLoginManagerTest {
	@Autowired
	private UserLoginManager userLoginManager;

	
	/**
	 * 根据账号判断是否存在（手机、邮箱）
	 * @param account
	 * @return
	 * @since 2017年1月12日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata.xml")
	public void testIsExist(){
		Boolean falg = userLoginManager.isExist("MTIzNDU2Nzg5MTA=");
		assertEquals(true,falg);
	}
	/**
	 *  查询账号列表
	 * @param name
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata.xml")
	public void testSearch(){
		PageInfo<UserVo> page = userLoginManager.search("", RowBounds.DEFAULT, "", 1, 10);
		List<UserVo> list = page.getList();
		assertEquals(0, list.size());
	}
	/**
	 *  查询账号列表
	 * @param name
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata.xml")
	public void testSearch1(){
		PageInfo<UserVo> page = userLoginManager.search("1111", RowBounds.DEFAULT, "111", 1, 10);
		List<UserVo> list = page.getList();
		assertEquals(0, list.size());
	}
	/**
	 *  查询账号列表
	 * @param name
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata3.xml")
	public void testSearch2(){
		/*PageInfo<UserVo> page = userLoginManager.search("123456@yikuyi.com", RowBounds.DEFAULT, "9999999901", 1, 10);
		List<UserVo> list = page.getList();
		assertEquals(1, list.size());
		UserVo uservo = list.get(0);
		assertEquals("李四", uservo.getName());
		assertEquals("123456@yikuyi.com", uservo.getMail());
		assertEquals("PARTY_ENABLED", uservo.getStatusId());*/
	}
	/**
	 * 根据账号判断是否存在（手机、邮箱）
	 * @param account
	 * @return
	 * @since 2017年1月12日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata.xml")
	public void testGetAccount(){
		Boolean falg = userLoginManager.getAccount("12345678910");
		assertEquals(true,falg);
	}
	
	/**
	 * 保存密码
	 * @param userVo
	 * @return
	 * @since 2017年1月19日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata2.xml")
	@ExpectedDatabase(assertionMode = DatabaseAssertionMode.NON_STRICT, value = "userlogin_update_data.xml")
	public void testInitPassWord(){
		UserVo userVo = new UserVo();
		userVo.setMail("123456@yikuyi.com");
		userVo.setPassword("123456");
		userVo = userLoginManager.initPassWord(userVo);
	}
	/**
	 * 新增账号
	 * @param userVo
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata3.xml")
	@ExpectedDatabase(assertionMode = DatabaseAssertionMode.NON_STRICT, value = "userlogin_save_data.xml")
	public void testSave(){
		UserVo userVo = new UserVo();
		userVo.setMail("23456@yikuyi.com");
		userVo.setPassword("123456");
		userVo.setTelNumber("13513513532");
		userVo.setName("王二");
		userVo.setId("9999999901");
		userLoginManager.save(userVo);
	}
	/**
	 * 根据id查询用户
	 * @param id
	 * @return
	 * @since 2017年3月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata3.xml")
	public void testGetPerson(){
		UserVo uservo = userLoginManager.getPerson("9999999902");
		assertEquals("李四", uservo.getName());
		assertEquals("123456@yikuyi.com", uservo.getMail());
		assertEquals("13513513531", uservo.getTelNumber());
	}
	/**
	 * 修改账号
	 * @param userVo
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata3.xml")
	@ExpectedDatabase(assertionMode = DatabaseAssertionMode.NON_STRICT, value = "userlogin_update_data2.xml")
	public void testUpdate(){
		UserVo userVo = new UserVo();
		userVo.setTelNumber("13513513533");
		userVo.setName("李四四");
		userVo.setId("9999999902");
		userLoginManager.update(userVo);
	}
	/**
	 * 重置密码
	 * @param userVo
	 * @return
	 * @since 2017年3月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata3.xml")
	public void testUpdatePwd(){
		userLoginManager.updatePwd("9999999901","123456","9999999902");
	}
	
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "partyRelationShip_sampledata.xml")
	public void testgetReportsTo(){
		userLoginManager.getReportsTo("1001");
	}
}
