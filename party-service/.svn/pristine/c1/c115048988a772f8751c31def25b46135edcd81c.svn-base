/*
 * Created: 2017年2月8日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 
package com.yikuyi.party.enterprise.bll;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.LoginUserInjectionInterceptor;
import com.github.springtestdbunit.TransactionDbUnitTestExecutionListener;
import com.github.springtestdbunit.annotation.DatabaseOperation;
import com.github.springtestdbunit.annotation.DatabaseSetup;
import com.yikuyi.party.contact.vo.EnterpriseCertificatesVo;

@RunWith(SpringRunner.class)
@SpringBootTest
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class,
		TransactionDbUnitTestExecutionListener.class })
@Transactional
@Rollback
public class EnterpriseCertManagerTest {
	@Autowired
	private EnterpriseCertManager enterpriseManager;

	@Before
	public void init() {
		LoginUser loginUser = new LoginUser("9999999901", "admin", "9999999901",
				Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")));
		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(new MockHttpServletRequest()));
		;
		RequestContextHolder.currentRequestAttributes().setAttribute(LoginUserInjectionInterceptor.LOGIN_USER_KEY,
				loginUser, RequestAttributes.SCOPE_REQUEST);
	}

	*//**
	 * 审核成功的账户保存
	 * 
	 * @param enterpriseVo，id为企业id,applyId申请的会员id,
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 *//*
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "enterpriseCert_add_result.xml")
	public void testSaveCertificate() {
		// 插入国内普通营业执照
		EnterpriseCertificatesVo entVo = new EnterpriseCertificatesVo();
		entVo.setId("9999999901");
		entVo.setRegisteAddr("0");
		entVo.setBusiLisType("COMMON");
		entVo.setBusiLicPic("BUSI_LIC_PIC");

		entVo.setSocialCode("SOCIAL_CODE");
		entVo.setEntName("ENT_NAME");
		entVo.setBusiRange("BUSI_RANGE");
		entVo.setLocation("LOCATION");
		entVo.setFaxCode("FAX_CODE");
		entVo.setFaxName("FAX_NAME");
		entVo.setOrgName("ORG_NAME");
		entVo.setOrgCode("ORG_CODE");
		entVo.setOrgLimit("ORG_LIMIT");
		entVo.setOrgLocation("ORG_LOCATION");
		entVo.setOrgCdate("ORG_CDATE");
		enterpriseManager.saveCertificate(entVo);
		// 插入国内营业执照三证合一
		EnterpriseCertificatesVo entVo1 = new EnterpriseCertificatesVo();
		entVo1.setId("9999999902");
		entVo1.setRegisteAddr("0");
		entVo1.setBusiLisType("3-TO-1");
		entVo1.setBusiLicPic("BUSI_LIC_PIC");

		entVo1.setSocialCode("SOCIAL_CODE");
		entVo1.setEntName("ENT_NAME");
		entVo1.setBusiRange("BUSI_RANGE");
		entVo1.setLocation("LOCATION");
		entVo1.setFaxCode("FAX_CODE");
		entVo1.setFaxName("FAX_NAME");
		entVo1.setOrgName("ORG_NAME");
		entVo1.setOrgCode("ORG_CODE");
		entVo1.setOrgLimit("ORG_LIMIT");
		entVo1.setOrgLocation("ORG_LOCATION");
		entVo1.setOrgCdate("ORG_CDATE");
		enterpriseManager.saveCertificate(entVo1);

		// 插入香港营业执照
		EnterpriseCertificatesVo entVo3 = new EnterpriseCertificatesVo();
		entVo3.setId("9999999902");
		entVo3.setRegisteAddr("1");
		entVo3.setBusiLisType("HK-CODE");
		entVo3.setBusiLicPic("BUSI_LIC_PIC");

		entVo3.setSocialCode("SOCIAL_CODE");
		entVo3.setEntName("ENT_NAME");
		entVo3.setBusiRange("BUSI_RANGE");
		entVo3.setLocation("LOCATION");
		entVo3.setFaxCode("FAX_CODE");
		entVo3.setFaxName("FAX_NAME");
		entVo3.setOrgName("ORG_NAME");
		entVo3.setOrgCode("ORG_CODE");
		entVo3.setOrgLimit("ORG_LIMIT");
		entVo3.setOrgLocation("ORG_LOCATION");
		entVo3.setOrgCdate("ORG_CDATE");
		enterpriseManager.saveCertificate(entVo3);

		// 修改国内普通
		EnterpriseCertificatesVo entVo2 = new EnterpriseCertificatesVo();
		entVo2.setId("9999999903");
		entVo2.setRegisteAddr("0");
		entVo2.setBusiLisType("COMMON");
		entVo2.setBusiLicPic("BUSI_LIC_PIC");
		entVo2.setAttrId("66");
		entVo2.setSocialCode("SOCIAL_CODE");
		entVo2.setEntName("ENT_NAME");
		entVo2.setBusiRange("BUSI_RANGE");
		entVo2.setLocation("LOCATION");
		entVo2.setFaxCode("FAX_CODE");
		entVo2.setFaxName("FAX_NAME");
		entVo2.setOrgName("ORG_NAME");
		entVo2.setOrgCode("ORG_CODE");
		entVo2.setOrgLimit("ORG_LIMIT");
		entVo2.setOrgLocation("ORG_LOCATION");
		entVo2.setOrgCdate("ORG_CDATE");
		enterpriseManager.saveCertificate(entVo2);

		// 修改国内普通
		EnterpriseCertificatesVo entVo4 = new EnterpriseCertificatesVo();
		entVo4.setId("9999999903");
		entVo4.setRegisteAddr("0");
		entVo4.setBusiLisType("3-TO-1");
		entVo4.setBusiLicPic("BUSI_LIC_PIC");
		entVo4.setAttrId("66");
		entVo4.setSocialCode("SOCIAL_CODE");
		entVo4.setEntName("ENT_NAME");
		entVo4.setBusiRange("BUSI_RANGE");
		entVo4.setLocation("LOCATION");
		entVo4.setFaxCode("FAX_CODE");
		entVo4.setFaxName("FAX_NAME");
		entVo4.setOrgName("ORG_NAME");
		entVo4.setOrgCode("ORG_CODE");
		entVo4.setOrgLimit("ORG_LIMIT");
		entVo4.setOrgLocation("ORG_LOCATION");
		entVo4.setOrgCdate("ORG_CDATE");
		enterpriseManager.saveCertificate(entVo4);

		EnterpriseCertificatesVo entVo5 = new EnterpriseCertificatesVo();
		entVo5.setId("9999999903");
		entVo5.setRegisteAddr("0");
		entVo5.setBusiLisType("HK-CODE");
		entVo5.setBusiLicPic("BUSI_LIC_PIC");
		entVo5.setAttrId("66");
		entVo5.setSocialCode("SOCIAL_CODE");
		entVo5.setEntName("ENT_NAME");
		entVo5.setBusiRange("BUSI_RANGE");
		entVo5.setLocation("LOCATION");
		entVo5.setFaxCode("FAX_CODE");
		entVo5.setFaxName("FAX_NAME");
		entVo5.setOrgName("ORG_NAME");
		entVo5.setOrgCode("ORG_CODE");
		entVo5.setOrgLimit("ORG_LIMIT");
		entVo5.setOrgLocation("ORG_LOCATION");
		entVo5.setOrgCdate("ORG_CDATE");
		enterpriseManager.saveCertificate(entVo5);
	}

	*//**
	 * 审核成功的账户保存
	 * 
	 * @param enterpriseVo，id为企业id,applyId申请的会员id,
	 * @return void
	 * @since 2016年1月19日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 *//*
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "enterpriseCert_sampledata.xml")
	public void testGetCertificate() {
		// 普通营业执照
		EnterpriseCertificatesVo vo = enterpriseManager.getCertificate("9999999901");
		assertEquals("SOCIAL_CODE", vo.getSocialCode());
		// 三证合一
		EnterpriseCertificatesVo vo1 = enterpriseManager.getCertificate("9999999902");
		assertEquals("SOCIAL_CODE", vo1.getSocialCode());
		// 香港
		EnterpriseCertificatesVo vo3 = enterpriseManager.getCertificate("9999999903");
		assertEquals("HK_ADDR", vo3.getHkAddr());
	}
}
*/