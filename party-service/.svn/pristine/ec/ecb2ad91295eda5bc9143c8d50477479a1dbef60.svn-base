/*
 * Created: 2016年11月28日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2016 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.userLogin.bll;



import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.apache.ibatis.session.RowBounds;
import org.jasig.inspektr.audit.annotation.Audit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.framework.springboot.audit.Param;
import com.github.pagehelper.PageInfo;
import com.yikuyi.party.contact.vo.UserExtendVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.customer.bll.CustomerSummeryManager;
import com.yikuyi.party.customer.dao.PersonDao;
import com.yikuyi.party.login.model.UserLogin;
import com.yikuyi.party.login.model.UserLogin.PwdStrength;
import com.yikuyi.party.login.model.UserLogin.UserLoginMethod;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.party.dao.PartyRoleDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.person.model.Person;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.userLogin.dao.UserLoginDao;
import com.ykyframework.model.IdGen;


@Service
@Transactional
public class UserLoginManager {
	
	private static final Logger logger = LoggerFactory.getLogger(UserLoginManager.class);
	
	@Autowired
	private UserLoginDao userLoginDao;
	@Autowired
	private CustomerSummeryManager customerSummeryManager;
	@Autowired
	private PartyRelationshipDao partyRelationshipDao;
	@Autowired
	private PartyDao partyDao;
	@Autowired
	private PersonDao personDao;
	@Autowired
	private PartyRoleDao partyRoleDao;
	
	private static final String ROLETYPEFROM ="REPORTS_TO";
	private static final String SUCCESS ="success";
	
	/**
	 * 根据账号判断是否存在（手机、邮箱）
	 * @param account
	 * @return
	 * @since 2017年1月12日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean isExist(String account) {
		//base64解密 
		String jaccount = null;
		try {
			byte[] result = Base64.decodeBase64(account);
			jaccount = new String(result);
		} catch (Exception e) {
			logger.error(account+",account base64解密 error:{}",e);
		}
		Integer count = userLoginDao.isExist(jaccount);
		if(count > 0){
			return true;
		}
		return false;
	}
	/**
	 * 根据账号判断是否存在（手机、邮箱）
	 * @param account
	 * @return
	 * @since 2017年1月12日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public Boolean getAccount(String account) {
		Integer count = userLoginDao.isExist(account);
		if(count > 0){
			return true;
		}
		return false;
	}
	/**
	 * 保存密码
	 * @param userVo
	 * @return
	 * @since 2017年1月19日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo initPassWord(UserVo userVo) {
		//判断密码是否为空
		String password = userVo.getPassword();
		if(StringUtils.isEmpty(password)){
			return userVo;
		}
		//查询用户是否存在，如果不存在报用户不存在的错误，如果存在查看是否有效，如果有效则不修改密码
		UserLogin user = userLoginDao.findEntityById(userVo.getMail());
		if(user == null){
			return userVo;
		}
		if("Y".equals(user.getEnabled())){
			return userVo;
		}

		UserLogin userLogin = new UserLogin();
		userLogin.setId(userVo.getMail());
		userLogin.setCurrentPassword(userVo.getPassword());
		userLogin.setEnabled("Y");
		userLogin.setParty(user.getParty());
		userLogin.setLastUpdateDate(new Date());
		//密码强度 
		PwdStrength pwdStrength = customerSummeryManager.checkedPwdStrong(userVo.getPassword());
		userLogin.setPwdStrength(pwdStrength);
		userLoginDao.updateByPartyId(userLogin);
		return userVo;
	}
	/**
	 * 根据账号id查询用户
	 * @param userVo
	 * @return
	 * @since 2017年1月19日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserLogin getAccountById(String account) {
		return userLoginDao.findEntityById(account);
	}
	
	/**
	 * 根据partyid和类型查询用户
	 * @param id
	 * @param type
	 * @return
	 * @since 2017年3月16日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String getAccountByIdAndType(String id,String type) {
		return userLoginDao.findUserLogin(id,type);
	}
	/**
	 *  查询账号列表
	 * @param name
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public PageInfo<UserVo> search(String name,RowBounds rowBouds,String userId,int page,int size) {
		PageInfo<UserVo> pageInfo = new PageInfo<>();
		List<UserVo> userList = new ArrayList<>();
		pageInfo.setPageSize(size);
		pageInfo.setPageNum(page);
		if(StringUtils.isEmpty(userId)){
			pageInfo.setTotal(0);
			pageInfo.setPageNum(0);
			pageInfo.setList(userList);
			return pageInfo;
		}
		//如果name不为空 查询出对应的id
		List<String> userIds = null;
		if(!StringUtils.isEmpty(name)){
			userIds = userLoginDao.getUserIdsByName(name);
			//如果没有数据返回空
			if(userIds==null || userIds.isEmpty()){
				pageInfo.setTotal(0);
				pageInfo.setPageNum(0);
				pageInfo.setList(userList);
				return pageInfo;
			}
		}

		//根据查询条件查询所有的记录，计算出总记录
		List<String> allIds = partyRelationshipDao.getAllPartyRelationship(userId,userIds,RowBounds.DEFAULT);
		if(allIds.isEmpty()){
			pageInfo.setTotal(0);
			pageInfo.setPageNum(0);
			pageInfo.setList(userList);
			return pageInfo;
		}
		//根据分页去查询记录，将符合的记录查询出来
		List<String> ids = partyRelationshipDao.getAllPartyRelationship(userId,userIds,rowBouds);
		//根据查询出来的id集合去查询列表信息
		userList = userLoginDao.getUserLoginsByIds(ids);
		if(userList != null && !userList.isEmpty()){
			pageInfo.setTotal(allIds.size());
			pageInfo.setList(userList);
		}else{
			pageInfo.setTotal(0);
			pageInfo.setPageNum(0);
			pageInfo.setList(userList);
		}
		return pageInfo;
	}
	/**
	 * 新增账号
	 * @param userVo
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Audit(action = "User Modifyqqq;;;新增'#userVo.mail'账号", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public String save(@Param("userVo")UserVo userVo) {
		String flag;
		//判断之前是否注册过，并且注册没有成功（根据邮箱）
		UserLogin login = userLoginDao.findEntityById(userVo.getMail());
		if(login != null && "Y".equals(login.getEnabled())){
			flag = "exist";
			return flag;
		}
        //b.保存接口： PARTY表里面生成记录， PARTY_TYPE  设置为： PERSON ，STATUS_ID 
		saveEnterprise(userVo);
		flag = SUCCESS;
		return flag;
	}
	
	/**
	 * 保存
	 * @param userVo
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public void saveEnterprise(UserVo userVo) {
		String id = String.valueOf(IdGen.getInstance().nextId());
		Party party = new Party();
		party.setId(id);
		party.setPartyType(PartyType.PERSON);
		party.setPartyStatus(PartyStatus.PARTY_ENABLED);
		party.setCreator(userVo.getId());
		party.setCreatedDate(new Date());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(id);
		partyDao.insert(party);
        //PERSON 表生成记录 PARTY_ID 和  PARTY表一致。
		Person person = new Person();
		person.setLastNameLocal(userVo.getName());
		person.setCreator(userVo.getId());
		person.setLastUpdateUser(userVo.getId());
		person.setCreatedDate(new Date());
		person.setLastUpdateDate(new Date());
		person.setTel(userVo.getTelNumber());
		person.setMail(userVo.getMail());
		party.setPerson(person);
		personDao.insert(party);
		//c.生成登录数据USER_LOGIN  字段： ENABLED = ‘Y’ , PARTY_ID 和 PARTY表一致， USER_LOGIN_ID =  刚刚注册的手机号。
		UserLogin userLogin = new UserLogin();

		userLogin.setId(userVo.getMail());
		userLogin.setParty(party);
		userLogin.setCurrentPassword(userVo.getPassword());
		userLogin.setEnabled("Y");
		userLogin.setIsSystem("N");
		userLogin.setRequirePasswordChange("N");
		userLogin.setUserLoginMethod(UserLoginMethod.EMAIL.toString());
		userLogin.setCreator(userVo.getId());
		userLogin.setLastUpdateUser(userVo.getId());
		userLogin.setCreatedDate(new Date());
		userLogin.setLastUpdateDate(new Date());
		//密码强度 
		PwdStrength pwdStrength = customerSummeryManager.checkedPwdStrong(userVo.getPassword());
		userLogin.setPwdStrength(pwdStrength);
		
		UserLogin login = userLoginDao.findEntityById(userVo.getMail());
		if(login != null && "N".equals(login.getEnabled())){
			userLoginDao.update(userLogin);
		}else{
			userLoginDao.insert(userLogin);
		}
        
        //d.生成 PARTY_ROLE 数据  ROLE_TYPE_ID 为：REGISTER
		partyRoleDao.insert(id, RoleType.OPERATION_REP.toString(),userVo.getId(),new Date(),userVo.getId(),new Date());
		//把这个用户挂靠到某个卖家 （关系）
		//获取买家
		PartyRelationship partyRelationship = new PartyRelationship();
		partyRelationship.setPartyIdFrom(userVo.getId());
		partyRelationship.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		partyRelationship.setRoleTypeIdTo(RoleType.CORPORATION);
		List<PartyRelationship> list = partyRelationshipDao.getPartyRelationship(partyRelationship);
		if(list != null && !list.isEmpty()){
			partyRelationship = list.get(0);
		}
		String entId = partyRelationship.getPartyIdTo();
		if(StringUtils.isEmpty(entId)){
			entId = "99999999";
		}
		//账号和企业的关联关系
		this.saveEntRelationShip(userVo.getId(),id,entId);
		//账号和主账号的关联关系
		this.saveRelationShip(userVo.getId(),id);
	}
	
	/**
	 * 账号和企业的关联关系
	 * @param loginId
	 * @param userId
	 * @param id
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	void saveEntRelationShip(String loginId,String userId, String id) {
		// 插入企业与注册用户的关联关系
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(userId);// 当前的登录用户partyId
		relationShip.setPartyIdTo(id);// 企业partyId
		relationShip.setRoleTypeIdFrom(RoleType.EMPLOYEE);
		relationShip.setRoleTypeIdTo(RoleType.CORPORATION);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.EMPLOYMENT);
		relationShip.setRelationshipName("雇佣");
		relationShip.setStatusId("ENABLE");
		relationShip.setFromDate(new Date());
		relationShip.setThruDate(null);
		relationShip.setCreator(loginId);
		relationShip.setCreatedDate(new Date());
		relationShip.setLastUpdateUser(loginId);
		relationShip.setLastUpdateDate(new Date());
		partyRelationshipDao.insert(relationShip);
	}
	/**
	 * 账号和主账号的关联关系
	 * @param loginId
	 * @param userId
	 * @param id
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
   void saveRelationShip(String loginId,String userId) {
		// 插入企业与注册用户的关联关系
		PartyRelationship relationShip = new PartyRelationship();
		relationShip.setPartyIdFrom(userId);// 当前的登录用户partyId
		relationShip.setPartyIdTo(loginId);// 企业partyId
		relationShip.setRoleTypeIdFrom(RoleType.OPERATION_REP);
		relationShip.setRoleTypeIdTo(RoleType.OPERATION_REP);
		relationShip.setPartyRelationshipTypeId(PartyRelationshipType.REPORTS_TO);
		relationShip.setStatusId("ENABLE");
		relationShip.setFromDate(new Date());
		relationShip.setThruDate(null);
		relationShip.setCreator(loginId);
		relationShip.setCreatedDate(new Date());
		relationShip.setLastUpdateUser(loginId);
		relationShip.setLastUpdateDate(new Date());
		partyRelationshipDao.insert(relationShip);
	}
	/**
	 * 根据id查询用户
	 * @param id
	 * @return
	 * @since 2017年3月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public UserVo getPerson(String id) {
		return userLoginDao.getPerson(id);
	}
	/**
	 * 修改账号
	 * @param userVo
	 * @return
	 * @since 2017年3月17日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Audit(action = "User Modifyqqq;;;修改'#userVo.mail'账号", actionResolverName = "DEFAULT_ACTION_RESOLVER", resourceResolverName = "DEFAULT_RESOURCE_RESOLVER")
	public String update(@Param("userVo")UserVo userVo) {
		String flag;
		Party party = new Party();
		party.setId(userVo.getId());
		party.setLastUpdateDate(new Date());
		party.setLastUpdateUser(userVo.getPartyId());
        //PERSON 表生成记录 PARTY_ID 和  PARTY表一致。
		Person person = new Person();
		person.setLastNameLocal(userVo.getName());
		person.setLastUpdateUser(userVo.getPartyId());
		person.setLastUpdateDate(new Date());
		person.setTel(userVo.getTelNumber());
		party.setPerson(person);
		personDao.editPerson(party);
		flag = SUCCESS;
		return flag;
	}
	/**
	 * 重置密码
	 * @param userVo
	 * @return
	 * @since 2017年3月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	public String updatePwd(String userId,String passWord,String partyId) {
		String flag;
		String jpartyId = null;
		try {
			byte[] result = Base64.decodeBase64(partyId);
			jpartyId = new String(result);
		} catch (Exception e) {
			logger.error(partyId+",account base64解密 error:{}",e);
		}
		UserLogin userLogin = new UserLogin();
		userLogin.setCurrentPassword(passWord);
		Party party = new Party();
		party.setId(jpartyId);
		userLogin.setParty(party);
		userLogin.setLastUpdateDate(new Date());
		userLogin.setLastUpdateUser(userId);
		//密码强度 
		PwdStrength pwdStrength = customerSummeryManager.checkedPwdStrong(passWord);
		userLogin.setPwdStrength(pwdStrength);
		userLoginDao.updateByPartyId(userLogin);
		flag = SUCCESS;
		return flag;
	}
	
	/**
	 * 获取自己创建的人
	 * @param partyId
	 * @return
	 * @since 2017年3月21日
	 * @author tb.yumu@yikuyi.com
	 */
	public List<UserExtendVo> getReportsTo(String partyId){
		List<Party> partyList = personDao.getReportsTo(partyId, ROLETYPEFROM);
		if (partyList!=null&&!partyList.isEmpty()) {
			List<UserExtendVo> list = new ArrayList<>();
			UserExtendVo userExtendVo;
			for (Party party : partyList) {
				userExtendVo = new UserExtendVo();
				userExtendVo.setId(party.getId());
				userExtendVo.setName(party.getPerson().getLastNameLocal());
				list.add(userExtendVo);
			}
			return list;
		}
		return new ArrayList<>();
	}
	/**
	 * 根据角色类型获取所有个人用户的邮箱
	 * @param roleType
	 * @return
	 * @since 2017年3月23日
	 * @author gongtianyu@yikuyi.com
	 */
	public List<Person> getEmailListByRoleType(String roleType) {
		return personDao.getEmailListByRoleType(roleType);
	}
}
