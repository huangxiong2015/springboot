/*
 * Created: 2017年2月8日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.party.customer.bll;
import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.test.web.client.ExpectedCount;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.test.web.client.match.MockRestRequestMatchers;
import org.springframework.test.web.client.response.MockRestResponseCreators;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.LoginUserInjectionInterceptor;
import com.github.springtestdbunit.TransactionDbUnitTestExecutionListener;
import com.github.springtestdbunit.annotation.DatabaseOperation;
import com.github.springtestdbunit.annotation.DatabaseSetup;
import com.github.springtestdbunit.annotation.ExpectedDatabase;
import com.github.springtestdbunit.assertion.DatabaseAssertionMode;
import com.yikuyi.party.contact.vo.UserExtendVo;
import com.yikuyi.party.contact.vo.UserVo;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.person.model.Person.RelationSratus;
@RunWith(SpringRunner.class)
@SpringBootTest
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class,
		TransactionDbUnitTestExecutionListener.class })
@Transactional
@Rollback
public class CustomerManagerTest {
	@Autowired
	private CustomerManager customerManager;
	
	@Value("${api.pay.serverUrlPrefix}")
	private String serverUrl;
	
	@Before
	public void init() {
		LoginUser loginUser = new LoginUser("9999999901", "admin", "9999999901", Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")));		
		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(new MockHttpServletRequest()));;
		RequestContextHolder.currentRequestAttributes().setAttribute(LoginUserInjectionInterceptor.LOGIN_USER_KEY, loginUser, RequestAttributes.SCOPE_REQUEST);
	}

	@Autowired
	private RestTemplate restTemplateMock;

	public MockRestServiceServer mockRestServiceServer() {
		return  MockRestServiceServer.createServer(restTemplateMock);
	}
	
	/**
	 * 单元测 -查询企业或个人基本信息
	 * 
	 * @since 2017年2月8日
	 * @author zr.helinmei@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = {"userInfo_sampledata.xml"})
	public void testGetBaseInfoDetail(){
		UserExtendVo userVo =customerManager.getBaseInfoDetail("999999990122",null);
		assertEquals(userVo.getAddress(), "中国深圳市南山区高新技术产业园麻雀岭工业区M-8栋4楼");
		UserExtendVo userVo1 =customerManager.getBaseInfoDetail("999999990122","15889747347");
		assertEquals(userVo1.getAddress(), "中国深圳市南山区高新技术产业园麻雀岭工业区M-8栋4楼");
		customerManager.getBaseInfoDetail("999999990123",null);
	}
	
	/**
	 * 保存基本信息
	 * @param UserExtendVo
	 * @return UserExtendVo
	 * @since 2016年2月24日
	 * @author zr.helinmei@yikuyi.com
	 * @throws IOException
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = { "userInfo_sampledata.xml" })
	public void testSave(){
		UserExtendVo user = new UserExtendVo();
		user.setAddress("中国深圳市南山区高新技术产业园麻雀岭工业区M-8栋4楼");
		user.setPartyId("999999990122");
		user.setCity("10001");
		user.setCityName("深圳市");
		user.setCountry("10002");
		user.setCountryName("南山区");
		user.setAddressLevel("1");
		user.setCreatedDate(new Date());
		user.setId("1");
		user.setLogoUrl("http://www.baidu.com");
		user.setLoginCount(1);
		user.setMail("12345@qq.com");
		user.setMobile("13066939619");
		user.setName("叶良辰");
		user.setPostcode("11111");
		user.setProvince("10000");
		user.setProvinceName("广东省");
		user.setSex("1");
		user.setStatus(PartyStatus.PARTY_ENABLED);
		customerManager.save(user);
	}
	
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT,
	value={"classpath:com/yikuyi/party/customer/bll/customer/userlogin_sampledata.xml",
		   "classpath:com/yikuyi/party/customer/bll/customer/party_sampledata.xml",
		   "classpath:com/yikuyi/party/customer/bll/customer/partyRole_sampledata.xml",
		   "classpath:com/yikuyi/party/customer/bll/customer/person_sampledata.xml",
		   "classpath:com/yikuyi/party/customer/bll/customer/contactmech_sampledata.xml",
		   "classpath:com/yikuyi/party/customer/bll/customer/partycontactmech_sampledata.xml"
			})
	public void testFindCustomerUser(){
		customerManager.findCustomerUser(null, null, null, null, null, null, null, null, 1, 10);
	}
	

	
	/**
	 * 更新用户信息
	 * @param userInfoVo
	 * @since 2017年2月14日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "person_sampledata2.xml")
	@ExpectedDatabase(assertionMode = DatabaseAssertionMode.NON_STRICT, value = "person_update_data.xml")
	public void testUpdate(){
		UserExtendVo userInfoVo = new UserExtendVo();
		userInfoVo.setId("9999999901");
		
		userInfoVo.setLogoUrl("www.baidu.com");
		customerManager.update(userInfoVo);
	}
	/**
	 * 根据状态查询用户
	 * @param relationSratus
	 * @return
	 * @since 2017年2月15日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "partyRelationShip_sampledata.xml")
	public void testGetPersons(){
		List<UserVo> list = customerManager.getPersons(RelationSratus.RELATED,"9999999901");
//		assertEquals(1,list.size());
//		assertEquals("9999999902",list.get(0).getId());
//		assertEquals("bbbbb@126.com",list.get(0).getMail());
	}
	/**
	 * 根据用户Id更新用户状态信息
	 * @param id
	 * @since 2017年2月15日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "person_sampledata3.xml")
	@ExpectedDatabase(assertionMode = DatabaseAssertionMode.NON_STRICT, value = "person_update_data2.xml")
	public void testUpdateById(){
		customerManager.updateById("9999999901", RelationSratus.RELATED,"9999999901");
	}
	/**
	 * 根据用户名称查询用户列表
	 * @param username
	 * @return
	 * @since 2017年2月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "person_sampledata3.xml")
	public void testGetUserByName(){
		List<UserVo> list = customerManager.getUserByName("李四");
		assertEquals(1,list.size());
		assertEquals("李四",list.get(0).getName());
	}
	/**
	 * 根据用户名称查询用户列表
	 * @param username
	 * @return
	 * @since 2017年2月20日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "person_sampledata3.xml")
	public void testGetUsersByName(){
		UserVo vo = customerManager.getUsersByName("李四");
		assertEquals("李四",vo.getName());
	}
	/**
	 * 获取登陆人资料完整度信息
	 * @return
	 * @since 2017年2月9日
	 * @author zr.aoxianbing@yikuyi.com
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "person_sampledata3.xml")
	public void testGetInfoLevel() throws Exception {
		
		MockRestServiceServer server = this.mockRestServiceServer();
		// 创建另一个search 的模拟rest服务，设定其响应url以及返回（要求同上）
		server.expect(ExpectedCount.manyTimes(),
				MockRestRequestMatchers.requestTo(serverUrl.concat("/v1/invoices?partyId=").concat("11111")))
				.andExpect(MockRestRequestMatchers.method(HttpMethod.GET)).andRespond(MockRestResponseCreators.withSuccess("",MediaType.APPLICATION_JSON_UTF8));
		
		UserExtendVo vo = customerManager.getInfoLevel("11111");
		assertEquals("N",vo.getAddressLevel());
		assertEquals("N",vo.getInfoLevel());
		assertEquals("N",vo.getInvoiceLevel());
	}
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value = "userlogin_sampledata.xml")
	public void testSendMail(){
		customerManager.sendMail("9999999901","9999999901");
	}
	
	@Test
	@DatabaseSetup(type = DatabaseOperation.CLEAN_INSERT, value ="classpath:com/yikuyi/party/customer/bll/customer/person_sampledata.xml")
	public void testFindPersonInfoByPartyId(){
		customerManager.findPersonInfoByPartyId("9999999901");
		
	}
}
