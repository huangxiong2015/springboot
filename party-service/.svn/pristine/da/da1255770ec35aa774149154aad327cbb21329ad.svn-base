package com.yikuyi.party.dept.bll;

import java.util.Date;
import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.yikuyi.party.contact.vo.UserManage;
import com.yikuyi.party.dept.dao.roleDao;
import com.yikuyi.party.group.model.PartyGroup;
import com.yikuyi.party.group.model.PartyGroup.ActiveStatus;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.model.Party.PartyStatus;
import com.yikuyi.party.model.Party.PartyType;
import com.yikuyi.party.model.PartyRelationship;
import com.yikuyi.party.model.PartyRelationship.PartyRelationshipType;
import com.yikuyi.party.party.dao.PartyDao;
import com.yikuyi.party.partygroup.dao.PartyGroupDao;
import com.yikuyi.party.partygroup.dao.PartyRelationshipDao;
import com.yikuyi.party.role.model.RoleType;
import com.yikuyi.party.vo.DeptVo;
import com.yikuyi.party.vo.RoleVo;
import com.ykyframework.api.persist.IdGen;

@Service
@Transactional
public class DeptManager {
	
	private static final Logger logger = LoggerFactory.getLogger(DeptManager.class);

	
	@Autowired
	private PartyDao partyDao;
	
	@Autowired
	private PartyGroupDao partyGroupDao;
	
	@Autowired
	private PartyRelationshipDao partyRelationshipDao;
	
	@Autowired
	private roleDao roleDao;
	
	
	private static final String PARENT_ID = "99999999";
	
	@Autowired
	@Qualifier(value="restTemplate")
	private RestTemplate restTemplate;
	
	@Value("${api.basedata.serverUrlPrefix}")
	private String basedataServerUrl;
	
	private static final String ENABLE="ENABLE";
	
	/**
	 * 查询树形部门结构
	 * @return
	 * @since 2017年5月5日
	 * @author tb.yumu@yikuyi.com
	 */
	public List<DeptVo> deptList(String partyId){
		return partyGroupDao.deptList(partyId);
	}
	
	/**
	 * 获取子部门
	 * @param id
	 * @return
	 * @since 2017年5月5日
	 * @author tb.yumu@yikuyi.com
	 */
	public List<DeptVo> findSonDeptList(String id){
		String relactionName;
		if (id.equals(PARENT_ID)) {
			relactionName=PartyRelationshipType.DEPT_CORPORATION_REL.toString();
		}else {
			relactionName=PartyRelationshipType.DEPT_DEPT_REL.toString();
		}
		return partyGroupDao.findSonDeptList(id, relactionName);
	}
	
	/**
	 * 获取部门详情
	 * @param partyId
	 * @return
	 * @since 2017年5月5日
	 * @author tb.yumu@yikuyi.com
	 */
	public DeptVo deptDetail(String partyId){
		return partyGroupDao.deptDetail(partyId);
	}

	
	/**
	 * 保存 部门信息
	 * @param vo
	 * @since 2017年5月5日
	 * @author tb.yumu@yikuyi.com
	 */
	public void deptSave(DeptVo vo){
		String id = String.valueOf(IdGen.getInstance().nextId());
		String userId = RequestHelper.getLoginUserId();
		String account = RequestHelper.getLoginUser().getUsername();
		Date date = new Date();
		Party party = new Party();
		party.setId(id);
		party.setPartyType(PartyType.DEPARTMENT);
		party.setPartyStatus(PartyStatus.PARTY_ENABLED);
		party.setIsSystem("N");
		party.setCreator(userId);
		party.setCreatedDate(date);
		party.setLastUpdateUser(userId);
		party.setLastUpdateDate(date);
		partyDao.insert(party);
		
		PartyGroup group = new PartyGroup();
		group.setGroupName(vo.getName());
		group.setActiveStatus(ActiveStatus.PARTY_VERIFIED);
		group.setDescription(account);
		group.setCreator(userId);
		group.setCreatedDate(date);
		group.setLastUpdateUser(userId);
		group.setLastUpdateDate(date);
		party.setPartyGroup(group);
		partyGroupDao.insert(party);
		
		PartyRelationship relationship = new PartyRelationship();
		relationship.setPartyIdFrom(id);
		relationship.setPartyIdTo(vo.getParentId());
		//如果父级id是99999999，则代表是顶级部门，否则为下级部门
		if (vo.getParentId().equals(PARENT_ID)) {			
			relationship.setRoleTypeIdTo(RoleType.CORPORATION);
			relationship.setRoleTypeIdFrom(RoleType.ORGANIZATION_ROLE);
			relationship.setPartyRelationshipTypeId(PartyRelationshipType.DEPT_CORPORATION_REL);
		}else {
			relationship.setRoleTypeIdTo(RoleType.ORGANIZATION_ROLE);
			relationship.setRoleTypeIdFrom(RoleType.ORGANIZATION_ROLE);
			relationship.setPartyRelationshipTypeId(PartyRelationshipType.DEPT_DEPT_REL);
		}
		relationship.setRelationshipName("组织机构");
		relationship.setFromDate(date);
		relationship.setStatusId(ENABLE);
		relationship.setCreator(userId);
		relationship.setCreatedDate(date);
		relationship.setLastUpdateUser(userId);
		relationship.setLastUpdateDate(date);
		
		partyRelationshipDao.insert(relationship);
	}
	
	/**
	 * 编辑部门信息
	 * @param vo
	 * @since 2017年5月5日
	 * @author tb.yumu@yikuyi.com
	 */
	public void deptUpdate(DeptVo vo){
		Party party = new Party();
		party.setId(vo.getId());
		PartyGroup partyGroup = new PartyGroup();
		partyGroup.setGroupName(vo.getName());
		LoginUser user = RequestHelper.getLoginUser();
		partyGroup.setDescription(user.getUsername());
		partyGroup.setLastUpdateUser(user.getId());
		partyGroup.setLastUpdateDate(new Date());
		party.setPartyGroup(partyGroup);
		partyGroupDao.updatePartyGroup(party);
	}
	
	/**
	 * 新增角色信息
	 * @param vo
	 * @since 2017年5月8日
	 * @author tb.yumu@yikuyi.com
	 */
	public void roleSave(RoleVo vo){
		
		String id = String.valueOf(IdGen.getInstance().nextId());
		String userId = RequestHelper.getLoginUserId();
		String account = RequestHelper.getLoginUser().getUsername();
		Date date = new Date();
		vo.setId(id);
		vo.setAccount(account);
		vo.setCreator(userId);
		vo.setStatus("ENABLED");
		vo.setCreatedDate(date);
		vo.setLastUpdateUser(userId);
		vo.setLastUpdateDate(date);

		//将菜单转换为数据库存储类型
//		List<String> menuList = vo.getMenuList();
//		List<String>  list = new ArrayList<>();
//		for (int i = 0; i < menuList.size(); i++) {
//			String menuId = "MENU:VIEW:"+menuList.get(i);
//			list.add(menuId);
//		}
//		vo.setMenuList(list);
		roleDao.saveRoleType(vo);
//		roleDao.saveSecurityRolePermission(vo);
		PartyRelationship relationship = new PartyRelationship();
		
		relationship.setPartyIdFrom(id);
		relationship.setPartyIdTo(vo.getDeptId());		
		relationship.setRoleTypeIdTo(RoleType.ORGANIZATION_ROLE);
		relationship.setRoleTypeIdFrom(RoleType.ROLE);
		relationship.setPartyRelationshipTypeId(PartyRelationshipType.ROLE_DEPT_REL);
		relationship.setRelationshipName("角色代表");
		relationship.setFromDate(date);
		relationship.setStatusId(ENABLE);
		relationship.setCreator(userId);
		relationship.setCreatedDate(date);
		relationship.setLastUpdateUser(userId);
		relationship.setLastUpdateDate(date);
		partyRelationshipDao.insert(relationship);
	}
	
	/**
	 * 编辑角色信息
	 * @param vo
	 * @since 2017年5月8日
	 * @author tb.yumu@yikuyi.com
	 */
	public void roleUpdate(RoleVo vo){
		String userId = RequestHelper.getLoginUserId();
		String account = RequestHelper.getLoginUser().getUsername();
		Date date = new Date();
		vo.setStatus("ENABLED");
		vo.setAccount(account);
		vo.setLastUpdateUser(userId);
		vo.setLastUpdateDate(date);
		
		//将菜单转换为数据库存储类型
//		List<String> menuList = vo.getMenuList();
//		List<String>  list = new ArrayList<>();
//		for (int i = 0; i < menuList.size(); i++) {
//			String menuId = "MENU:VIEW:"+menuList.get(i);
//			list.add(menuId);
//		}
//		vo.setMenuList(list);
		roleDao.updateRoleType(vo);
//		roleDao.roleDelete(vo.getId());
//		roleDao.saveSecurityRolePermission(vo);
		
		PartyRelationship relationship = new PartyRelationship();
		//将之前的部门关系过期掉，然后创建新的部门关系
		relationship.setPartyIdFrom(vo.getId());
		relationship.setRoleTypeIdTo(RoleType.ORGANIZATION_ROLE);
		relationship.setRoleTypeIdFrom(RoleType.ROLE);
		relationship.setThruDate(new Date());
		relationship.setPartyRelationshipTypeId(PartyRelationshipType.ROLE_DEPT_REL);
		partyRelationshipDao.updateRelationShip(relationship);
		
		//创建新的角色与部门的关系
		relationship.setThruDate(null);
		relationship.setPartyIdTo(vo.getDeptId());
		relationship.setFromDate(date);
		relationship.setStatusId(ENABLE);
		relationship.setRelationshipName("角色代表");
		relationship.setCreator(userId);
		relationship.setCreatedDate(date);
		relationship.setLastUpdateUser(userId);
		relationship.setLastUpdateDate(date);
		partyRelationshipDao.insert(relationship);
		
	}
	
	public void changeRoleStatus(RoleVo vo){
		vo.setLastUpdateUser(RequestHelper.getLoginUserId());
		vo.setLastUpdateDate(new Date());
		roleDao.updateRoleType(vo);
	}
	
	public PageInfo<RoleVo> roleList(String name,String deptId,String status,int page,int size){
		RowBounds rowBounds = new RowBounds((page-1)*size, size);
		List<RoleVo> list = roleDao.roleList(name, deptId, status, rowBounds);
		PageInfo<RoleVo> info = new PageInfo<>(list);
		info.setPageSize(size);
		info.setPageNum(page);
		return info;
	}
	
	public RoleVo roleDetail(String id){
		return roleDao.roleDetail(id);
	}
	
	
	public PageInfo<UserManage> findCustomerByDeptId(String deptId,RowBounds rowBounds){
		
		String subDeptId = partyGroupDao.findSubDeptId(deptId);
		String[] arr = subDeptId.split(",");
		
		
		PageInfo<UserManage> pageInfo = new PageInfo<>(partyGroupDao.findCustomerByDeptId(arr, rowBounds));
		if(null != pageInfo.getList() && pageInfo.getList().size()>0){
			for(UserManage ma:pageInfo.getList()){				
				if(null !=ma.getRoleTypeNameList() && ma.getRoleTypeNameList().size()>0){
					StringBuilder stringB= new StringBuilder();
					for(String name: ma.getRoleTypeNameList()){
						stringB.append(name).append(",");
					}				
					ma.setRoleTypeName(stringB.toString().substring(0,stringB.toString().length()-1));
					ma.setRoleTypeNameList(null);
				}else{
					ma.setRoleTypeName(null);
				}
				
			}
		}
		return pageInfo;
	}
	
	
	public List<RoleVo> findRoleVoByDeptId(String deptId){
		List<RoleVo> list = roleDao.findRoleVoByDeptId(deptId);
		if(null !=list && list.size()>0){
			for(RoleVo vo:list){
				if(null != vo.getMenuList() && vo.getMenuList().size()>0){
		
					List<String> name = getPartyName(basedataServerUrl,restTemplate,vo.getMenuList());					
					vo.setMenuNameList(name);				
				}
			}
			
			
		}
		return list;
	}
	
	
	public static List<String> getPartyName(String partyDataServerUrl,RestTemplate restTemplate,  List<String> list) {
		StringBuilder url = new StringBuilder(partyDataServerUrl);
		String men = "";
		if(list!=null){
			for(String s:list){
				men = men + s +",";
			}			
		}
		url.append("/v1/menus/findNameById?menu=").append(men);			
		try {
		ResponseEntity<List<String>> response = restTemplate.exchange(url.toString(), HttpMethod.GET, null,new ParameterizedTypeReference<List<String>>(){});	
		List<String> result = response.getBody();
		return result;
		} catch (Exception e) {
			logger.error("菜单接口异常：{},URL:{}",e,url.toString());
			return null;
		}
	}
}
