<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
		default-lazy-init="false">
	

	<!-- 此配置主要用于spring session的配置，使用应用级的方案来解决j2ee集群的session -->
	
	
	<context:annotation-config />

	<!-- 开发环境使用一个EmptyFilter，还是使用的tomcat容器的方案，避免开发环境依赖redis -->
	<beans profile="dev">
		<!-- <bean class="org.springframework.session.config.annotation.web.http.SpringHttpSessionConfiguration" /> -->
		<!-- <bean class="org.springframework.session.MapSessionRepository"/> -->
		<bean id="springSessionRepositoryFilter" class="com.ykyframework.web.filters.EmptyFilter" />
	</beans>

	<!-- 测试环境和生产环境使用redis filter ，将session集中在redis托管。注意 redisNamespace的属性，保证各个web应用的session隔离 -->
	<beans profile="sit1,hz-uat,sit,uat,perf,prod">
		<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"
			p:maxInactiveIntervalInSeconds="1800" p:redisNamespace="${app.name}" />
		<!-- 
		<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
			<property name="maxIdle" value="200" />  
	        <property name="testOnBorrow" value="true" />  
	    </bean> 
		<bean id="sessionConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
			p:host-name="${redis.hostName}" 
	        p:port="${redis.port}" 
	        p:password="${redis.password}" 
	        p:database="${redis.database}"  
	        p:pool-config-ref="redis.poolConfig"/> 
	     --> 
		<bean id="sessionRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="redis.connectionFactory">
			<property name="keySerializer">  
        		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
	    	</property>  
		    <property name="hashKeySerializer">  
		        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
		    </property>
		</bean>
		
		<!-- 
		However, in a secured Redis enviornment the config command is disabled. This means that Spring Session cannot configure Redis Keyspace events for you. 
		To disable the automatic configuration add ConfigureRedisAction.NO_OP as a bean
		 -->
		<util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"/>
	</beans>


</beans>
