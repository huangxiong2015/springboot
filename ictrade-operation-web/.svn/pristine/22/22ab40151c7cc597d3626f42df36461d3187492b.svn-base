
/**
 * Created by yikuyi on 2017/1/17.
 */
Vue.component('select-province', {
    template : `
        <div class="city-picker row">
            <div class="pull-left col-sm-4"  >
                <select :class="inputClass" :style="styleObject" v-model="provinceSelected" @change="change"  :name="nameProvince ? nameProvince : 'province'" :id="idProvince ? idProvince : 'province'">
                    <option value="" v-text="placeholder.province"></option>
                    <option v-for="item in provinces" :value="item[0]" v-text="item[1]"></option>
                </select>
            </div>
            <div class="pull-left col-sm-4" >
                <select :class="inputClass"  :style="styleObject" v-model="citySelected" @change="change"  :name="nameCity ? nameCity : 'city'" :id="idCity ? idCity : 'city'">
                    <option value="" v-text="placeholder.city"></option>
                    <option v-for="item in cities" :value="item[0]" v-text="item[1]"></option>
                </select>
            </div>
            <div class="pull-left col-sm-4" >
                <select :class="inputClass"  :style="styleObject" v-model="districtSelected"  @change="change" :name="nameDistrict ? nameDistrict :'district'" :id="idDistrict ? idDistrict : 'district'">
                    <option value="" v-text="placeholder.district"></option>
                    <option v-for="item in districts" :value="item[0]" v-text="item[1]"></option>
                </select>
            </div>
        </div>
        `,
    props : {
        inputClass : '',
        styleObject: '' ,
        parentId : '',
        nameProvince:'',
        nameCity:'',
        nameDistrict:'',
        idProvince:'',
        idCity:'',
        idDistrict:'',
        placeholder : {
            type : Object,
            default(){
                return {
                    province : '请选择',
                    city : '请选择',
                    district : '请选择'
                }
            }
        },
        optionId:'',
        optionName:'',
        api :  String,
        setProvince: '',
        setCity:'',
        setDistrict:'',
    },
    data(){
        return {
            current: {
                province : this.setProvince ? this.setProvince: '',
                city : this.setCity ? this.setCity: '',
                district : this.setDistrict ? this.setDistrict: '',
            },
            sign: 0 ,
            region : [],
            citydata : [],
            districtdata : [],
            id: this.optionId ? this.optionId : 'id',
            name: this.optionName ? this.optionName : 'name',
            provinceSelected:'',
            citySelected:'',
            districtSelected:'',
        }
    },
    created : function () {
        var $this = this;
        httpGet($this, $this.api, {}, function (res , err) {//页面加载前调用方法
            if(res){
                $this.region = res;
                $this.provinceSelected = $this.current.province;
                $this.current.province='';
            }
        });
    },
    watch : {
        setProvince:function () {
            this.current.province=this.setProvince;
        },
        setCity:function () {
            this.current.city=this.setCity;
        },
        setDistrict:function () {
            this.current.district=this.setDistrict;
        },
        provinceSelected : function (val) {
            this.citySelected = ''
            this.districtSelected = ''
            this.ajax('citydata', val);
        },
        citySelected: function (val) {
            this.districtSelected = ''
            this.ajax('districtdata', val);
        }
    },
    methods : {
        change:function(){
            this.$emit('onchange',  {
                province: this.provinceSelected,
                city: this.citySelected,
                district: this.districtSelected
            });
        },
        ajax: function (obj, val) {
            var $this = this;
            console.log(obj);
            var param={};
            if(!val || val.length==0){
                if(obj == 'citydata'){
                    this.citydata = [];
                    this.districtdata = [];
                }else{
                    this.districtdata = [];
                }
            }else{
                var paramid = this.parentId ? this.parentId : 'pid';
                param[paramid]=val;
                httpGet($this, $this.api, param , function (res , err) {//页面加载前调用方法
                    if(res){
                        $this[obj] = res;
                        if(obj=='citydata'){
                            $this.citySelected = $this.current.city;
                            $this.current.city='';
                        }else{
                            $this.districtSelected =$this.current.district;
                            $this.current.district='';
                        }
                    }
                });
            }
        },
        _filter (items) {
            const result = []
            for (let i=0; i < items.length; i++) {
                result.push([items[i][this.id], items[i][this.name]])
            }
            return result
        },
        _searchIndex (items, model, by) {
            if (!model) return -1
            // by name
            if (by === 1) {
                for (let key in items) {
                    if ( items[key][1].indexOf(model) > -1 || items[key][0] === Number(model)) {
                        return key
                    }
                }
                // by code
            } else {
                for (let key in items) {
                    if (items[key][0] === model) {
                        return key
                    }
                }
            }
        },
        _selected(data, model){
            let index = -1
            if(data.length > 0){
                var items = this._filter (data);
                if (typeof model === 'string') {
                    index = this._searchIndex(items, model, 1)
                } else if (typeof model === 'number') {
                    index = this._searchIndex(items, Number(model), 0)
                } else if (Array.isArray(model)) {
                    index = this._searchIndex(items, Number(model[0]), 0)
                }
                return  items[index] ? items[index][0] : '';
            }else{
                return '';
            }
        }
    },
    computed : {
        provinces (){
            return this._filter(this.region);
        },
        cities (){
            return  this._filter(this.citydata);
        },
        districts (){
            return  this._filter(this.districtdata);
        }
    }
});