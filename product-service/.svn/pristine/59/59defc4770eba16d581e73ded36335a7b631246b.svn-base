package com.yikuyi.product.goods.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.yikuyi.product.goods.IProductResourceV8;
import com.yikuyi.product.goods.manager.ProductManager;
import com.yikuyi.product.goods.manager.SearchManager;
import com.yikuyi.product.vo.ProductVo;
import com.ykyframework.exception.SystemException;

@RestController
@RequestMapping("v8/products")
public class ProductResourceV8 implements IProductResourceV8 {
	
	private static final Logger logger = LoggerFactory.getLogger(SearchResouce.class);
	
	@Autowired
	private ProductManager productManager;
	
	@Autowired
	private SearchManager searchManager;

	/**
	 * 根据ids批量查询商品的全部信息,包含价格,交期等
	 * @param ids
	 * @return
	 * @author zr.wujiajun
	 */	
	@Override
	@RequestMapping(value = "/batch/full", method = RequestMethod.POST,produces = "application/json; charset=utf-8")	
	public List<ProductVo> getFullInfoByIds(@RequestBody List<String> ids) {
		return productManager.findFullInfoV2(ids);
	}
	
	/**
	 * 商品列表查询
	 * @param keyword
	 * @param includeFilter
	 * @param filterParam
	 * @param sort
	 * @param page
	 * @param pageSize
	 * @return
	 * @throws InterruptedException
	 */
	@Override
	@RequestMapping(value = "/search", method = RequestMethod.GET,produces = "application/json; charset=utf-8")
	public Map<String, Object> search(
			@RequestParam(value="keyword",required=false) String keyword,
			@RequestParam(value="includeFilter",required=false) String includeFilter,
			@RequestParam(value="filterParam",required=false) String filterParam,
			@RequestParam(value="sort",required=false) String sort,
			@RequestParam(value="page", required=false, defaultValue="1") int page,
			@RequestParam(value="pageSize",required=false, defaultValue="20") int pageSize) throws InterruptedException {
		try {
			Map<String,Object> filterParamMap = null;
			if(StringUtils.isNotBlank(filterParam)){
				filterParamMap = JSON.parseObject(filterParam, Map.class);
			}
			String vendorId = StringUtils.EMPTY;
			String manufacturer = StringUtils.EMPTY;
			String cat = StringUtils.EMPTY;
			if(MapUtils.isNotEmpty(filterParamMap)){
				vendorId = MapUtils.getString(filterParamMap, "vendorIds");
				manufacturer = MapUtils.getString(filterParamMap, "brandIds");
				cat = MapUtils.getString(filterParamMap, "categories");
			}
			String showQty = "1";//只查询现货商品
			return searchManager.searchProductByPage(keyword, vendorId, manufacturer, cat, sort, page, pageSize, showQty);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new SystemException(e.getMessage(), e);
		}
	}
	


}
