package com.yikuyi.product.specialoffer.manager;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.bson.Document;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.yikuyi.brand.model.ProductBrand;
import com.yikuyi.category.model.ProductCategory;
import com.yikuyi.party.PartyClientBuilder;
import com.yikuyi.party.facility.model.Facility;
import com.yikuyi.product.brand.dao.BrandRepository;
import com.yikuyi.product.category.dao.CategoryRepository;
import com.yikuyi.product.common.dao.BaseMongoClient;
import com.yikuyi.product.common.utils.BusiErrorCode;
import com.yikuyi.product.specialoffer.repository.SpecialOfferProductDraftRepository;
import com.yikuyi.product.specialoffer.repository.SpecialOfferProductRepository;
import com.yikuyi.product.specialoffer.repository.SpecialOfferRuleRepository;
import com.yikuyi.specialoffer.model.SpecialOfferProduct;
import com.yikuyi.specialoffer.model.SpecialOfferProductDraft;
import com.yikuyi.specialoffer.model.SpecialOfferRule;
import com.yikuyi.specialoffer.model.SpecialOfferRule.RuleType;
import com.yikuyi.specialoffer.vo.SpecialOfferRuleParam;
import com.yikuyi.specialoffer.vo.SpecialOfferRuleVo;
import com.ykyframework.exception.BusinessException;

import net.sf.json.JSONArray;

/**
 * 专属特价
 * @author zr.wuxiansheng@yikuyi.com
 * @version 1.0.0
 */
@Service
public class SpecialOfferRuleManager {
	
	private static final Logger logger = LoggerFactory.getLogger(SpecialOfferRuleManager.class);
	
	public static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	
	@Autowired
	private SpecialOfferRuleRepository specialOfferRuleRepository;
	
	@Autowired
	private BrandRepository brandRepository;
	
	@Autowired
	private PartyClientBuilder partyClientBuilder;
	
	@Autowired
	private CategoryRepository categoryRepository;

	@Autowired
	private SpecialOfferProductRepository specialOfferProductRepository;
	
	@Autowired
	private SpecialOfferProductDraftRepository specialOfferProductDraftRepository;
		
	@Autowired
	private BaseMongoClient baseMongoClient;

	
	/**
	 * 专属特价列表查询
	 * @param ruleType
	 * @param createdDateStart
	 * @param createDateEnd
	 * @param page
	 * @param pageSize
	 * @return
	 * @since 2017年12月14日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public PageInfo<SpecialOfferRuleVo> list(String vendorId,RuleType ruleType, String createdDateStart, String createDateEnd, int page,
			int pageSize) {
		try {
			//拼装查询条件以及排序
			Query query = this.mergeCondition(vendorId,ruleType,createdDateStart,createDateEnd);
			int pageNo = 0;
			if(page>0) 
				pageNo = page-1;
			Sort sort = new Sort(Direction.DESC,"updatedTimeMillis");
			PageRequest pageable = new PageRequest(pageNo,pageSize,sort);
			Page<SpecialOfferRuleVo> pageInfo = specialOfferRuleRepository.findSpecialOfferRuleByPage(query.getQueryObject(), pageable);
			List<SpecialOfferRuleVo> volist = pageInfo.getContent();
			if(!CollectionUtils.isEmpty(volist)){
				volist = handleSpecialOfferRuleList(volist);
			}
			PageInfo<SpecialOfferRuleVo> pageResult = new PageInfo<>(volist);		
			pageResult.setPageNum(page);
			pageResult.setPageSize(pageSize);
			pageResult.setTotal(pageInfo.getTotalElements());	
			return pageResult;
		} catch (Exception e) {
			logger.error("专属特价列表信息：{}", e);
		}
		return null;
	}
	
	/**
	 * 拼装查询条件以及排序
	 * @param ruleType
	 * @param createdDateStart
	 * @param createDateEnd
	 * @return
	 * @since 2017年12月14日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private Query mergeCondition(String vendorId,RuleType ruleType, String createdDateStart, String createDateEnd) {
		Query query = new Query();
		Criteria criteria = new Criteria();
		Optional<Criteria> optCriteria = Optional.ofNullable(criteria);
		if(!optCriteria.isPresent()){
			criteria = new Criteria();
		}
		criteria.and("vendorId").is(vendorId);
		if(ruleType!=null){
			criteria.and("ruleType").is(ruleType.toString());
		}
		try {
			String startTime = "";
			String endTime = "";
			if(StringUtils.isNotBlank(createdDateStart) && StringUtils.isNotBlank(createDateEnd)){
				startTime = String.valueOf(format.parse(createdDateStart).getTime());
				endTime = String.valueOf(format.parse(format.format(DateUtils.addDays(format.parse(createDateEnd),1))).getTime());
				criteria.and("createdTimeMillis").gte(startTime).lt(endTime);
			}else if(StringUtils.isNotBlank(createdDateStart)){
				startTime = String.valueOf(format.parse(createdDateStart).getTime());
				criteria.and("createdTimeMillis").gte(startTime);
			}else if(StringUtils.isNotBlank(createDateEnd)){
				endTime = String.valueOf(format.parse(format.format(DateUtils.addDays(format.parse(createDateEnd),1))).getTime());
				criteria.and("createdTimeMillis").lt(endTime);
			}
		} catch (Exception e) {
			logger.error("时间格式化错误");
		}
		query.addCriteria(criteria);
		return query;
	}

	/**
	 * 处理对象数据
	 * @param list
	 * @return
	 * @since 2017年12月14日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private List<SpecialOfferRuleVo> handleSpecialOfferRuleList(List<SpecialOfferRuleVo> list) {
		try {
			if(CollectionUtils.isNotEmpty(list)){
				for (SpecialOfferRuleVo specialOfferRuleVo : list) {
					specialOfferRuleVo.setCreatedTimeMillis(timeStamp2Date(specialOfferRuleVo.getCreatedTimeMillis()));
					specialOfferRuleVo.setUpdatedTimeMillis(timeStamp2Date(specialOfferRuleVo.getUpdatedTimeMillis()));
					//制造商
					String brandName = getMfrName(specialOfferRuleVo.getMfrIds());
					specialOfferRuleVo.setMfrName(brandName);
					//仓库
					String facilityName = getSourceName(specialOfferRuleVo.getSourceIds());
					specialOfferRuleVo.setSourceName(facilityName);
					//大类/小类/次小类
					String categoryName = getCateName(specialOfferRuleVo.getCatIds());
					specialOfferRuleVo.setCatName(categoryName);
				}
			}
		} catch (Exception e) {
			logger.error("时间格式错误：{}", e);
		}
		return list;
	}
	

	/**
	 * 获取制造商名称
	 * @param mfrIds
	 * @since 2017年12月14日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private String getMfrName(List<Integer> mfrIds) {
		StringBuilder brandName = new StringBuilder();
		boolean first = true;
		if(CollectionUtils.isNotEmpty(mfrIds)){
			List<ProductBrand> brandList = brandRepository.findBrandByIds(mfrIds);
			if(CollectionUtils.isNotEmpty(brandList)){
				for (ProductBrand productBrand : brandList) {
					String name = productBrand.getBrandName();
					if(first){
						first = false;
					}else{
						brandName.append(",");
					}
					brandName.append(name);
				}
			}
		}
		return brandName.toString();
	}
	
	/**
	 * 获取制造商名称
	 * @param mfrIds
	 * @return
	 * @since 2017年12月22日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private String getMfrNameArrayList(List<Integer> mfrIds) {
		String result = "";
		JSONArray array = new JSONArray();
		if(CollectionUtils.isNotEmpty(mfrIds)){
			List<ProductBrand> brandList = brandRepository.findBrandByIds(mfrIds);
			if(CollectionUtils.isNotEmpty(brandList)){
				for (ProductBrand productBrand : brandList) {
					JSONObject object = new JSONObject();
					object.put("id", productBrand.getId());
					object.put("name", productBrand.getBrandName());
					array.add(object);
				}
			}
			result = array.toString();
		}
		return result;	
	}
	
	/**
	 * 获取仓库名称
	 * @param sourceIds
	 * @return
	 * @since 2017年12月15日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private String getSourceName(List<String> sourceIds) {
		StringBuilder facilityName = new StringBuilder();
		boolean first = true;
		if(CollectionUtils.isNotEmpty(sourceIds)){
			List<Facility> facilityList = partyClientBuilder.facilityResource().getFacility(sourceIds);
			if(CollectionUtils.isNotEmpty(facilityList)){
				for (Facility facility : facilityList) {
					String name = facility.getFacilityName();
					if(first){
						first = false;
					}else{
						facilityName.append(",");
					}
					facilityName.append(name);
				}
			}
		}
		return facilityName.toString();
	}
	
	/**
	 * 查询次小类名称
	 * @param catIds
	 * @return
	 * @since 2017年12月22日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private String getCateName(List<String> catIds) {
		String result = "";
		StringBuilder cateName = new StringBuilder();
		boolean first = true;
		if(CollectionUtils.isNotEmpty(catIds)){
			for (int j = 0; j < catIds.size(); j++) {
					String catId = catIds.get(j);
					String catIdsNew = catId.replace("/", ",");//用逗号替换掉正斜杠
					String[] arr = catIdsNew.split(",");
					if("*/*/*".equals(catId)){
						result = "不限";
						return result;
					}else if(!catId.contains("*")){
						ProductCategory category = categoryRepository.findById(Integer.valueOf(arr[2]));
						String categoryName = category.getName();
						if(first){
							first = false;
						}else{
							cateName.append(",");
						}
						cateName.append(categoryName);
					}else{
						ProductCategory category  = null;
						for (int i = 0; i < arr.length; i++) {
							if(i>0){
								category = categoryRepository.findById(Integer.valueOf(arr[i-1]));
							}		
						}
						if(category!=null){
							String categoryName = category.getName();
							if(first){
								first = false;
							}else{
								cateName.append(",");
							}
							cateName.append(categoryName);
						}
				}
			}
		}
		result = cateName.toString();
		return result;
	}

	/**
	 * 查询次小类名称数组
	 * @param catIds
	 * @return
	 * @since 2017年12月15日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	private List<String> getCateNameArrayList(List<String> catIds) {
		List<String> list = new ArrayList<>();
		if(CollectionUtils.isNotEmpty(catIds)){
			for (int j = 0; j < catIds.size(); j++) {
					String catId = catIds.get(j);
					String catIdsNew = catId.replace("/", ",");//用逗号替换掉正斜杠
					String[] arr = catIdsNew.split(",");
					JSONArray array = new JSONArray();
					for (int i = 0; i < arr.length; i++) {
						if(!"*".equals(arr[i])){
							ProductCategory category = categoryRepository.findById(Integer.valueOf(arr[i]));
							JSONObject object = new JSONObject();
							object.put("id", category.getId());
							object.put("name", category.getName());
							array.add(object);
						}else{
							JSONObject object = new JSONObject();
							object.put("id", "*");
							object.put("name", "*");
							array.add(object);
						}
					}
					list.add(array.toString());
			}
		}
		return list;
	}


	/**
	 * 时间戳转化为时间格式
	 * @param seconds
	 * @param format
	 * @return
	 * @since 2017年12月14日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public static String timeStamp2Date(String seconds) {  
		 String res;
		 long time=new Long(seconds);  
		 res = format.format(time);  
		 return res;
    }  

	/**
	 * 查询专属特价规则详情
	 * @param id
	 * @return
	 * @since 2017年12月19日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public SpecialOfferRuleVo getSpecialOfferRuleVo(String id) {
		SpecialOfferRuleVo ruleVo = new SpecialOfferRuleVo();
		try {
			SpecialOfferRule specialOfferRule = specialOfferRuleRepository.findOne(id);
			BeanUtils.copyProperties(ruleVo, specialOfferRule);
			ruleVo.setCreatedTimeMillis(timeStamp2Date(ruleVo.getCreatedTimeMillis()));
			ruleVo.setUpdatedTimeMillis(timeStamp2Date(ruleVo.getUpdatedTimeMillis()));
			//制造商
			String brandName = getMfrName(ruleVo.getMfrIds());
			ruleVo.setMfrName(brandName);
			String brandNameArray = getMfrNameArrayList(ruleVo.getMfrIds());
			ruleVo.setMfrNameArray(brandNameArray);
			//仓库
			String facilityName = getSourceName(ruleVo.getSourceIds());
			ruleVo.setSourceName(facilityName);
			//大类/小类/次小类
			String categoryName = getCateName(ruleVo.getCatIds());
			ruleVo.setCatName(categoryName);
			List<String> categoryNameArrayList = getCateNameArrayList(ruleVo.getCatIds());
			ruleVo.setCatNameArray(categoryNameArrayList);
		} catch (Exception e) {
			logger.error("专属特价查询详情：{}", e);
		}
		return ruleVo;
	}


	
	/**
	 * 删除专属特价规则
	 * @param id
	 * @since 2017年12月15日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public void deteteRuleById(String id) {
		specialOfferRuleRepository.delete(id);
	}

	/**
	 * 添加专属特价规则信息
	 * @param specialOfferRuleParam
	 * @since 2017年12月18日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	
	public void addSpecialOfferRule(String ruleId,SpecialOfferRule specialOfferRule) {
		try {
			if(specialOfferRule == null){
					throw new BusinessException(BusiErrorCode.SPECIAL_OFFER_RULE_NULL, "专属特价规则信息不能为空");
			}
			LoginUser userInfo = RequestHelper.getLoginUser();
			//添加专属特价规则信息
			specialOfferRule.setId(ruleId);
			specialOfferRule.setCreator(userInfo.getId());
			specialOfferRule.setCreatorName(userInfo.getUsername());
			specialOfferRule.setCreatedTimeMillis(String.valueOf(System.currentTimeMillis()));
			specialOfferRule.setUpdatedTimeMillis(String.valueOf(System.currentTimeMillis()));
			specialOfferRule.setLastUpdateUser(userInfo.getId());
			specialOfferRule.setLastUpdateUserName(userInfo.getUsername());
			
			StringBuilder mpnName = new StringBuilder();
			boolean first = true;
			//将商品的信息从草稿表中迁移到正式表中
			Document result = baseMongoClient.getDatabase().runCommand(new Document("eval","copySpecialProductDraft("+ruleId+")"));
			if("1.0".equals(result.get("ok").toString())){//迁移数据成功
				//添加specialOfferRule表的mpn字段，取前三个
				List<SpecialOfferProduct> list = specialOfferProductRepository.findSpecialOfferProductByRuleId(ruleId);
				if(CollectionUtils.isNotEmpty(list)){
					for (int i = 0; i < list.size(); i++) {
						if(i<3){//mpn取product数据的前三条
							if(first){
								first = false;
							}else{
								mpnName.append(",");
							}
							mpnName.append(list.get(i).getMpn());
						}
					}
				}
				specialOfferRule.setMpn(mpnName.toString());
			}
			specialOfferRuleRepository.insert(specialOfferRule);
			
		} catch (Exception e) {
			logger.error("添加专属特价规则", e);
		}
	}
	
	/**
	 * 编辑专属特价规则
	 * @param specialOfferRuleParam
	 * @return
	 * @since 2017年12月20日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public void updateSpecialOfferRule(SpecialOfferRuleParam specialOfferRuleParam) {
		try {
			if(specialOfferRuleParam == null){
				throw new BusinessException(BusiErrorCode.SPECIAL_OFFER_RULE_NULL, "专属特价规则信息不能为空");
			}
			SpecialOfferRule ruleOld = specialOfferRuleRepository.findOne(specialOfferRuleParam.getId());
			SpecialOfferRule specialOfferRule = new SpecialOfferRule();
			if(ruleOld!=null){//编辑产品线内容信息
				specialOfferRule.setId(specialOfferRuleParam.getId());
				specialOfferRule.setVendorId(specialOfferRuleParam.getVendorId());
				specialOfferRule.setRuleType(specialOfferRuleParam.getRuleType());
				specialOfferRule.setMpnType(specialOfferRuleParam.getMpnType());
				specialOfferRule.setMfrIds(specialOfferRuleParam.getMfrIds());
				specialOfferRule.setSourceIds(specialOfferRuleParam.getSourceIds());
				specialOfferRule.setCatIds(specialOfferRuleParam.getCatIds());
				specialOfferRule.setDesc(specialOfferRuleParam.getDesc());
				specialOfferRule.setCreator(ruleOld.getCreator());
				specialOfferRule.setCreatorName(ruleOld.getCreatorName());
				specialOfferRule.setCreatedTimeMillis(ruleOld.getCreatedTimeMillis());
				specialOfferRule.setUpdatedTimeMillis(String.valueOf(System.currentTimeMillis()));
				specialOfferRule.setLastUpdateUser(ruleOld.getLastUpdateUser());
				specialOfferRule.setLastUpdateUserName(ruleOld.getLastUpdateUserName());
			}
			//设置specialOfferRule表的mpn字段，取list前三个
			StringBuilder mpnName = new StringBuilder();
			boolean first = true;
			//清除正式表中型号类型上传的数据，重新迁移数据
			//1.清除正式表中MPN类型的UPLOAD类型的数据
			SpecialOfferProduct product = new SpecialOfferProduct();
			product.setRuleId(specialOfferRuleParam.getId());//规则id
			List<SpecialOfferProduct> productlist = specialOfferProductRepository.findSpecialOfferProductByRuleId(specialOfferRuleParam.getId());
			if(CollectionUtils.isNotEmpty(productlist)){
				specialOfferProductRepository.delete(product);
			}
			List<SpecialOfferProductDraft> offerRulesDraftList = specialOfferProductDraftRepository.findSpecialOfferProductDraftByRuleId(specialOfferRuleParam.getId());
			if(CollectionUtils.isNotEmpty(offerRulesDraftList)){
				//2.从草稿表中重新迁移数据
				Document result = baseMongoClient.getDatabase().runCommand(new Document("eval","copySpecialProductDraft("+specialOfferRuleParam.getId()+")"));
				if("1.0".equals(result.get("ok").toString())){//迁移数据成功
					//添加specialOfferRule表的mpn字段，取前三个
					List<SpecialOfferProduct> list = specialOfferProductRepository.findSpecialOfferProductByRuleId(specialOfferRuleParam.getId());
					if(CollectionUtils.isNotEmpty(list)){
						for (int i = 0; i < list.size(); i++) {
							if(i<3){//mpn取product数据的前三条
								if(first){
									first = false;
								}else{
									mpnName.append(",");
								}
								mpnName.append(list.get(i).getMpn());
							}
						}
					}
					specialOfferRule.setMpn(mpnName.toString());
				}
			}
			specialOfferRuleRepository.save(specialOfferRule);
		} catch (Exception e) {
			logger.error("编辑特价规则信息：{}", e);
		}
	}
	
	/**
	 * 将正式商品表中的数据迁移到草稿表中
	 * @param ruleId
	 * @since 2017年12月20日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public void copyProductToDraft(String ruleId) {
		try {
			//在迁移数据之前先清除一下草稿表中的数据
			SpecialOfferProductDraft productDraft = new SpecialOfferProductDraft();
			productDraft.setRuleId(ruleId);//规则id
			List<SpecialOfferProductDraft> productDraftlist = specialOfferProductDraftRepository.findSpecialOfferProductDraftByRuleId(ruleId);
			if(CollectionUtils.isNotEmpty(productDraftlist)){
				specialOfferProductDraftRepository.delete(productDraft);
			}
			Document result = baseMongoClient.getDatabase().runCommand(new Document("eval","copySpecialProductToDraft("+ruleId+")"));
			Assert.assertEquals(1.0, result.get("ok"));
		} catch (Exception e) {
			logger.error("将正式商品表中的数据迁移到草稿表中:{}", e);
		}
	}
	
			 
}