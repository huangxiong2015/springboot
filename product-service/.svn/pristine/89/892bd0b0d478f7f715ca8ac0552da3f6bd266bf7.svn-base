package com.yikuyi.product.goods.manager;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Future;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.AsyncResult;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.ictrade.enterprisematerial.InventorySearchManager;
import com.yikuyi.brand.model.ProductBrand;
import com.yikuyi.category.model.ProductCategory;
import com.yikuyi.party.PartyClientBuilder;
import com.yikuyi.party.group.vo.PartyGroupVo;
import com.yikuyi.party.model.Party;
import com.yikuyi.party.resource.PartyGroupClient;
import com.yikuyi.party.vo.PartyVo;
import com.yikuyi.product.brand.manager.BrandManager;
import com.yikuyi.product.category.manager.CategoryManager;

@Service
public class SearchAsyncManager {
	
	private static final Logger logger = LoggerFactory.getLogger(SearchAsyncManager.class);

	@Autowired
	private InventorySearchManager inventorySearchManager;
	
	@Autowired
	private BrandManager brandManager;
	
	@Autowired
	private CategoryManager categoryManager;
	
	@Autowired
	private PartyClientBuilder partyClientBuilder;
	
	@Async
	public Future<JSONObject> searchProductInfo(JSONObject conJson){
		JSONObject resultInfo = new JSONObject();
		try {
			long startTime = System.currentTimeMillis();
			resultInfo= inventorySearchManager.search(conJson);
			logger.info("查询商品信息完成，耗时:{}",System.currentTimeMillis()-startTime);
		} catch (Exception e) {
			logger.error("searchProductInfo error{},{}",e.getMessage(),e);
		}
		return new AsyncResult<>(resultInfo);
	}
	
	/**
	 * 根据关键字匹配标准分类
	 * @param keyword
	 * @return
	 */
	@Async
	public Future<ProductCategory> keywordMatchCate(String keyword){
		try {
			if(StringUtils.isEmpty(keyword)){
				return new AsyncResult<>(null);
			}
			return new AsyncResult<>(categoryManager.getCateByCateName(keyword));
		} catch (Exception e) {
			logger.error("keywordMatchCate error:{}",e.getMessage(),e);
		}
		return new AsyncResult<>(null);
	}
	
	/**
	 * 根据关键字匹配标准制造商
	 * @param keyword
	 * @return
	 */
	@Async
	public Future<ProductBrand> keywordMatchBrand(String keyword){
		try {
			if(StringUtils.isEmpty(keyword)){
				return new AsyncResult<>(null);
			}
			return new AsyncResult<>(Optional.ofNullable(brandManager.getBrandByAliasName(Arrays.asList(keyword.trim().toUpperCase())))
					.map(v->v.get(keyword.trim().toUpperCase())).orElse(null));
//			return new AsyncResult<>(Optional.ofNullable(brandManager.getAliasBrandMap()).map(v->v.get(keyword)).orElse(null));
		} catch (Exception e) {
			logger.error("keywordMatchBrand error:{}",e.getMessage(),e);
		}
		return new AsyncResult<>(null);
	}
	
	/**
	 * 根据关键字匹配标准供应商
	 * @param keyword
	 * @return
	 */
	@Async
	public Future<PartyVo> keywordMatchVendor(String keyword){
		try {
			if(StringUtils.isEmpty(keyword)){
				return new AsyncResult<>(null);
			}
			//查询供应商
			PartyGroupClient client = partyClientBuilder.partyGroupClient();
			PartyGroupVo partyGroupVo = new PartyGroupVo();
			partyGroupVo.setStatus(Party.PartyStatus.PARTY_ENABLED);
			partyGroupVo.setRoleType("SUPPLIER");
			List<PartyVo> vendorInfo = client.partyGroups(partyGroupVo);
			List<PartyVo> filterList = vendorInfo.stream()
					.filter(v -> null != v.getPartyAttributes() && null != v.getPartyAttributes().getIsShowName()
							&& "Y".equals(v.getPartyAttributes().getIsShowName().getValue())
							&& null != v.getPartyGroup() && keyword.equalsIgnoreCase(v.getPartyGroup().getGroupName()))
					.collect(Collectors.toList());
			return new AsyncResult<>(CollectionUtils.isEmpty(filterList) ? null : filterList.get(0));
		} catch (Exception e) {
			logger.error("keywordMatchVendor error:{}",e.getMessage(),e);
		}
		return new AsyncResult<>(null);
	}
}
