/*
 * Created: 2017年12月20日
 *
 * Shenzhen Yikuyi Co., Ltd. All rights reserved. 
 * Copyright (c) 2015-2017 
 * License, Version 1.0. Published by Yikuyi IT department.
 *
 * For the convenience of communicating and reusing of codes,
 * any java names, variables as well as comments should be written according to the regulations strictly.
 */
package com.yikuyi.product.specialoffer.manager;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.framework.springboot.model.LoginUser;
import com.framewrok.springboot.web.RequestHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.ictrade.tools.export.ExportFactory;
import com.ictrade.tools.export.ExportProcesser;
import com.ictrade.tools.leadin.LeadInFactorySax;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.yikuyi.brand.model.ProductBrand;
import com.yikuyi.document.model.Document.DocumentStatus;
import com.yikuyi.document.model.Document.DocumentType;
import com.yikuyi.party.facility.model.Facility;
import com.yikuyi.product.activity.bll.ActivityProductReader;
import com.yikuyi.product.brand.manager.BrandManager;
import com.yikuyi.product.common.utils.BusiErrorCode;
import com.yikuyi.product.document.bll.DocumentManager;
import com.yikuyi.product.externalclient.PartyClientUtils;
import com.yikuyi.product.goods.dao.ProductRepository;
import com.yikuyi.product.material.bll.MaterialManager;
import com.yikuyi.product.specialoffer.dao.SpecialOfferProductDraftClient;
import com.yikuyi.product.specialoffer.repository.SpecialOfferProductDraftRepository;
import com.yikuyi.product.template.dao.ProductTemplateRepository;
import com.yikuyi.product.vo.ProductVo;
import com.yikuyi.specialoffer.model.SpecialOfferProduct.Status;
import com.yikuyi.specialoffer.model.SpecialOfferProductDraft;
import com.yikuyi.specialoffer.vo.SpecialOfferProductDraftVo;
import com.yikuyi.template.model.ProductTemplate;
import com.ykyframework.exception.BusinessException;
import com.ykyframework.exception.SystemException;
import com.ykyframework.model.IdGen;

@Service
public class SpecialOfferProductDraftManager {
	
	private static final Logger logger = LoggerFactory.getLogger(SpecialOfferProductDraftManager.class);
	
	@Autowired
	private SpecialOfferProductDraftRepository specialOfferProductDraftRepository;
	
	@Autowired
	private SpecialOfferProductDraftClient specialOfferProductDraftClient;
	
	@Autowired
	private MaterialManager materialManager;
	
	@Autowired
	private BrandManager brandManager;
	
	@Autowired
	private ProductRepository productRepository;
	
	@Autowired
	private PartyClientUtils partyClientUtils;
	
	@Autowired
	private ProductTemplateRepository productTemplateRepository;
	
	@Autowired
	private DocumentManager documentManager;
	
	// 阿里云文件路径
	@Value("${leadMaterialFilePath}")
	private String leadMaterialFilePath;
	
	/**
	 * mongodb中存的专属特价商品上传文件用的，模板id
	 */
	private static final String TEMPLATE_ID = "specialOfferProduct";
	
	private static final String EXPORT_TEMPLATE = "*ManufacturerName（制造商）,*MPN（型号）,*Distribution Name（分销商）,Storehouse 仓库,";
	/**
	 * 上传的文件解析
	 * @param spDraftVo
	 * @throws BusinessException
	 * @since 2017年12月20日
	 * @author tb.lijing@yikuyi.com
	 */
	public void parseFile(SpecialOfferProductDraftVo spDraftVo) throws BusinessException{
		MongoCollection<Document> specialOfferProductDraftCollection = specialOfferProductDraftClient.getCollection();
		String userId = RequestHelper.getLoginUserId();
		String userName = RequestHelper.getLoginUser().getUsername();
		String currentTimeMillis = Long.toString(new Date().getTime());
		String docId = String.valueOf(IdGen.getInstance().nextId());// 生成id用于下载的文件名称
		String fileName = materialManager.fileDownload(spDraftVo.getFileUrl(), spDraftVo.getOriFileName(), docId);// 从阿里云下载文件
		if(StringUtils.isBlank(fileName)){
			throw new BusinessException(BusiErrorCode.FILE_NULL, "文件不存在");// 当文件不存在时，抛出异常
		}
		File attFile = new File(leadMaterialFilePath + File.separator + fileName);// 取得文件
		ProductTemplate template = productTemplateRepository.findOne(TEMPLATE_ID);// 获取模板
		ActivityProductReader reader = new ActivityProductReader(template, 1000);
		LeadInFactorySax.createProcess(reader, attFile, null);
		String error = reader.getErrorMsg();
		if (StringUtils.isNotBlank(error)) {
			throw new BusinessException(BusiErrorCode.TITLE_ERROR, error);// 当标题错误时，抛出异常
		}
		SpecialOfferProductDraftVo tempI = new SpecialOfferProductDraftVo();
		SpecialOfferProductDraftVo tempJ = new SpecialOfferProductDraftVo();
		List<SpecialOfferProductDraftVo> listResultTemp = new ArrayList<>();
		List<String[]> data = reader.getDatas();// 获取已经读取的数据
		StringBuilder repeatError = new StringBuilder();
		int rowNum = 1;
		Map<String, ProductBrand> brandMap = brandManager.getAliasBrandMap();// 品牌
		Map<String, String> supplierNames = new HashMap<>();// 查询所有的供应商
		Map<String,List<Facility>> supplierFacilitys = new HashMap<>();
		partyClientUtils.getSupplier(supplierNames, supplierFacilitys);
		String ruleId = spDraftVo.getRuleId();//规则Id
		
		for (String[] temp : data){
			String sourceName = "";
			Integer inputBrandId = null;
			rowNum++;
			StringBuilder errorDesc = new StringBuilder();
			
			SpecialOfferProductDraftVo spDraft = new SpecialOfferProductDraftVo();
			String id = String.valueOf(IdGen.getInstance().nextId());//主键id
			spDraft.setId(id);//主键id
			spDraft.setRuleId(ruleId);//规则Id
			spDraft.setDocumentId(docId);//批次号
			spDraft.setRowNum(rowNum);
			//品牌名称标准化
			String inputBrand = StringUtils.isNotBlank(temp[0]) && brandMap.containsKey(temp[0].trim()) ? brandMap.get(temp[0].trim()).getBrandName() : temp[0];
			if(StringUtils.isNotBlank(temp[0]) && brandMap.containsKey(temp[0].trim())){
				inputBrandId = brandMap.get(temp[0].trim()).getId();//品牌id
			}
			//数据校验
			String checkMsg = checkData(temp);
			if(StringUtils.isNotBlank(checkMsg)){
				addErrorVo(spDraft, inputBrand, temp, checkMsg, listResultTemp);
				continue;
			}
			
			if(temp.length > 0 && !brandMap.containsKey(temp[0].trim())){
				errorDesc.append("ManufacturerName（制造商）不存在；");
				addErrorVo(spDraft, inputBrand, temp, errorDesc.toString(), listResultTemp);
				continue;
			}
			if (temp.length > 2 && StringUtils.isNotBlank(temp[2])){
				if (!supplierNames.containsKey(temp[2])) {
					errorDesc.append("Distribution Name（分销商）不存在；");
					addErrorVo(spDraft, inputBrand, temp, errorDesc.toString(), listResultTemp);
					continue;
				}else{
					String sourceId = "";
					String supplierName = temp[2];// 分销商名称
					String supplierId = supplierNames.get(supplierName);
					List<Facility> facilityList = supplierFacilitys.get(supplierId);
						// 查询仓库
							boolean facilityFlag = false;
							// 当仓库不为空时，并且匹配到仓库时，给仓库id赋值
							if (temp.length > 3 && StringUtils.isNotBlank(temp[3])) {
								for (Facility faTemp : facilityList) {
									if (temp[3].equalsIgnoreCase(faTemp.getFacilityName())) {
										sourceId = faTemp.getId();// 仓库ID
										facilityFlag = true;
										break;
									}
								}
								if (!facilityFlag) {
									errorDesc.append("Storehouse(仓库)填写不正确；");
									addErrorVo(spDraft, inputBrand, temp, errorDesc.toString(), listResultTemp);
									continue;
								}
							}
							
							List<ProductVo> ProductVoList = new ArrayList<>();
							// 当制造商、型号、分销商id、仓库id都有值的时候，查询商品数据
							if (null!=inputBrandId && StringUtils.isNotBlank(temp[1]) && StringUtils.isNotBlank(supplierId) && StringUtils.isNotBlank(sourceId)) {
								// 根据型号、制造商、供应商ID、仓库ID、状态查询有效的商品数据
								ProductVoList = productRepository.findProductsByMPNandManufacturer(inputBrandId, temp[1].trim(), supplierId.trim(), sourceId.trim(), 1);
							} else if (null!=inputBrandId && StringUtils.isNotBlank(temp[1]) && StringUtils.isNotBlank(supplierId)) {
								// 根据型号、制造商、供应商ID、状态查询有效的商品数据
								ProductVoList = productRepository.findProductsByCondition(inputBrandId, temp[1].trim(), supplierId.trim(), 1);
							}
							
							if (CollectionUtils.isEmpty(ProductVoList)) {
								errorDesc.append("商品数据不存在；");
								addErrorVo(spDraft, inputBrand, temp, errorDesc.toString(), listResultTemp);
								continue;
							} else if (ProductVoList.size() > 1) {
								errorDesc.append("商品数据为多条；");
								addErrorVo(spDraft, inputBrand, temp, errorDesc.toString(), listResultTemp);
								continue;
							} else if (1 == ProductVoList.size()){
								ProductVo productVo = ProductVoList.get(0);
								if (null != productVo.getSpu() && StringUtils.isBlank(productVo.getSpu().getId())) {
									errorDesc.append("商品数据非标准；");
									addErrorVo(spDraft, inputBrand, temp, errorDesc.toString(), listResultTemp);
									continue;
								}
								// 当仓库未填写，并且查询到的仓库数据只有一条时，给仓库id赋值
								if ((temp.length > 3 && StringUtils.isBlank(temp[3])) || temp.length < 4) {
									if (null != productVo && StringUtils.isNotBlank(productVo.getSourceId())) {
										String sourceIdTemp = productVo.getSourceId().trim();
										if (CollectionUtils.isNotEmpty(facilityList)) {
											for (Facility fa : facilityList) {
												String facilityIdTemp = fa.getId().trim();
												if (sourceIdTemp.equalsIgnoreCase(facilityIdTemp)) {
													sourceName = fa.getFacilityName();// 仓库名称
													break;
												}
											}
										}
									}
								}
								spDraft.setVendorId(productVo.getVendorId());
								spDraft.setSourceId(productVo.getSourceId());
								if (StringUtils.isNotBlank(sourceName)) {
									spDraft.setSourceName(sourceName);
								}
								spDraft.setProductId(productVo.getId());
								addSuccessVo(spDraft, inputBrand, temp, listResultTemp);
							}
				}
			} 
		}
		
		/**
		 * 判断上传的文件中是否有重复数据
		 */
		String tempIStr = "";
		String tempJStr = "";
		if (CollectionUtils.isNotEmpty(listResultTemp)) {
			for (int i = 0; i < listResultTemp.size(); i++) {
				tempI = listResultTemp.get(i);
				tempIStr = tempI.getBrandName() + tempI.getMpn() + tempI.getVendorName() + tempI.getSourceName();
				for (int j = i + 1; j < listResultTemp.size(); j++) {
					tempJ = listResultTemp.get(j);
					tempJStr = tempJ.getBrandName() + tempJ.getMpn() + tempJ.getVendorName() + tempJ.getSourceName();
					if (StringUtils.isNotBlank(tempIStr) && StringUtils.isNotBlank(tempJStr) && tempIStr.equalsIgnoreCase(tempJStr)) {
						repeatError.append("第" + tempI.getRowNum() + "行" + "与第" + tempJ.getRowNum() + "行数据重复。\n");
						continue;
					}
				}
			}
		}
		if (repeatError.length() > 0) {
			throw new BusinessException(BusiErrorCode.REPEAT_ERROR, repeatError.toString());// 当上传的数据有重复时，抛出异常
		}
		List<Document> documents = new ArrayList<>();
		for (SpecialOfferProductDraftVo draft : listResultTemp){
			Document document = new Document();
			Document insertDocument = new Document();
			insertDocument.put("_id", draft.getId());
			if (StringUtils.isNotBlank(draft.getVendorId())) {
				insertDocument.put("vendorId", draft.getVendorId());
			}
			if (StringUtils.isNotBlank(draft.getSourceId())) {
				insertDocument.put("sourceId", draft.getSourceId());
			}
			if (StringUtils.isNotBlank(draft.getRemark())) {
				insertDocument.put("remark", draft.getRemark());
			}
			if (StringUtils.isNotBlank(draft.getProductId())) {
				insertDocument.put("productId", draft.getProductId());
			}
			insertDocument.put("documentId", draft.getDocumentId());
			insertDocument.put("status", draft.getStatus().toString());
			if (StringUtils.isNotBlank(draft.getBrandName())) {
				insertDocument.put("brandName", draft.getBrandName());
			}
			if (StringUtils.isNotBlank(draft.getMpn())) {
				document.put("mpn", draft.getMpn());
				insertDocument.put("mpn", draft.getMpn());
			}
			if (StringUtils.isNotBlank(draft.getVendorName())) {
				document.put("vendorName", draft.getVendorName());
				insertDocument.put("vendorName", draft.getVendorName());
			}
			insertDocument.put("creator", userId);
			insertDocument.put("lastUpdateUser", userId);
			insertDocument.put("creatorName", userName);
			insertDocument.put("lastUpdateUserName", userName);
			insertDocument.put("createdTimeMillis", currentTimeMillis);
			insertDocument.put("updatedTimeMillis", currentTimeMillis);
			document.put("ruleId", draft.getRuleId());
			insertDocument.put("ruleId", draft.getRuleId());
			if(StringUtils.isNotBlank(draft.getSourceName())){
				document.put("sourceName", draft.getSourceName());
				insertDocument.put("sourceName", draft.getSourceName());
			}
			documents.add(insertDocument);
			if(StringUtils.isNotBlank(draft.getBrandName()) && StringUtils.isNotBlank(draft.getMpn()) 
					&& StringUtils.isNotBlank(draft.getVendorName()) && StringUtils.isNotBlank(draft.getSourceName())){
				specialOfferProductDraftCollection.deleteMany(document);//删除重复的数据
			}else if(StringUtils.isNotBlank(draft.getBrandName()) && StringUtils.isNotBlank(draft.getMpn()) 
					&& StringUtils.isNotBlank(draft.getVendorName())){
				specialOfferProductDraftCollection.deleteMany(document);//删除重复的数据
			}
		}
		specialOfferProductDraftCollection.insertMany(documents);//保存数据
		if(CollectionUtils.isNotEmpty(documents)){
			/**
			 * 将文档的数据插入到Document表中
			 */
			com.yikuyi.document.model.Document doc = new com.yikuyi.document.model.Document();
			String documentId = String.valueOf(IdGen.getInstance().nextId());
			doc.setId(documentId);
			doc.setTypeId(DocumentType.SPECIAL_OFFERP_RODUCT);
			doc.setDocumentLocation("http:" + spDraftVo.getFileUrl());
			doc.setDocumentName(spDraftVo.getOriFileName());
			doc.setStatusId(DocumentStatus.DOC_PRO_SUCCESS);
			doc.setCreator(userId);
			doc.setLastUpdateUser(userId);
			documentManager.insertDoc(doc);
		}
	}
	
	/**
	 * 校验数据
	 * @param temp
	 * @return
	 * @since 2017年12月21日
	 * @author tb.lijing@yikuyi.com
	 */
	private String checkData(String[] temp){
		StringBuilder errorDesc = new StringBuilder();
		if (temp.length > 0 && StringUtils.isBlank(temp[0])) {
			errorDesc.append("未填ManufacturerName（制造商）；");
		}else if ((temp.length > 1 && StringUtils.isBlank(temp[1])) || temp.length == 1) {
			errorDesc.append("未填MPN（型号）；");
		}else if ((temp.length > 2 && StringUtils.isBlank(temp[2])) || (temp.length > 0 && temp.length < 3)) {
			errorDesc.append("未填Distribution Name（分销商）；");
		}
		return errorDesc.toString();
	}
	
	/**
	 * 添加错误数据
	 * @param specialOfferProductDraftVo
	 * @param inputBrand
	 * @param temp
	 * @param errorMsg
	 * @param results
	 * @since 2017年12月21日
	 * @author tb.lijing@yikuyi.com
	 */
	private void addErrorVo(SpecialOfferProductDraftVo specialOfferProductDraftVo, String inputBrand, String[] temp , String errorMsg , List<SpecialOfferProductDraftVo> results){
		specialOfferProductDraftVo.setRemark(errorMsg);
		specialOfferProductDraftVo.setStatus(Status.UNABLE);
		addParpertion(specialOfferProductDraftVo, inputBrand, temp);
		results.add(specialOfferProductDraftVo);
	}
	
	/**
	 * 添加成功数据
	 * @param specialOfferProductDraftVo
	 * @param inputBrand
	 * @param temp
	 * @param results
	 * @since 2017年12月21日
	 * @author tb.lijing@yikuyi.com
	 */
	private void addSuccessVo(SpecialOfferProductDraftVo specialOfferProductDraftVo, String inputBrand, String[] temp , List<SpecialOfferProductDraftVo> results){
		specialOfferProductDraftVo.setStatus(Status.ENABLE);
		addParpertion(specialOfferProductDraftVo, inputBrand, temp);
		results.add(specialOfferProductDraftVo);
	}
	/**
	 * 赋值
	 * @param spDraft
	 * @param inputBrand
	 * @param temp
	 * @since 2017年12月21日
	 * @author tb.lijing@yikuyi.com
	 */
	private void addParpertion(SpecialOfferProductDraftVo spDraft, String inputBrand, String[] temp){
		if (temp.length > 0 && StringUtils.isNotBlank(inputBrand)) {
			spDraft.setBrandName(inputBrand.trim());
		}
		if (temp.length > 1 && StringUtils.isNotBlank(temp[1])) {
			spDraft.setMpn(temp[1].trim());
		}
		if (temp.length > 2 && StringUtils.isNotBlank(temp[2])) {
			spDraft.setVendorName(temp[2]);
		}
		if (temp.length > 3 && StringUtils.isNotBlank(temp[3])) {
			spDraft.setSourceName(temp[3]);
		}
	}
	
	/**
	 * 分页查询专属特价商品草稿数据
	 * @param ruleId
	 * @param page
	 * @param pageSize
	 * @return
	 * @since 2017年12月20日
	 * @author tb.lijing@yikuyi.com
	 */
	public PageInfo<SpecialOfferProductDraft> findSpecialOfferProductDraftByPage(String ruleId, int page, int pageSize){
		Query query  = new Query();
		Criteria criteria = new Criteria();
		criteria.and("ruleId").is(ruleId);
		int pageNo = 0;
		if(page>0) 
			pageNo = page-1;
		Sort sort = new Sort(Direction.DESC,"updatedTimeMillis");
		PageRequest pageable = new PageRequest(pageNo,pageSize,sort);
		query.addCriteria(criteria);
		Page<SpecialOfferProductDraft> pageInfo = specialOfferProductDraftRepository.findSpecialOfferProductDraftByPage(query.getQueryObject(), pageable);
		List<SpecialOfferProductDraft> SpecialOfferProductDrafts = pageInfo.getContent();
		if(CollectionUtils.isEmpty(SpecialOfferProductDrafts)){
			return new PageInfo<>(Collections.emptyList());
		}else{
			SpecialOfferProductDrafts.stream().forEach(a -> {
				a.setCreatedTimeMillis(SpecialOfferRuleManager.timeStamp2Date(a.getCreatedTimeMillis()));
				a.setUpdatedTimeMillis(SpecialOfferRuleManager.timeStamp2Date(a.getUpdatedTimeMillis()));
			});
		}
		PageInfo<SpecialOfferProductDraft> pageResult = new PageInfo<>(SpecialOfferProductDrafts);		
		pageResult.setPageNum(page);
		pageResult.setPageSize(pageSize);
		pageResult.setTotal(pageInfo.getTotalElements());	
		return pageResult;
	}
	
	/**
	 * 删除专属特价商品草稿数据
	 * @param ids
	 * @since 2017年12月20日
	 * @author tb.lijing@yikuyi.com
	 */
	public void deleteSpecialOfferProductDraft(List<String> ids){
		MongoCollection<Document> specialOfferProductDraftCollection = specialOfferProductDraftClient.getCollection();
		specialOfferProductDraftCollection.deleteMany(new Document("_id",new Document("$in",ids)));
	}

	/**
	 * 添加草稿商品信息
	 * @param productDraft
	 * @since 2017年12月21日
	 * @author zr.wuxiansheng@yikuyi.com
	 */
	public void addSpecialOfferProductDraft(SpecialOfferProductDraft productDraft) {
		try {
			if(productDraft == null){
					throw new BusinessException(BusiErrorCode.SPECIAL_PRODUCT_DRAFT_NULL, "专属特价规则信息不能为空");
			}
			LoginUser userInfo = RequestHelper.getLoginUser();
			SpecialOfferProductDraft draft = new SpecialOfferProductDraft();
			draft.setId(String.valueOf(IdGen.getInstance().nextId()));
			draft.setVendorId(productDraft.getVendorId());
			draft.setRuleId(productDraft.getRuleId());
			draft.setMpn(productDraft.getMpn());
			draft.setMpnUrl(productDraft.getMpnUrl());
			draft.setBrandId(productDraft.getBrandId());
			draft.setBrandName(productDraft.getBrandName());
			draft.setSourceId(productDraft.getSourceId());
			draft.setSourceName(productDraft.getSourceName());
			draft.setRemark(productDraft.getRemark());
			draft.setProductId(productDraft.getProductId());
			draft.setDocumentId(productDraft.getDocumentId());
			draft.setCreator(userInfo.getId());
			draft.setCreatorName(userInfo.getUsername());
			draft.setCreatedTimeMillis(String.valueOf(System.currentTimeMillis()));
			draft.setUpdatedTimeMillis(String.valueOf(System.currentTimeMillis()));
			draft.setLastUpdateUser(userInfo.getId());
			draft.setLastUpdateUserName(userInfo.getUsername());
			specialOfferProductDraftRepository.save(draft);
		} catch (Exception e) {
			logger.error("添加草稿商品信息：{}", e);
		}
	}
	
	private FindIterable<Document> getProductList(String ids, String ruleId,Status status){
		MongoCollection<Document> specialOfferProductDraftCollection = specialOfferProductDraftClient.getCollection();
		FindIterable<Document> result = null;
		if(null!=status && status == Status.UNABLE){
			result = specialOfferProductDraftCollection.find(new Document("ruleId",ruleId).append("status", Status.UNABLE))
					.projection(new Document("mpn",1).append("brandName", 1).append("vendorName", 1).append("sourceName", 1).append("remark", 1));
		}else{
			if(StringUtils.isNotBlank(ids)){
				String[] strs = ids.split(",");
				result = specialOfferProductDraftCollection.find(new Document("_id",new Document("$in",Arrays.asList(strs))))
				.projection(new Document("mpn",1).append("brandName", 1).append("vendorName", 1).append("sourceName", 1).append("remark", 1));
			}else{
				result = specialOfferProductDraftCollection.find(new Document("ruleId",ruleId))
						.projection(new Document("mpn",1).append("brandName", 1).append("vendorName", 1).append("sourceName", 1).append("remark", 1));
			}
		}
		return result;
	}
	
	/**
	 * 导出专属特价商品草稿数据
	 * @param ids
	 * @param ruleId
	 * @param status
	 * @param response
	 * @throws IOException
	 * @since 2017年12月20日
	 * @author tb.lijing@yikuyi.com
	 */
	public void exportSpecialOfferProductDrafts(String ids, String ruleId, Status status, 
			HttpServletResponse response)throws IOException {
		FindIterable<Document> result = getProductList(ids, ruleId, status);
		response.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		response.addHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", "Products.xls"));
		response.addHeader("Pragma", "no-cache");
		response.addHeader("Expires", "0");
		this.exportProductExcelXls(result, response.getOutputStream());
	}
	
	private void exportProductExcelXls(FindIterable<Document> list, OutputStream os) {
		ExportProcesser processer = null;
		try {
			processer = ExportFactory.getProcesser(ExportFactory.TYPE_XLS, os);
			// 标题
			processer.writeLine("Sheet1", EXPORT_TEMPLATE.split(","));

			List<List<String>> rowDataList;
			rowDataList = this.productDataList(list);
			for (List<String> rowData : rowDataList) {
				processer.writeLine("Sheet1", rowData);
			}
			processer.output();
		} catch (Exception e) {
			logger.error("Exception", e);
			throw new SystemException("exportProductExcelXls Exception", e);
		} finally {
			if (null != processer) {
				processer.close();
			}
		}
	}
	
	private List<List<String>> productDataList(FindIterable<Document> list){
		List<List<String>> rowDataList = Lists.newArrayList();
		if (null==list) {
			return rowDataList;
		}
		list.forEach(new Consumer<Document>(){
			@Override
			public void accept(Document t) {
				List<String> rowData = Lists.newArrayList();;
				// 制造商
				rowData.add(t.getString("brandName"));
				// 型号
				rowData.add(t.getString("mpn"));
				// 分销商
				rowData.add(t.getString("vendorName"));
				// 仓库
				rowData.add(t.getString("sourceName"));
				rowDataList.add(rowData);
			}
		});
		return rowDataList;
	}

}
